{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"source/Consul安装部署/member_dev.png","path":"Consul安装部署/member_dev.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/ui_1.png","path":"Consul安装部署/ui_1.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/ui_2.png","path":"Consul安装部署/ui_2.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/ui_3.png","path":"Consul安装部署/ui_3.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/ui_dev.png","path":"Consul安装部署/ui_dev.png","modified":0,"renderable":0},{"_id":"source/Go单元测试/更新.png","path":"Go单元测试/更新.png","modified":0,"renderable":0},{"_id":"source/codis安装及配置/addgroup.jpg","path":"codis安装及配置/addgroup.jpg","modified":0,"renderable":0},{"_id":"source/codis安装及配置/rebalance_slots.jpg","path":"codis安装及配置/rebalance_slots.jpg","modified":0,"renderable":0},{"_id":"source/Consul安装部署/candidate_146.png","path":"Consul安装部署/candidate_146.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/consul_dev.png","path":"Consul安装部署/consul_dev.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/consul架构图.png","path":"Consul安装部署/consul架构图.png","modified":0,"renderable":0},{"_id":"source/Consul安装部署/leader_52.png","path":"Consul安装部署/leader_52.png","modified":0,"renderable":0},{"_id":"source/Go单元测试/带有错误的convey.png","path":"Go单元测试/带有错误的convey.png","modified":0,"renderable":0},{"_id":"source/Go性能分析工具/analyze.png","path":"Go性能分析工具/analyze.png","modified":0,"renderable":0},{"_id":"source/Go性能分析工具/client_pprof.png","path":"Go性能分析工具/client_pprof.png","modified":0,"renderable":0},{"_id":"source/Go性能分析工具/debug_pprof.png","path":"Go性能分析工具/debug_pprof.png","modified":0,"renderable":0},{"_id":"source/Go性能分析工具/profile001.svg","path":"Go性能分析工具/profile001.svg","modified":0,"renderable":0},{"_id":"source/Go里面堆栈跟踪/Figure1.png","path":"Go里面堆栈跟踪/Figure1.png","modified":0,"renderable":0},{"_id":"source/Go里面堆栈跟踪/Figure2.png","path":"Go里面堆栈跟踪/Figure2.png","modified":0,"renderable":0},{"_id":"source/Go里面堆栈跟踪/Figure3.png","path":"Go里面堆栈跟踪/Figure3.png","modified":0,"renderable":0},{"_id":"source/Go性能分析工具/fire1.png","path":"Go性能分析工具/fire1.png","modified":0,"renderable":0},{"_id":"source/Go性能分析工具/sum&cum&flat.png","path":"Go性能分析工具/sum&cum&flat.png","modified":0,"renderable":0},{"_id":"source/微服务初探/客户端服务发现.png","path":"微服务初探/客户端服务发现.png","modified":0,"renderable":0},{"_id":"source/微服务初探/服务端服务发现.png","path":"微服务初探/服务端服务发现.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1533840606000},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1533870873393},{"_id":"themes/yelee/_config.yml","hash":"b7ac0f3e547aedbdbfc6a6b8e7a0acaa9928d07a","modified":1533865288425},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1533870873401},{"_id":"source/_posts/Consul安装部署.md","hash":"671a8640b04d6387ca8a41cc9d84c2ec69921266","modified":1533865116677},{"_id":"source/_posts/Go单元测试.md","hash":"e615b9e67f75f6ea6cbfc1a26ff4eb1ee2b131f8","modified":1533869656975},{"_id":"source/_posts/Go性能分析工具.md","hash":"d06f6418ad8eff3e7ac490692311c2253b3c5d54","modified":1533869982219},{"_id":"source/_posts/Go里面的堆栈跟踪.md","hash":"5ade1f64c0ba7b4d3ee4adcd9060dea8d222cc08","modified":1533870179826},{"_id":"source/_posts/codis安装及配置.md","hash":"76e937b0ea88f64028e4c354e3d8d64699f5a31b","modified":1533870320414},{"_id":"source/_posts/defer和追踪.md","hash":"ca0b1ededf00fb24312bdd5cd42410c3d06e4a0b","modified":1533865120493},{"_id":"source/_posts/golang-http包.md","hash":"fbfab6b12ecfaeb43d72f6490a70a458aca68b52","modified":1533870349047},{"_id":"source/_posts/redis集群安装.md","hash":"84fdefa9299c202261c3a26e1b2a450038c10e3f","modified":1533870317186},{"_id":"source/_posts/微服务初探.md","hash":"cec5d2c3199fd91d406cf404e68baf45bbf5d47b","modified":1533870340975},{"_id":"source/categories/index.md","hash":"36fed31ed905b0bb212496722c2b676fd7a3bf56","modified":1533806388904},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1533870873373},{"_id":"source/tags/index.md","hash":"86d108bf9ed69c0adac9588d7330f0e0e980bdcf","modified":1533806377968},{"_id":"themes/yelee/.git/config","hash":"fc9762f33cf36a22baab4720f661eeaa651e1c24","modified":1533840606000},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1533870861365},{"_id":"themes/yelee/.git/index","hash":"31d5b5c4a80eb6f943264d00ef9aa307ff0badff","modified":1533840606000},{"_id":"themes/yelee/.git/packed-refs","hash":"20be7a433f279648e8829ffa01ec6c959c5da2fe","modified":1533870873373},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1533840606000},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1533840606000},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1533840606000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1533840606000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1533840606000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1533840606000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1533870873397},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1533870873397},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1533870873397},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1533870873397},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1533870873397},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1533870873397},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1533870873397},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1533870873401},{"_id":"source/_posts/Consul安装部署/member_dev.png","hash":"a2753b83497b22fc988e62bebd94a97262557b94","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/ui_1.png","hash":"8b5ceafb840dddf081016e8d1066c6fd868496fb","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/ui_2.png","hash":"ae5c3eaadb8a52a521b77e8763109fd42fc1ba0a","modified":1533801771399},{"_id":"source/_posts/Consul安装部署/ui_3.png","hash":"e91c6d26058bdc1e98d6452c7c61b0d48b4ad56e","modified":1533801771399},{"_id":"source/_posts/Consul安装部署/ui_dev.png","hash":"cee3879e0a41074f817540931994174c9a10e052","modified":1533801771399},{"_id":"source/_posts/Go单元测试/更新.png","hash":"0a6af4e6cc8d9a0df3c2de02f56ec6b7aab86350","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/analyze.png","hash":"f96ca606575ee276cb081abd3f99b688ee5ea5c2","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/client_pprof.png","hash":"568f4e4654fc73e21c56660119a86272898a60d0","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/debug_pprof.png","hash":"a234b25fa6d3601aacd586b3c00285181970b101","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/index.html","hash":"000a2b4edde517fcf47f576c343e89f9203b84e1","modified":1533801771391},{"_id":"source/_posts/Go性能分析工具/profile001.svg","hash":"79e6a5da25ef5b692cf1e2a1dc670eade3fda387","modified":1533801771391},{"_id":"source/_posts/Go里面堆栈跟踪/Figure1.png","hash":"2c5aba8a18845a8325731b696d206a63a2faebe3","modified":1533801771399},{"_id":"source/_posts/Go里面堆栈跟踪/Figure2.png","hash":"646e65ea99e7c034d6dd490d05d7eff5e8ef075e","modified":1533801771399},{"_id":"source/_posts/Go里面堆栈跟踪/Figure3.png","hash":"e468947778d213e89ee5eb71367b6853cd4f8e6b","modified":1533801771399},{"_id":"source/_posts/codis安装及配置/addgroup.jpg","hash":"16f4e64701269a26b89938c17c47b23a2a70c2b1","modified":1533864375690},{"_id":"source/_posts/codis安装及配置/rebalance_slots.jpg","hash":"6b6a09292ffe794822259166bc68857539676baf","modified":1533864408386},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1533870861365},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1533870861365},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1533870861365},{"_id":"themes/yelee/.git/logs/HEAD","hash":"b3592c54e4e8255427e950db4f3c66a9041d9c05","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1533870873397},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1533870873405},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1533870873405},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1533870873405},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1533870873405},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1533870873409},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1533870873413},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1533870873413},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1533870873413},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1533870873413},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1533870873413},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1533870873413},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1533870873413},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1533870873413},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1533870873413},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1533870873413},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1533870873413},{"_id":"themes/yelee/source/img/avatar.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533846280000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1533870873413},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1533870873413},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1533870873413},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1533870873413},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1533870873413},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1533870873413},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1533870873413},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1533870873413},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1533870873413},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1533870873413},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1533840606000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1533870873413},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1533870873413},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1533870873413},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1533870873413},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1533840606000},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1533840606000},{"_id":"source/_posts/Consul安装部署/candidate_146.png","hash":"cc438d8d2b5587dfbbda5aa6491467e8ec2f2494","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/consul_dev.png","hash":"e47c057999e1e3e489970a7a9b4d17b812e849b4","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/consul架构图.png","hash":"395f68f0c6e83e0dd764d1b39f2bfb3cc7048f60","modified":1533801771395},{"_id":"source/_posts/Go性能分析工具/fire1.png","hash":"0fcbc421f8d21af0a036e62b8ce8399631a2b358","modified":1533801771391},{"_id":"source/_posts/Go性能分析工具/sum&cum&flat.png","hash":"ce71dadfb8ac37c0e81e65d5d935eeaed6890f01","modified":1533801771391},{"_id":"source/_posts/微服务初探/客户端服务发现.png","hash":"069cbc7ddea50d749cdaace2ca287b025e54079e","modified":1533801771391},{"_id":"source/_posts/微服务初探/服务端服务发现.png","hash":"96aef90daba8cfe772f1cc676630c9b58be2a8ad","modified":1533801771395},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1533870873409},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1533870873409},{"_id":"source/_posts/Consul安装部署/leader_52.png","hash":"0ac3d63d9d967beaf8ca74a5ebf09446cbbb436a","modified":1533801771395},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1533870873373},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1533870873397},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1533870873397},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1533870873401},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1533870873401},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1533870873401},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1533870873401},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1533870873413},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1533870873413},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1533870873413},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1533870873413},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1533870873413},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1533870873413},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1533870873413},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1533870873413},{"_id":"source/_posts/Go单元测试/带有错误的convey.png","hash":"d914c997f2eae5a6465e3b13790f8247f1af294d","modified":1533801771387},{"_id":"themes/yelee/.git/objects/pack/pack-4992a4b359af5b0238f4995ad4251c0fc78bb1a3.idx","hash":"0cf7b1180cba6070fe0e6fe0214e66b3cb15da29","modified":1533870873237},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"b3592c54e4e8255427e950db4f3c66a9041d9c05","modified":1533840606000},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1533870873373},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1533870873409},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1533870873409},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"b3592c54e4e8255427e950db4f3c66a9041d9c05","modified":1533840606000},{"_id":"themes/yelee/.git/objects/pack/pack-4992a4b359af5b0238f4995ad4251c0fc78bb1a3.pack","hash":"b8faf67676f7610bab5921e36d3911825d44107b","modified":1533870873237},{"_id":"public/search.xml","hash":"8475c45017739c0f8ae3a31dfecf42825eaa9dbd","modified":1533871357020},{"_id":"public/categories/index.html","hash":"245a8306ab21f240227a46f98994017eff61304e","modified":1533871077655},{"_id":"public/archives/2017/06/index.html","hash":"4bfe606af56f8156b9b30cbfbc50e7518b56be55","modified":1533871077655},{"_id":"public/archives/2017/08/index.html","hash":"a8bdd664e3d9aae5b141c9ac8b91e88dd14562e6","modified":1533871077655},{"_id":"public/archives/2017/12/index.html","hash":"fbaf1fa754ffb628084dbbcfef726527ab19e2f8","modified":1533871077655},{"_id":"public/archives/2018/index.html","hash":"ce3868347f59455ff359d68050bb0f132fa97abf","modified":1533871357170},{"_id":"public/archives/2018/07/index.html","hash":"1e56956dc0a8d7ca4f0d2ed2503386b24e9da4d4","modified":1533871077657},{"_id":"public/archives/2018/08/index.html","hash":"aef266af66953a8525b600accb23f1fd898a0491","modified":1533871077655},{"_id":"public/categories/分布式/index.html","hash":"f8d95f720b6f62075b26c6693bf6cf521a079244","modified":1533871077655},{"_id":"public/categories/redis/index.html","hash":"34b12cd016aa0a551b5e6fbeb99ada38104001c1","modified":1533871077655},{"_id":"public/categories/微服务/index.html","hash":"9c4a24e182b54b0ee7b4604b92b971476e5a63fe","modified":1533871077656},{"_id":"public/tags/Consul/index.html","hash":"54b78b9cfd46a35828c9915ef8653c9ba8e66727","modified":1533871077656},{"_id":"public/tags/codis/index.html","hash":"7275580c17f98a773fe11ba55cff61ad13bb9c7d","modified":1533871077656},{"_id":"public/tags/redis/index.html","hash":"d11a75357ec93282ab60352159fc49b2d6126bc3","modified":1533871077656},{"_id":"public/tags/微服务/index.html","hash":"b5cc487d8fdf6050aa6f2e3482f8e193f239c19c","modified":1533871077656},{"_id":"public/tags/index.html","hash":"47c526f6a1be99291ef4c43d5e70a9c17a535392","modified":1533871077656},{"_id":"public/2018/08/10/Go性能分析工具/index/index.html","hash":"2613644395f9e06b0d8d422399979ae3696d4293","modified":1533871077656},{"_id":"public/2018/07/18/Go里面的堆栈跟踪/index.html","hash":"4f8da7164b42e838c77bc4588085bf1ac1a2c97d","modified":1533871357169},{"_id":"public/2018/07/13/Consul安装部署/index.html","hash":"b73f77ed04d072400f40d095819307d0bb7ffb56","modified":1533871357169},{"_id":"public/2018/07/12/微服务初探/index.html","hash":"bd8eb27dee77d35e5491b1b1c57430390a07a51a","modified":1533871357169},{"_id":"public/2017/12/29/redis集群安装/index.html","hash":"2c8fcbd06f80c131af1e42a33ee611c90a3b9f86","modified":1533871357169},{"_id":"public/2017/12/12/codis安装及配置/index.html","hash":"aed9b7fcc8390008f93f68622ff670db181ecd8c","modified":1533871357169},{"_id":"public/2017/08/23/Go性能分析工具/index.html","hash":"9bc355fa9ba3253bf9f2724ed44ac5a25e9716ad","modified":1533871357169},{"_id":"public/2017/08/16/golang-http包/index.html","hash":"c50f99cfe07ca5160d755f19b2cf5bc0c105fe57","modified":1533871357169},{"_id":"public/2017/06/23/Go单元测试/index.html","hash":"e3e62ff5eabb3ed648ba7e0cebab7e9057ee94d2","modified":1533871357170},{"_id":"public/2017/06/15/defer和追踪/index.html","hash":"5b5d9ed955797d80bfe19439d79b8c1aa9b0f2a7","modified":1533871357170},{"_id":"public/archives/index.html","hash":"5514aa8c2758a28b4d21c7c77d76378a26b4cfa6","modified":1533871357170},{"_id":"public/archives/2017/index.html","hash":"10ba2c5a0f627f7c491006fb1098e42bbfc315f2","modified":1533871077656},{"_id":"public/categories/Golang/index.html","hash":"3adc6388d116c5ddd6a8b468ee23ab872efd7b88","modified":1533871077657},{"_id":"public/index.html","hash":"5887b3b5b1b97994ced40c8292097df1d27f806b","modified":1533871357170},{"_id":"public/tags/golang/index.html","hash":"eb38494f72fb19d4557664673f0126a6aa2a20a2","modified":1533871077657},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1533871077664},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1533871077664},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1533871077664},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1533871077664},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1533871077664},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1533871077664},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1533871077664},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1533871077664},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1533871077664},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1533871077664},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1533871077664},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1533871077664},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1533871077664},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1533871077664},{"_id":"public/img/avatar.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533871077665},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1533871077664},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1533871077664},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1533871077664},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1533871077664},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1533871077664},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1533871077665},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1533871077665},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1533871077665},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1533871077665},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1533871077665},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1533871077665},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1533871077665},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1533871077665},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1533871077665},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1533871078132},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1533871078134},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1533871078138},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1533871078138},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1533871078138},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1533871078138},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1533871078138},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1533871078138},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1533871078138},{"_id":"public/css/style.css","hash":"689bb5bd04a0693814432d971e50a5652d4d6631","modified":1533871078138},{"_id":"themes/yelee/source/favicon.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533846280000},{"_id":"public/favicon.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533871077663},{"_id":"source/Consul安装部署/member_dev.png","hash":"a2753b83497b22fc988e62bebd94a97262557b94","modified":1533801771395},{"_id":"source/Consul安装部署/ui_1.png","hash":"8b5ceafb840dddf081016e8d1066c6fd868496fb","modified":1533801771395},{"_id":"source/Consul安装部署/ui_2.png","hash":"ae5c3eaadb8a52a521b77e8763109fd42fc1ba0a","modified":1533801771399},{"_id":"source/Consul安装部署/ui_3.png","hash":"e91c6d26058bdc1e98d6452c7c61b0d48b4ad56e","modified":1533801771399},{"_id":"source/Consul安装部署/ui_dev.png","hash":"cee3879e0a41074f817540931994174c9a10e052","modified":1533801771399},{"_id":"source/Go单元测试/更新.png","hash":"0a6af4e6cc8d9a0df3c2de02f56ec6b7aab86350","modified":1533801771387},{"_id":"source/codis安装及配置/addgroup.jpg","hash":"16f4e64701269a26b89938c17c47b23a2a70c2b1","modified":1533864375690},{"_id":"source/codis安装及配置/rebalance_slots.jpg","hash":"6b6a09292ffe794822259166bc68857539676baf","modified":1533864408386},{"_id":"source/Consul安装部署/candidate_146.png","hash":"cc438d8d2b5587dfbbda5aa6491467e8ec2f2494","modified":1533801771395},{"_id":"source/Consul安装部署/consul_dev.png","hash":"e47c057999e1e3e489970a7a9b4d17b812e849b4","modified":1533801771395},{"_id":"source/Consul安装部署/consul架构图.png","hash":"395f68f0c6e83e0dd764d1b39f2bfb3cc7048f60","modified":1533801771395},{"_id":"source/Consul安装部署/leader_52.png","hash":"0ac3d63d9d967beaf8ca74a5ebf09446cbbb436a","modified":1533801771395},{"_id":"source/Go单元测试/带有错误的convey.png","hash":"d914c997f2eae5a6465e3b13790f8247f1af294d","modified":1533801771387},{"_id":"source/Go性能分析工具/analyze.png","hash":"f96ca606575ee276cb081abd3f99b688ee5ea5c2","modified":1533801771387},{"_id":"source/Go性能分析工具/client_pprof.png","hash":"568f4e4654fc73e21c56660119a86272898a60d0","modified":1533801771387},{"_id":"source/Go性能分析工具/debug_pprof.png","hash":"a234b25fa6d3601aacd586b3c00285181970b101","modified":1533801771387},{"_id":"source/Go性能分析工具/index.html","hash":"000a2b4edde517fcf47f576c343e89f9203b84e1","modified":1533801771391},{"_id":"source/Go性能分析工具/profile001.svg","hash":"79e6a5da25ef5b692cf1e2a1dc670eade3fda387","modified":1533801771391},{"_id":"source/Go里面堆栈跟踪/Figure1.png","hash":"2c5aba8a18845a8325731b696d206a63a2faebe3","modified":1533801771399},{"_id":"source/Go里面堆栈跟踪/Figure2.png","hash":"646e65ea99e7c034d6dd490d05d7eff5e8ef075e","modified":1533801771399},{"_id":"source/Go里面堆栈跟踪/Figure3.png","hash":"e468947778d213e89ee5eb71367b6853cd4f8e6b","modified":1533801771399},{"_id":"source/Go性能分析工具/fire1.png","hash":"0fcbc421f8d21af0a036e62b8ce8399631a2b358","modified":1533801771391},{"_id":"source/Go性能分析工具/sum&cum&flat.png","hash":"ce71dadfb8ac37c0e81e65d5d935eeaed6890f01","modified":1533801771391},{"_id":"source/微服务初探/客户端服务发现.png","hash":"069cbc7ddea50d749cdaace2ca287b025e54079e","modified":1533801771391},{"_id":"source/微服务初探/服务端服务发现.png","hash":"96aef90daba8cfe772f1cc676630c9b58be2a8ad","modified":1533801771395},{"_id":"public/Go性能分析工具/index.html","hash":"dde033ea32c1ae866ede3a3a83e20e199bb5aaaa","modified":1533871397561},{"_id":"public/Consul安装部署/member_dev.png","hash":"a2753b83497b22fc988e62bebd94a97262557b94","modified":1533871397563},{"_id":"public/Consul安装部署/ui_1.png","hash":"8b5ceafb840dddf081016e8d1066c6fd868496fb","modified":1533871397563},{"_id":"public/Consul安装部署/ui_2.png","hash":"ae5c3eaadb8a52a521b77e8763109fd42fc1ba0a","modified":1533871397563},{"_id":"public/Consul安装部署/ui_3.png","hash":"e91c6d26058bdc1e98d6452c7c61b0d48b4ad56e","modified":1533871397563},{"_id":"public/Consul安装部署/ui_dev.png","hash":"cee3879e0a41074f817540931994174c9a10e052","modified":1533871397564},{"_id":"public/Go单元测试/更新.png","hash":"0a6af4e6cc8d9a0df3c2de02f56ec6b7aab86350","modified":1533871397564},{"_id":"public/codis安装及配置/addgroup.jpg","hash":"16f4e64701269a26b89938c17c47b23a2a70c2b1","modified":1533871397564},{"_id":"public/codis安装及配置/rebalance_slots.jpg","hash":"6b6a09292ffe794822259166bc68857539676baf","modified":1533871397564},{"_id":"public/Go性能分析工具/analyze.png","hash":"f96ca606575ee276cb081abd3f99b688ee5ea5c2","modified":1533871397564},{"_id":"public/Go性能分析工具/client_pprof.png","hash":"568f4e4654fc73e21c56660119a86272898a60d0","modified":1533871397564},{"_id":"public/Go性能分析工具/debug_pprof.png","hash":"a234b25fa6d3601aacd586b3c00285181970b101","modified":1533871397564},{"_id":"public/Go性能分析工具/profile001.svg","hash":"79e6a5da25ef5b692cf1e2a1dc670eade3fda387","modified":1533871397564},{"_id":"public/Go里面堆栈跟踪/Figure1.png","hash":"2c5aba8a18845a8325731b696d206a63a2faebe3","modified":1533871397564},{"_id":"public/Go里面堆栈跟踪/Figure2.png","hash":"646e65ea99e7c034d6dd490d05d7eff5e8ef075e","modified":1533871397564},{"_id":"public/Go里面堆栈跟踪/Figure3.png","hash":"e468947778d213e89ee5eb71367b6853cd4f8e6b","modified":1533871397564},{"_id":"public/Consul安装部署/candidate_146.png","hash":"cc438d8d2b5587dfbbda5aa6491467e8ec2f2494","modified":1533871397566},{"_id":"public/Consul安装部署/consul_dev.png","hash":"e47c057999e1e3e489970a7a9b4d17b812e849b4","modified":1533871397566},{"_id":"public/Consul安装部署/consul架构图.png","hash":"395f68f0c6e83e0dd764d1b39f2bfb3cc7048f60","modified":1533871397566},{"_id":"public/Go性能分析工具/fire1.png","hash":"0fcbc421f8d21af0a036e62b8ce8399631a2b358","modified":1533871397566},{"_id":"public/Go性能分析工具/sum&cum&flat.png","hash":"ce71dadfb8ac37c0e81e65d5d935eeaed6890f01","modified":1533871397566},{"_id":"public/微服务初探/客户端服务发现.png","hash":"069cbc7ddea50d749cdaace2ca287b025e54079e","modified":1533871397566},{"_id":"public/微服务初探/服务端服务发现.png","hash":"96aef90daba8cfe772f1cc676630c9b58be2a8ad","modified":1533871397566},{"_id":"public/Consul安装部署/leader_52.png","hash":"0ac3d63d9d967beaf8ca74a5ebf09446cbbb436a","modified":1533871397567},{"_id":"public/Go单元测试/带有错误的convey.png","hash":"d914c997f2eae5a6465e3b13790f8247f1af294d","modified":1533871397568}],"Category":[{"name":"分布式","_id":"cjknf5fod0003lzn9ttv9wyr6"},{"name":"Golang","_id":"cjknf5foh0008lzn97eci4cp7"},{"name":"redis","_id":"cjknf5fop000rlzn9w1zo5y74"},{"name":"微服务","_id":"cjknf5foq000zlzn9wlpjgu53"}],"Data":[],"Page":[{"title":"categories","date":"2018-08-09T09:17:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-09 17:17:20\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2018-08-09T09:19:48.904Z","path":"categories/index.html","comments":1,"_id":"cjknf5fob0001lzn9346d1csb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-09T09:17:17.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-09 17:17:17\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2018-08-09T09:19:37.968Z","path":"tags/index.html","comments":1,"_id":"cjknf5fp00016lzn98p0danmt","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"zh-Hans\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n<meta name=\"author\" content=\"四娃\" />\n\n\n\n<meta name=\"description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"keywords\" content=\"golang\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"Go性能分析工具\">\n<meta property=\"og:url\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/index.html\">\n<meta property=\"og:site_name\" content=\"zhqqqy\">\n<meta property=\"og:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/client_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/analyze.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/Blog/hexo/source/_posts/Go性能分析工具/sum&cum&flat.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/fire1.png\">\n<meta property=\"og:updated_time\" content=\"2018-07-20T05:05:45.634Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"Go性能分析工具\">\n<meta name=\"twitter:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"twitter:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n\n<link rel=\"apple-touch-icon\" href= \"/apple-touch-icon.png\">\n\n\n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"zhqqqy\" type=\"application/atom+xml\">\n\n\n\n    <link rel=\"shortcut icon\" href=\"/img/avatar.png\">\n\n\n\n    <link href=\"//cdn.bootcss.com/animate.css/3.5.1/animate.min.css\" rel=\"stylesheet\">\n\n\n\n    <link href=\"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css\" rel=\"stylesheet\">\n\n\n\n    <script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n    <link href=\"//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-minimal.css\" rel=\"stylesheet\">\n\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n\n\n<link href=\"//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n\n<title>Go性能分析工具 | zhqqqy</title>\n\n<script src=\"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js\"></script>\n<script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n\n<script>\n    var yiliaConfig = {\n        fancybox: true,\n        animate: true,\n        isHome: false,\n        isPost: true,\n        isArchive: false,\n        isTag: false,\n        isCategory: false,\n        fancybox_js: \"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js\",\n        scrollreveal: \"//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js\",\n        search: undefined\n    }\n</script>\n\n\n    <script> yiliaConfig.jquery_ui = [false]; </script>\n\n\n\n    <script> yiliaConfig.rootUrl = \"\\/\";</script>\n\n\n\n\n\n\n</head>\n<body>\n  <div id=\"container\">\n    <div class=\"left-col\">\n    <div class=\"overlay\"></div>\n<div class=\"intrude-less\">\n    <header id=\"header\" class=\"inner\">\n        <a href=\"/\" class=\"profilepic\">\n            <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n        </a>\n        <hgroup>\n          <h1 class=\"header-author\"><a href=\"/\">四娃</a></h1>\n        </hgroup>\n\n        \n\n        \n\n\n        \n            <div id=\"switch-btn\" class=\"switch-btn\">\n                <div class=\"icon\">\n                    <div class=\"icon-ctn\">\n                        <div class=\"icon-wrap icon-house\" data-idx=\"0\">\n                            <div class=\"birdhouse\"></div>\n                            <div class=\"birdhouse_holes\"></div>\n                        </div>\n                        <div class=\"icon-wrap icon-ribbon hide\" data-idx=\"1\">\n                            <div class=\"ribbon\"></div>\n                        </div>\n                        \n                        <div class=\"icon-wrap icon-link hide\" data-idx=\"2\">\n                            <div class=\"loopback_l\"></div>\n                            <div class=\"loopback_r\"></div>\n                        </div>\n                        \n                        \n                        <div class=\"icon-wrap icon-me hide\" data-idx=\"3\">\n                            <div class=\"user\"></div>\n                            <div class=\"shoulder\"></div>\n                        </div>\n                        \n                    </div>\n                    \n                </div>\n                <div class=\"tips-box hide\">\n                    <div class=\"tips-arrow\"></div>\n                    <ul class=\"tips-inner\">\n                        <li>菜单</li>\n                        <li>标签</li>\n                        \n                        <li>友情链接</li>\n                        \n                        \n                        <li>关于我</li>\n                        \n                    </ul>\n                </div>\n            </div>\n        \n\n        <div id=\"switch-area\" class=\"switch-area\">\n            <div class=\"switch-wrap\">\n                <section class=\"switch-part switch-part1\">\n                    <nav class=\"header-menu\">\n                        <ul>\n                        \n                            <li><a href=\"/\">主页</a></li>\n                        \n                            <li><a href=\"/archives/\">所有文章</a></li>\n                        \n                            <li><a href=\"/tags/\">标签云</a></li>\n                        \n                            <li><a href=\"/about/\">关于我</a></li>\n                        \n                            <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                        \n                        </ul>\n                    </nav>\n                    <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\"></a>\n                            \n                                <a class=\"fa GitHub\" href=\"https://github.com/zhqqqy\" title=\"GitHub\"></a>\n                            \n                                <a class=\"fa RSS\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n                    </nav>\n                </section>\n                \n                \n                <section class=\"switch-part switch-part2\">\n                    <div class=\"widget tagcloud\" id=\"js-tagcloud\">\n                        <ul class=\"tag-list\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/Consul/\">Consul</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/golang/\">golang</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/redis/\">redis</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/微服务/\">微服务</a></li></ul>\n                    </div>\n                </section>\n                \n                \n                \n                <section class=\"switch-part switch-part3\">\n                    <div id=\"js-friends\">\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://hexo.io\">Hexo</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://pages.github.com/\">GitHub</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"http://moxfive.xyz/\">MOxFIVE</a>\n                    \n                    </div>\n                </section>\n                \n\n                \n                \n                <section class=\"switch-part switch-part4\">\n                \n                    <div id=\"js-aboutme\">专注于前端</div>\n                </section>\n                \n            </div>\n        </div>\n    </header>                \n</div>\n    </div>\n    <div class=\"mid-col\">\n      <nav id=\"mobile-nav\">\n      <div class=\"overlay\">\n          <div class=\"slider-trigger\"></div>\n          <h1 class=\"header-author js-mobile-header hide\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n      </div>\n    <div class=\"intrude-less\">\n        <header id=\"header\" class=\"inner\">\n            <a href=\"/\" class=\"profilepic\">\n                <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n            </a>\n            <hgroup>\n              <h1 class=\"header-author\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n            </hgroup>\n            \n            <nav class=\"header-menu\">\n                <ul>\n                \n                    <li><a href=\"/\">主页</a></li>\n                \n                    <li><a href=\"/archives/\">所有文章</a></li>\n                \n                    <li><a href=\"/tags/\">标签云</a></li>\n                \n                    <li><a href=\"/about/\">关于我</a></li>\n                \n                    <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                \n                <div class=\"clearfix\"></div>\n                </ul>\n            </nav>\n            <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" target=\"_blank\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\"></a>\n                            \n                                <a class=\"fa GitHub\" target=\"_blank\" href=\"https://github.com/zhqqqy\" title=\"GitHub\"></a>\n                            \n                                <a class=\"fa RSS\" target=\"_blank\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n            </nav>\n        </header>                \n    </div>\n    <link class=\"menu-list\" tags=\"标签\" friends=\"友情链接\" about=\"关于我\"/>\n</nav>\n      <div class=\"body-wrap\"><article id=\"post-Go性能分析工具\" class=\"article article-type-post\" itemscope itemprop=\"blogPost\">\n  \n    <div class=\"article-meta\">\n      <a href=\"/2017/08/23/Go性能分析工具/\" class=\"article-date\">\n      <time datetime=\"2017-08-23T09:33:44.000Z\" itemprop=\"datePublished\">2017-08-23</time>\n</a>\n\n\n    </div>\n  \n  <div class=\"article-inner\">\n    \n      <input type=\"hidden\" class=\"isFancy\" />\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"article-title\" itemprop=\"name\">\n      Go性能分析工具\n    </h1>\n  \n\n      </header>\n      \n      <div class=\"article-info article-info-post\">\n        \n    <div class=\"article-category tagcloud\">\n    <a class=\"article-category-link\" href=\"/categories/Golang/\">Golang</a>\n    </div>\n\n\n        \n    <div class=\"article-tag tagcloud\">\n        <ul class=\"article-tag-list\"><li class=\"article-tag-list-item\"><a class=\"article-tag-list-link\" href=\"/tags/golang/\">golang</a></li></ul>\n    </div>\n\n        <div class=\"clearfix\"></div>\n      </div>\n      \n    \n    <div class=\"article-entry\" itemprop=\"articleBody\">\n      \n          \n        <h1 id=\"为什么需要性能分析\"><a href=\"#为什么需要性能分析\" class=\"headerlink\" title=\"为什么需要性能分析\"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p>\n<p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p>\n<h1 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h1><h2 id=\"什么是pprof\"><a href=\"#什么是pprof\" class=\"headerlink\" title=\"什么是pprof\"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>，<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"external\">net/http/pprof</a>  ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。 </p>\n<h2 id=\"pprof文件生成\"><a href=\"#pprof文件生成\" class=\"headerlink\" title=\"pprof文件生成\"></a>pprof文件生成</h2><h3 id=\"runtime-pprof\"><a href=\"#runtime-pprof\" class=\"headerlink\" title=\"runtime/pprof\"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tf, err := os.Create(fmt.Sprintf(<span class=\"string\">\"cpu-%s.pprof\"</span>, time.Now().Format(<span class=\"string\">\"20060102\"</span>)))</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"create CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(f); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"start CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> pprof.StopCPUProfile()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tdoSth()</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"comment\">//优雅退出</span></div><div class=\"line\">\tsigChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</div><div class=\"line\">\texitChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"signal received\"</span>, &lt;-sigChan)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err := server.Stop(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\texitChan &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> &lt;-exitChan:</div><div class=\"line\">\t<span class=\"keyword\">case</span> s := &lt;-sigChan:</div><div class=\"line\">\t\tlog.Panicln(<span class=\"string\">\"signal received, stopping immediately\"</span>, s)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\trand.Float32()</div><div class=\"line\">\t\ttime.Sleep(<span class=\"number\">500</span> * time.Millisecond)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p>\n<p>然后通过命令执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ <span class=\"keyword\">go</span> tool pprof .\\cpu<span class=\"number\">-20170823.</span>pprof</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul <span class=\"number\">19</span>, <span class=\"number\">2018</span> at <span class=\"number\">5</span>:<span class=\"number\">31</span>pm (CST)</div><div class=\"line\">Duration: <span class=\"number\">58.32s</span>, Total samples = <span class=\"number\">0</span></div><div class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>然后就可以在pprof下使用命令了</p>\n<p>可以通过go tool pprof命令查看pprof支持哪些命令。</p>\n<p><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p>\n<h3 id=\"net-http-pprof\"><a href=\"#net-http-pprof\" class=\"headerlink\" title=\"net/http/pprof\"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p>\n<p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, Index)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, Cmdline)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, Profile)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, Symbol)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, Trace)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"通过浏览器分析\"><a href=\"#通过浏览器分析\" class=\"headerlink\" title=\"通过浏览器分析\"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p>\n<p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/debug_pprof.png\" alt=\"\"></p>\n<p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p>\n<p>通过代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Profile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">sec, _ := strconv.ParseInt(r.FormValue(<span class=\"string\">\"seconds\"</span>), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> sec == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\tsec = <span class=\"number\">30</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">········</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(w); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// StartCPUProfile failed, so no writes yet.</span></div><div class=\"line\">\t\t<span class=\"comment\">// Can change header back to text content</span></div><div class=\"line\">\t\t<span class=\"comment\">// and send error code.</span></div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain; charset=utf-8\"</span>)</div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"X-Go-Pprof\"</span>, <span class=\"string\">\"1\"</span>)</div><div class=\"line\">\t\tw.WriteHeader(http.StatusInternalServerError)</div><div class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">\"Could not enable CPU profiling: %s\\n\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsleep(w, time.Duration(sec)*time.Second)</div><div class=\"line\">\tpprof.StopCPUProfile()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p>\n<p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p>\n<p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p>\n<p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p>\n<h4 id=\"通过命令行来分析\"><a href=\"#通过命令行来分析\" class=\"headerlink\" title=\"通过命令行来分析\"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p>\n<p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p>\n<p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/client_pprof.png\" alt=\"\"></p>\n<p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p>\n<h2 id=\"pprof文件分析\"><a href=\"#pprof文件分析\" class=\"headerlink\" title=\"pprof文件分析\"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p>\n<p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/analyze.png\" alt=\"\"></p>\n<p>这里分析下各个参数的意思</p>\n<h3 id=\"flat和cum\"><a href=\"#flat和cum\" class=\"headerlink\" title=\"flat和cum:\"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p>\n<p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p>\n<p>flat表示的是a()函数自己耗费的时间</p>\n<p>如果a()函数是这样的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">b() <span class=\"comment\">// takes 2s</span></div><div class=\"line\">do something directly <span class=\"comment\">// takes 3s</span></div><div class=\"line\">c() <span class=\"comment\">// takes 2s</span></div></pre></td></tr></table></figure>\n<p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum:\"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p>\n<p>具体可以参考：</p>\n<p><a href=\"https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/\" target=\"_blank\" rel=\"external\">What is the meaning of “flat” and “cum” in golang pprof output</a></p>\n<h3 id=\"图形分析\"><a href=\"#图形分析\" class=\"headerlink\" title=\"图形分析\"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p>\n<p>安装好之后可以直接使用命令来生成图片</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z guess]# go tool pprof  cpu.pprof</div><div class=\"line\">Entering interactive mode (type \"help\" for commands)</div><div class=\"line\">(pprof) svg</div><div class=\"line\">Generating report in profile001.svg</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>这样就生成了svg图片<code>profile001.svg</code></p>\n<p><img src=\"/2017/08/23/Go性能分析工具/Blog\\hexo\\source\\_posts\\Go性能分析工具\\sum&amp;cum&amp;flat.png\" alt=\"\"></p>\n<p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p>\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz </p>\n<p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p>\n<p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p>\n<blockquote>\n<p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/brendangregg/FlameGraph.git</div></pre></td></tr></table></figure>\n<p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp flamegraph.pl /usr/local/bin</div></pre></td></tr></table></figure>\n<p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ flamegraph.pl -h</div><div class=\"line\">Option h is ambiguous (hash, height, help)</div><div class=\"line\">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</div><div class=\"line\"></div><div class=\"line\">    --title       # change title text</div><div class=\"line\">    --width       # width of image (default 1200)</div><div class=\"line\">    --height      # height of each frame (default 16)</div><div class=\"line\">    --minwidth    # omit smaller functions (default 0.1 pixels)</div><div class=\"line\">    --fonttype    # font type (default &quot;Verdana&quot;)</div><div class=\"line\">    --fontsize    # font size (default 12)</div><div class=\"line\">    --countname   # count type label (default &quot;samples&quot;)</div><div class=\"line\">    --nametype    # name type label (default &quot;Function:&quot;)</div><div class=\"line\">    --colors      # set color palette. choices are: hot (default), mem, io,</div><div class=\"line\">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</div><div class=\"line\">                  # yellow, purple, orange</div><div class=\"line\">    --hash        # colors are keyed by function name hash</div><div class=\"line\">    --cp          # use consistent palette (palette.map)</div><div class=\"line\">    --reverse     # generate stack-reversed flame graph</div><div class=\"line\">    --inverted    # icicle graph</div><div class=\"line\">    --negate      # switch differential hues (blue&lt;-&gt;red)</div><div class=\"line\">    --help        # this message</div><div class=\"line\"></div><div class=\"line\">    eg,</div><div class=\"line\">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</div></pre></td></tr></table></figure>\n<p>4.安装go-torch</p>\n<p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go get -v github.com/uber/go-torch</div></pre></td></tr></table></figure>\n<p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go-torch -b cpu.pprof -f cpu.svg</div><div class=\"line\">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</div><div class=\"line\">INFO[12:38:16] Writing svg to cpu.svg</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li>\n<li><strong>-f：</strong>表示要生成的svg图片名称</li>\n</ul>\n<p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/fire1.png\" alt=\"\"></p>\n<p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p>\n<blockquote>\n<ul>\n<li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li>\n<li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li>\n</ul>\n</blockquote>\n<p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html\" target=\"_blank\" rel=\"external\">Go代码调优利器-火焰图</a></p>\n<p><a href=\"https://blog.csdn.net/WaltonWang/article/details/54019891\" target=\"_blank\" rel=\"external\">Golang性能调优(go-torch, go tool pprof)</a></p>\n\n      \n    </div>\n    \n  </div>\n  \n    \n    <div class=\"copyright\">\n        <p><span>本文标题:</span><a href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></p>\n        <p><span>文章作者:</span><a href=\"/\" title=\"回到主页\">四娃</a></p>\n        <p><span>发布时间:</span>2017-08-23, 17:33:44</p>\n        <p><span>最后更新:</span>2018-07-20, 13:05:45</p>\n        <p>\n            <span>原始链接:</span><a class=\"post-url\" href=\"/2017/08/23/Go性能分析工具/\" title=\"Go性能分析工具\">http://yoursite.com/2017/08/23/Go性能分析工具/</a>\n            <span class=\"copy-path\" data-clipboard-text=\"原文: http://yoursite.com/2017/08/23/Go性能分析工具/　　作者: 四娃\" title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\"></i></span>\n            <script> var clipboard = new Clipboard('.copy-path'); </script>\n        </p>\n        <p>\n            <span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" title=\"CC BY-NC-SA 4.0 International\" target = \"_blank\">\"署名-非商用-相同方式共享 4.0\"</a> 转载请保留原文链接及作者。\n        </p>\n    </div>\n\n\n\n    <nav id=\"article-nav\">\n        \n            <div id=\"article-nav-newer\" class=\"article-nav-title\">\n                <a href=\"/2017/12/12/codis/\">\n                    codis安装及配置\n                </a>\n            </div>\n        \n        \n            <div id=\"article-nav-older\" class=\"article-nav-title\">\n                <a href=\"/2017/08/16/golang-http包/\">\n                    golang-http包\n                </a>\n            </div>\n        \n    </nav>\n\n  \n</article>\n\n    <div id=\"toc\" class=\"toc-article\">\n        <strong class=\"toc-title\">文章目录</strong>\n        \n            <ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#为什么需要性能分析\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">为什么需要性能分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pprof\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#什么是pprof\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">什么是pprof</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件生成\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">pprof文件生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#runtime-pprof\"><span class=\"toc-number\">2.2.1.</span> <span class=\"toc-text\">runtime/pprof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#net-http-pprof\"><span class=\"toc-number\">2.2.2.</span> <span class=\"toc-text\">net/http/pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过浏览器分析\"><span class=\"toc-number\">2.2.2.1.</span> <span class=\"toc-text\">通过浏览器分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过命令行来分析\"><span class=\"toc-number\">2.2.2.2.</span> <span class=\"toc-text\">通过命令行来分析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件分析\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">pprof文件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flat和cum\"><span class=\"toc-number\">2.3.1.</span> <span class=\"toc-text\">flat和cum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sum\"><span class=\"toc-number\">2.3.2.</span> <span class=\"toc-text\">sum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#图形分析\"><span class=\"toc-number\">2.3.3.</span> <span class=\"toc-text\">图形分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#火焰图\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">火焰图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#安装\"><span class=\"toc-number\">2.4.1.</span> <span class=\"toc-text\">安装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#参考：\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">参考：</span></a></li></ol>\n        \n    </div>\n    <style>\n        .left-col .switch-btn,\n        .left-col .switch-area {\n            display: none;\n        }\n        .toc-level-3 i,\n        .toc-level-3 ol {\n            display: none !important;\n        }\n    </style>\n\n    <input type=\"button\" id=\"tocButton\" value=\"隐藏目录\"  title=\"点击按钮隐藏或者显示文章目录\">\n\n    <script>\n        yiliaConfig.toc = [\"隐藏目录\", \"显示目录\", !!\"false\"];\n    </script>\n\n\n\n    \n<div class=\"share\">\n    \n        <div class=\"bdsharebuttonbox\">\n            <a href=\"#\" class=\"fa fa-twitter bds_twi\" data-cmd=\"twi\" title=\"分享到推特\"></a>\n            <a href=\"#\" class=\"fa fa-weibo bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\n            <a href=\"#\" class=\"fa fa-qq bds_sqq\" data-cmd=\"sqq\" title=\"分享给 QQ 好友\"></a>\n            <a href=\"#\" class=\"fa fa-files-o bds_copy\" data-cmd=\"copy\" title=\"复制网址\"></a>\n            <a href=\"#\" class=\"fa fa fa-envelope-o bds_mail\" data-cmd=\"mail\" title=\"通过邮件分享\"></a>\n            <a href=\"#\" class=\"fa fa-weixin bds_weixin\" data-cmd=\"weixin\" title=\"生成文章二维码\"></a>\n            <a href=\"#\" class=\"fa fa-share-alt bds_more\" data-cmd=\"more\"></i></a>\n        </div>\n        <script>\n            window._bd_share_config={\n                \"common\":{\"bdSnsKey\":{},\"bdText\":\"Go性能分析工具　| zhqqqy　\",\"bdMini\":\"2\",\"bdMiniList\":false,\"bdPic\":\"\",\"bdStyle\":\"0\",\"bdSize\":\"24\"},\"share\":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];\n        </script>\n    \n\n    \n</div>\n\n\n\n\n\n\n\n    \n\n\n\n\n    <div class=\"scroll\" id=\"post-nav-button\">\n        \n            <a href=\"/2017/12/12/codis/\" title=\"上一篇: codis安装及配置\">\n                <i class=\"fa fa-angle-left\"></i>\n            </a>\n        \n\n        <a title=\"文章列表\"><i class=\"fa fa-bars\"></i><i class=\"fa fa-times\"></i></a>\n\n        \n            <a href=\"/2017/08/16/golang-http包/\" title=\"下一篇: golang-http包\">\n                <i class=\"fa fa-angle-right\"></i>\n            </a>\n        \n    </div>\n\n    <ul class=\"post-list\"><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/18/Go里面的堆栈跟踪/\">Go里面的堆栈跟踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/13/Consul安装部署/\">Consul安装部署</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/12/微服务初探/\">微服务初探</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/29/redis Cluster 集群安装/\">redis Cluster 集群安装</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/12/codis/\">codis安装及配置</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/16/golang-http包/\">golang-http包</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/23/Go单元测试/\">Go单元测试</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/my-first-blog/\">6.4 defer 和追踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/hello-world/\">First Test</a></li></ul>\n\n\n\n\n    <script>\n        \n    </script>\n</div>\n      <footer id=\"footer\">\n    <div class=\"outer\">\n        <div id=\"footer-info\">\n            <div class=\"footer-left\">\n                <i class=\"fa fa-copyright\"></i> \n                2016-2018 四娃\n            </div>\n            <div class=\"footer-right\">\n                <a href=\"http://hexo.io/\" target=\"_blank\" title=\"快速、简洁且高效的博客框架\">Hexo</a>  Theme <a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" title=\"简而不减 Hexo 双栏博客主题  v3.5\">Yelee</a> by MOxFIVE <i class=\"fa fa-heart animated infinite pulse\"></i>\n            </div>\n        </div>\n        \n            <div class=\"visit\">\n                \n                    <span id=\"busuanzi_container_site_pv\" style='display:none'>\n                        <span id=\"site-visit\" title=\"本站到访数\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_site_uv\"></span>\n                        </span>\n                    </span>\n                \n                \n                    <span>| </span>\n                \n                \n                    <span id=\"busuanzi_container_page_pv\" style='display:none'>\n                        <span id=\"page-visit\"  title=\"本页阅读量\"><i class=\"fa fa-eye animated infinite pulse\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_page_pv\"></span>\n                        </span>\n                    </span>\n                \n            </div>\n        \n    </div>\n</footer>\n    </div>\n    \n<script data-main=\"/js/main.js\" src=\"//cdn.bootcss.com/require.js/2.2.0/require.min.js\"></script>\n\n    <script>\n        $(document).ready(function() {\n            var iPad = window.navigator.userAgent.indexOf('iPad');\n            if (iPad > -1 || $(\".left-col\").css(\"display\") === \"none\") {\n                var bgColorList = [\"#9db3f4\", \"#414141\", \"#e5a859\", \"#f5dfc6\", \"#c084a0\", \"#847e72\", \"#cd8390\", \"#996731\"];\n                var bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));\n                $(\"body\").css({\"background-color\": bgColorList[bgColor], \"background-size\": \"cover\"});\n            }\n            else {\n                var backgroundnum = 5;\n                var backgroundimg = \"url(/background/bg-x.jpg)\".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));\n                $(\"body\").css({\"background\": backgroundimg, \"background-attachment\": \"fixed\", \"background-size\": \"cover\"});\n            }\n        })\n    </script>\n\n\n\n\n\n<div class=\"scroll\" id=\"scroll\">\n    <a href=\"#\" title=\"返回顶部\"><i class=\"fa fa-arrow-up\"></i></a>\n    <a href=\"#comments\" onclick=\"load$hide();\" title=\"查看评论\"><i class=\"fa fa-comments-o\"></i></a>\n    <a href=\"#footer\" title=\"转到底部\"><i class=\"fa fa-arrow-down\"></i></a>\n</div>\n<script>\n    // Open in New Window\n    \n        var oOpenInNew = {\n            \n            \n            \n            \n            \n            \n             archives: \".archive-article-title\", \n             miniArchives: \"a.post-list-link\", \n            \n             friends: \"#js-friends a\", \n             socail: \".social a\" \n        }\n        for (var x in oOpenInNew) {\n            $(oOpenInNew[x]).attr(\"target\", \"_blank\");\n        }\n    \n</script>\n\n    <script>\n        var originTitle = document.title;\n        var titleTime;\n        document.addEventListener(\"visibilitychange\", function() {\n            if (document.hidden) {\n                document.title = \"(つェ⊂) 我藏好了哦~ \" + originTitle;\n                clearTimeout(titleTime);\n            }\n            else {\n                document.title = \"(*´∇｀*) 被你发现啦~ \" + originTitle;\n                titleTime = setTimeout(function() {\n                    document.title = originTitle;\n                }, 2000);\n            }\n        })\n    </script>\n\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n  </div>\n</body>\n</html>","source":"Go性能分析工具/index.html","raw":"<!DOCTYPE html>\n<html lang=\"zh-Hans\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\" />\n<meta name=\"author\" content=\"四娃\" />\n\n\n\n<meta name=\"description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"keywords\" content=\"golang\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"Go性能分析工具\">\n<meta property=\"og:url\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/index.html\">\n<meta property=\"og:site_name\" content=\"zhqqqy\">\n<meta property=\"og:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/client_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/analyze.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/Blog/hexo/source/_posts/Go性能分析工具/sum&cum&flat.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/fire1.png\">\n<meta property=\"og:updated_time\" content=\"2018-07-20T05:05:45.634Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"Go性能分析工具\">\n<meta name=\"twitter:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"twitter:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n\n<link rel=\"apple-touch-icon\" href= \"/apple-touch-icon.png\">\n\n\n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"zhqqqy\" type=\"application/atom+xml\">\n\n\n\n    <link rel=\"shortcut icon\" href=\"/img/avatar.png\">\n\n\n\n    <link href=\"//cdn.bootcss.com/animate.css/3.5.1/animate.min.css\" rel=\"stylesheet\">\n\n\n\n    <link href=\"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css\" rel=\"stylesheet\">\n\n\n\n    <script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n    <link href=\"//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-minimal.css\" rel=\"stylesheet\">\n\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n\n\n<link href=\"//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n\n<title>Go性能分析工具 | zhqqqy</title>\n\n<script src=\"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js\"></script>\n<script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n\n<script>\n    var yiliaConfig = {\n        fancybox: true,\n        animate: true,\n        isHome: false,\n        isPost: true,\n        isArchive: false,\n        isTag: false,\n        isCategory: false,\n        fancybox_js: \"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js\",\n        scrollreveal: \"//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js\",\n        search: undefined\n    }\n</script>\n\n\n    <script> yiliaConfig.jquery_ui = [false]; </script>\n\n\n\n    <script> yiliaConfig.rootUrl = \"\\/\";</script>\n\n\n\n\n\n\n</head>\n<body>\n  <div id=\"container\">\n    <div class=\"left-col\">\n    <div class=\"overlay\"></div>\n<div class=\"intrude-less\">\n    <header id=\"header\" class=\"inner\">\n        <a href=\"/\" class=\"profilepic\">\n            <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n        </a>\n        <hgroup>\n          <h1 class=\"header-author\"><a href=\"/\">四娃</a></h1>\n        </hgroup>\n\n        \n\n        \n\n\n        \n            <div id=\"switch-btn\" class=\"switch-btn\">\n                <div class=\"icon\">\n                    <div class=\"icon-ctn\">\n                        <div class=\"icon-wrap icon-house\" data-idx=\"0\">\n                            <div class=\"birdhouse\"></div>\n                            <div class=\"birdhouse_holes\"></div>\n                        </div>\n                        <div class=\"icon-wrap icon-ribbon hide\" data-idx=\"1\">\n                            <div class=\"ribbon\"></div>\n                        </div>\n                        \n                        <div class=\"icon-wrap icon-link hide\" data-idx=\"2\">\n                            <div class=\"loopback_l\"></div>\n                            <div class=\"loopback_r\"></div>\n                        </div>\n                        \n                        \n                        <div class=\"icon-wrap icon-me hide\" data-idx=\"3\">\n                            <div class=\"user\"></div>\n                            <div class=\"shoulder\"></div>\n                        </div>\n                        \n                    </div>\n                    \n                </div>\n                <div class=\"tips-box hide\">\n                    <div class=\"tips-arrow\"></div>\n                    <ul class=\"tips-inner\">\n                        <li>菜单</li>\n                        <li>标签</li>\n                        \n                        <li>友情链接</li>\n                        \n                        \n                        <li>关于我</li>\n                        \n                    </ul>\n                </div>\n            </div>\n        \n\n        <div id=\"switch-area\" class=\"switch-area\">\n            <div class=\"switch-wrap\">\n                <section class=\"switch-part switch-part1\">\n                    <nav class=\"header-menu\">\n                        <ul>\n                        \n                            <li><a href=\"/\">主页</a></li>\n                        \n                            <li><a href=\"/archives/\">所有文章</a></li>\n                        \n                            <li><a href=\"/tags/\">标签云</a></li>\n                        \n                            <li><a href=\"/about/\">关于我</a></li>\n                        \n                            <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                        \n                        </ul>\n                    </nav>\n                    <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\"></a>\n                            \n                                <a class=\"fa GitHub\" href=\"https://github.com/zhqqqy\" title=\"GitHub\"></a>\n                            \n                                <a class=\"fa RSS\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n                    </nav>\n                </section>\n                \n                \n                <section class=\"switch-part switch-part2\">\n                    <div class=\"widget tagcloud\" id=\"js-tagcloud\">\n                        <ul class=\"tag-list\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/Consul/\">Consul</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/golang/\">golang</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/redis/\">redis</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/微服务/\">微服务</a></li></ul>\n                    </div>\n                </section>\n                \n                \n                \n                <section class=\"switch-part switch-part3\">\n                    <div id=\"js-friends\">\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://hexo.io\">Hexo</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://pages.github.com/\">GitHub</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"http://moxfive.xyz/\">MOxFIVE</a>\n                    \n                    </div>\n                </section>\n                \n\n                \n                \n                <section class=\"switch-part switch-part4\">\n                \n                    <div id=\"js-aboutme\">专注于前端</div>\n                </section>\n                \n            </div>\n        </div>\n    </header>                \n</div>\n    </div>\n    <div class=\"mid-col\">\n      <nav id=\"mobile-nav\">\n      <div class=\"overlay\">\n          <div class=\"slider-trigger\"></div>\n          <h1 class=\"header-author js-mobile-header hide\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n      </div>\n    <div class=\"intrude-less\">\n        <header id=\"header\" class=\"inner\">\n            <a href=\"/\" class=\"profilepic\">\n                <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n            </a>\n            <hgroup>\n              <h1 class=\"header-author\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n            </hgroup>\n            \n            <nav class=\"header-menu\">\n                <ul>\n                \n                    <li><a href=\"/\">主页</a></li>\n                \n                    <li><a href=\"/archives/\">所有文章</a></li>\n                \n                    <li><a href=\"/tags/\">标签云</a></li>\n                \n                    <li><a href=\"/about/\">关于我</a></li>\n                \n                    <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                \n                <div class=\"clearfix\"></div>\n                </ul>\n            </nav>\n            <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" target=\"_blank\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\"></a>\n                            \n                                <a class=\"fa GitHub\" target=\"_blank\" href=\"https://github.com/zhqqqy\" title=\"GitHub\"></a>\n                            \n                                <a class=\"fa RSS\" target=\"_blank\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n            </nav>\n        </header>                \n    </div>\n    <link class=\"menu-list\" tags=\"标签\" friends=\"友情链接\" about=\"关于我\"/>\n</nav>\n      <div class=\"body-wrap\"><article id=\"post-Go性能分析工具\" class=\"article article-type-post\" itemscope itemprop=\"blogPost\">\n  \n    <div class=\"article-meta\">\n      <a href=\"/2017/08/23/Go性能分析工具/\" class=\"article-date\">\n      <time datetime=\"2017-08-23T09:33:44.000Z\" itemprop=\"datePublished\">2017-08-23</time>\n</a>\n\n\n    </div>\n  \n  <div class=\"article-inner\">\n    \n      <input type=\"hidden\" class=\"isFancy\" />\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"article-title\" itemprop=\"name\">\n      Go性能分析工具\n    </h1>\n  \n\n      </header>\n      \n      <div class=\"article-info article-info-post\">\n        \n    <div class=\"article-category tagcloud\">\n    <a class=\"article-category-link\" href=\"/categories/Golang/\">Golang</a>\n    </div>\n\n\n        \n    <div class=\"article-tag tagcloud\">\n        <ul class=\"article-tag-list\"><li class=\"article-tag-list-item\"><a class=\"article-tag-list-link\" href=\"/tags/golang/\">golang</a></li></ul>\n    </div>\n\n        <div class=\"clearfix\"></div>\n      </div>\n      \n    \n    <div class=\"article-entry\" itemprop=\"articleBody\">\n      \n          \n        <h1 id=\"为什么需要性能分析\"><a href=\"#为什么需要性能分析\" class=\"headerlink\" title=\"为什么需要性能分析\"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p>\n<p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p>\n<h1 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h1><h2 id=\"什么是pprof\"><a href=\"#什么是pprof\" class=\"headerlink\" title=\"什么是pprof\"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>，<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"external\">net/http/pprof</a>  ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。 </p>\n<h2 id=\"pprof文件生成\"><a href=\"#pprof文件生成\" class=\"headerlink\" title=\"pprof文件生成\"></a>pprof文件生成</h2><h3 id=\"runtime-pprof\"><a href=\"#runtime-pprof\" class=\"headerlink\" title=\"runtime/pprof\"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tf, err := os.Create(fmt.Sprintf(<span class=\"string\">\"cpu-%s.pprof\"</span>, time.Now().Format(<span class=\"string\">\"20060102\"</span>)))</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"create CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(f); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"start CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> pprof.StopCPUProfile()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tdoSth()</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"comment\">//优雅退出</span></div><div class=\"line\">\tsigChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</div><div class=\"line\">\texitChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"signal received\"</span>, &lt;-sigChan)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err := server.Stop(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\texitChan &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> &lt;-exitChan:</div><div class=\"line\">\t<span class=\"keyword\">case</span> s := &lt;-sigChan:</div><div class=\"line\">\t\tlog.Panicln(<span class=\"string\">\"signal received, stopping immediately\"</span>, s)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\trand.Float32()</div><div class=\"line\">\t\ttime.Sleep(<span class=\"number\">500</span> * time.Millisecond)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p>\n<p>然后通过命令执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ <span class=\"keyword\">go</span> tool pprof .\\cpu<span class=\"number\">-20170823.</span>pprof</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul <span class=\"number\">19</span>, <span class=\"number\">2018</span> at <span class=\"number\">5</span>:<span class=\"number\">31</span>pm (CST)</div><div class=\"line\">Duration: <span class=\"number\">58.32s</span>, Total samples = <span class=\"number\">0</span></div><div class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>然后就可以在pprof下使用命令了</p>\n<p>可以通过go tool pprof命令查看pprof支持哪些命令。</p>\n<p><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p>\n<h3 id=\"net-http-pprof\"><a href=\"#net-http-pprof\" class=\"headerlink\" title=\"net/http/pprof\"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p>\n<p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, Index)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, Cmdline)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, Profile)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, Symbol)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, Trace)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"通过浏览器分析\"><a href=\"#通过浏览器分析\" class=\"headerlink\" title=\"通过浏览器分析\"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p>\n<p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/debug_pprof.png\" alt=\"\"></p>\n<p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p>\n<p>通过代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Profile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">sec, _ := strconv.ParseInt(r.FormValue(<span class=\"string\">\"seconds\"</span>), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> sec == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\tsec = <span class=\"number\">30</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">········</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(w); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// StartCPUProfile failed, so no writes yet.</span></div><div class=\"line\">\t\t<span class=\"comment\">// Can change header back to text content</span></div><div class=\"line\">\t\t<span class=\"comment\">// and send error code.</span></div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain; charset=utf-8\"</span>)</div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"X-Go-Pprof\"</span>, <span class=\"string\">\"1\"</span>)</div><div class=\"line\">\t\tw.WriteHeader(http.StatusInternalServerError)</div><div class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">\"Could not enable CPU profiling: %s\\n\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsleep(w, time.Duration(sec)*time.Second)</div><div class=\"line\">\tpprof.StopCPUProfile()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p>\n<p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p>\n<p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p>\n<p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p>\n<h4 id=\"通过命令行来分析\"><a href=\"#通过命令行来分析\" class=\"headerlink\" title=\"通过命令行来分析\"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p>\n<p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p>\n<p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/client_pprof.png\" alt=\"\"></p>\n<p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p>\n<h2 id=\"pprof文件分析\"><a href=\"#pprof文件分析\" class=\"headerlink\" title=\"pprof文件分析\"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p>\n<p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/analyze.png\" alt=\"\"></p>\n<p>这里分析下各个参数的意思</p>\n<h3 id=\"flat和cum\"><a href=\"#flat和cum\" class=\"headerlink\" title=\"flat和cum:\"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p>\n<p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p>\n<p>flat表示的是a()函数自己耗费的时间</p>\n<p>如果a()函数是这样的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">b() <span class=\"comment\">// takes 2s</span></div><div class=\"line\">do something directly <span class=\"comment\">// takes 3s</span></div><div class=\"line\">c() <span class=\"comment\">// takes 2s</span></div></pre></td></tr></table></figure>\n<p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum:\"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p>\n<p>具体可以参考：</p>\n<p><a href=\"https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/\" target=\"_blank\" rel=\"external\">What is the meaning of “flat” and “cum” in golang pprof output</a></p>\n<h3 id=\"图形分析\"><a href=\"#图形分析\" class=\"headerlink\" title=\"图形分析\"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p>\n<p>安装好之后可以直接使用命令来生成图片</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z guess]# go tool pprof  cpu.pprof</div><div class=\"line\">Entering interactive mode (type \"help\" for commands)</div><div class=\"line\">(pprof) svg</div><div class=\"line\">Generating report in profile001.svg</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>这样就生成了svg图片<code>profile001.svg</code></p>\n<p><img src=\"/2017/08/23/Go性能分析工具/Blog\\hexo\\source\\_posts\\Go性能分析工具\\sum&amp;cum&amp;flat.png\" alt=\"\"></p>\n<p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p>\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz </p>\n<p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p>\n<p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p>\n<blockquote>\n<p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/brendangregg/FlameGraph.git</div></pre></td></tr></table></figure>\n<p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp flamegraph.pl /usr/local/bin</div></pre></td></tr></table></figure>\n<p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ flamegraph.pl -h</div><div class=\"line\">Option h is ambiguous (hash, height, help)</div><div class=\"line\">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</div><div class=\"line\"></div><div class=\"line\">    --title       # change title text</div><div class=\"line\">    --width       # width of image (default 1200)</div><div class=\"line\">    --height      # height of each frame (default 16)</div><div class=\"line\">    --minwidth    # omit smaller functions (default 0.1 pixels)</div><div class=\"line\">    --fonttype    # font type (default &quot;Verdana&quot;)</div><div class=\"line\">    --fontsize    # font size (default 12)</div><div class=\"line\">    --countname   # count type label (default &quot;samples&quot;)</div><div class=\"line\">    --nametype    # name type label (default &quot;Function:&quot;)</div><div class=\"line\">    --colors      # set color palette. choices are: hot (default), mem, io,</div><div class=\"line\">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</div><div class=\"line\">                  # yellow, purple, orange</div><div class=\"line\">    --hash        # colors are keyed by function name hash</div><div class=\"line\">    --cp          # use consistent palette (palette.map)</div><div class=\"line\">    --reverse     # generate stack-reversed flame graph</div><div class=\"line\">    --inverted    # icicle graph</div><div class=\"line\">    --negate      # switch differential hues (blue&lt;-&gt;red)</div><div class=\"line\">    --help        # this message</div><div class=\"line\"></div><div class=\"line\">    eg,</div><div class=\"line\">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</div></pre></td></tr></table></figure>\n<p>4.安装go-torch</p>\n<p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go get -v github.com/uber/go-torch</div></pre></td></tr></table></figure>\n<p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go-torch -b cpu.pprof -f cpu.svg</div><div class=\"line\">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</div><div class=\"line\">INFO[12:38:16] Writing svg to cpu.svg</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li>\n<li><strong>-f：</strong>表示要生成的svg图片名称</li>\n</ul>\n<p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/fire1.png\" alt=\"\"></p>\n<p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p>\n<blockquote>\n<ul>\n<li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li>\n<li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li>\n</ul>\n</blockquote>\n<p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html\" target=\"_blank\" rel=\"external\">Go代码调优利器-火焰图</a></p>\n<p><a href=\"https://blog.csdn.net/WaltonWang/article/details/54019891\" target=\"_blank\" rel=\"external\">Golang性能调优(go-torch, go tool pprof)</a></p>\n\n      \n    </div>\n    \n  </div>\n  \n    \n    <div class=\"copyright\">\n        <p><span>本文标题:</span><a href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></p>\n        <p><span>文章作者:</span><a href=\"/\" title=\"回到主页\">四娃</a></p>\n        <p><span>发布时间:</span>2017-08-23, 17:33:44</p>\n        <p><span>最后更新:</span>2018-07-20, 13:05:45</p>\n        <p>\n            <span>原始链接:</span><a class=\"post-url\" href=\"/2017/08/23/Go性能分析工具/\" title=\"Go性能分析工具\">http://yoursite.com/2017/08/23/Go性能分析工具/</a>\n            <span class=\"copy-path\" data-clipboard-text=\"原文: http://yoursite.com/2017/08/23/Go性能分析工具/　　作者: 四娃\" title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\"></i></span>\n            <script> var clipboard = new Clipboard('.copy-path'); </script>\n        </p>\n        <p>\n            <span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" title=\"CC BY-NC-SA 4.0 International\" target = \"_blank\">\"署名-非商用-相同方式共享 4.0\"</a> 转载请保留原文链接及作者。\n        </p>\n    </div>\n\n\n\n    <nav id=\"article-nav\">\n        \n            <div id=\"article-nav-newer\" class=\"article-nav-title\">\n                <a href=\"/2017/12/12/codis/\">\n                    codis安装及配置\n                </a>\n            </div>\n        \n        \n            <div id=\"article-nav-older\" class=\"article-nav-title\">\n                <a href=\"/2017/08/16/golang-http包/\">\n                    golang-http包\n                </a>\n            </div>\n        \n    </nav>\n\n  \n</article>\n\n    <div id=\"toc\" class=\"toc-article\">\n        <strong class=\"toc-title\">文章目录</strong>\n        \n            <ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#为什么需要性能分析\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">为什么需要性能分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pprof\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#什么是pprof\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">什么是pprof</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件生成\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">pprof文件生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#runtime-pprof\"><span class=\"toc-number\">2.2.1.</span> <span class=\"toc-text\">runtime/pprof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#net-http-pprof\"><span class=\"toc-number\">2.2.2.</span> <span class=\"toc-text\">net/http/pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过浏览器分析\"><span class=\"toc-number\">2.2.2.1.</span> <span class=\"toc-text\">通过浏览器分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过命令行来分析\"><span class=\"toc-number\">2.2.2.2.</span> <span class=\"toc-text\">通过命令行来分析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件分析\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">pprof文件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flat和cum\"><span class=\"toc-number\">2.3.1.</span> <span class=\"toc-text\">flat和cum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sum\"><span class=\"toc-number\">2.3.2.</span> <span class=\"toc-text\">sum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#图形分析\"><span class=\"toc-number\">2.3.3.</span> <span class=\"toc-text\">图形分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#火焰图\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">火焰图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#安装\"><span class=\"toc-number\">2.4.1.</span> <span class=\"toc-text\">安装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#参考：\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">参考：</span></a></li></ol>\n        \n    </div>\n    <style>\n        .left-col .switch-btn,\n        .left-col .switch-area {\n            display: none;\n        }\n        .toc-level-3 i,\n        .toc-level-3 ol {\n            display: none !important;\n        }\n    </style>\n\n    <input type=\"button\" id=\"tocButton\" value=\"隐藏目录\"  title=\"点击按钮隐藏或者显示文章目录\">\n\n    <script>\n        yiliaConfig.toc = [\"隐藏目录\", \"显示目录\", !!\"false\"];\n    </script>\n\n\n\n    \n<div class=\"share\">\n    \n        <div class=\"bdsharebuttonbox\">\n            <a href=\"#\" class=\"fa fa-twitter bds_twi\" data-cmd=\"twi\" title=\"分享到推特\"></a>\n            <a href=\"#\" class=\"fa fa-weibo bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\n            <a href=\"#\" class=\"fa fa-qq bds_sqq\" data-cmd=\"sqq\" title=\"分享给 QQ 好友\"></a>\n            <a href=\"#\" class=\"fa fa-files-o bds_copy\" data-cmd=\"copy\" title=\"复制网址\"></a>\n            <a href=\"#\" class=\"fa fa fa-envelope-o bds_mail\" data-cmd=\"mail\" title=\"通过邮件分享\"></a>\n            <a href=\"#\" class=\"fa fa-weixin bds_weixin\" data-cmd=\"weixin\" title=\"生成文章二维码\"></a>\n            <a href=\"#\" class=\"fa fa-share-alt bds_more\" data-cmd=\"more\"></i></a>\n        </div>\n        <script>\n            window._bd_share_config={\n                \"common\":{\"bdSnsKey\":{},\"bdText\":\"Go性能分析工具　| zhqqqy　\",\"bdMini\":\"2\",\"bdMiniList\":false,\"bdPic\":\"\",\"bdStyle\":\"0\",\"bdSize\":\"24\"},\"share\":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];\n        </script>\n    \n\n    \n</div>\n\n\n\n\n\n\n\n    \n\n\n\n\n    <div class=\"scroll\" id=\"post-nav-button\">\n        \n            <a href=\"/2017/12/12/codis/\" title=\"上一篇: codis安装及配置\">\n                <i class=\"fa fa-angle-left\"></i>\n            </a>\n        \n\n        <a title=\"文章列表\"><i class=\"fa fa-bars\"></i><i class=\"fa fa-times\"></i></a>\n\n        \n            <a href=\"/2017/08/16/golang-http包/\" title=\"下一篇: golang-http包\">\n                <i class=\"fa fa-angle-right\"></i>\n            </a>\n        \n    </div>\n\n    <ul class=\"post-list\"><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/18/Go里面的堆栈跟踪/\">Go里面的堆栈跟踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/13/Consul安装部署/\">Consul安装部署</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/12/微服务初探/\">微服务初探</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/29/redis Cluster 集群安装/\">redis Cluster 集群安装</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/12/codis/\">codis安装及配置</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/16/golang-http包/\">golang-http包</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/23/Go单元测试/\">Go单元测试</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/my-first-blog/\">6.4 defer 和追踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/hello-world/\">First Test</a></li></ul>\n\n\n\n\n    <script>\n        \n    </script>\n</div>\n      <footer id=\"footer\">\n    <div class=\"outer\">\n        <div id=\"footer-info\">\n            <div class=\"footer-left\">\n                <i class=\"fa fa-copyright\"></i> \n                2016-2018 四娃\n            </div>\n            <div class=\"footer-right\">\n                <a href=\"http://hexo.io/\" target=\"_blank\" title=\"快速、简洁且高效的博客框架\">Hexo</a>  Theme <a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" title=\"简而不减 Hexo 双栏博客主题  v3.5\">Yelee</a> by MOxFIVE <i class=\"fa fa-heart animated infinite pulse\"></i>\n            </div>\n        </div>\n        \n            <div class=\"visit\">\n                \n                    <span id=\"busuanzi_container_site_pv\" style='display:none'>\n                        <span id=\"site-visit\" title=\"本站到访数\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_site_uv\"></span>\n                        </span>\n                    </span>\n                \n                \n                    <span>| </span>\n                \n                \n                    <span id=\"busuanzi_container_page_pv\" style='display:none'>\n                        <span id=\"page-visit\"  title=\"本页阅读量\"><i class=\"fa fa-eye animated infinite pulse\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_page_pv\"></span>\n                        </span>\n                    </span>\n                \n            </div>\n        \n    </div>\n</footer>\n    </div>\n    \n<script data-main=\"/js/main.js\" src=\"//cdn.bootcss.com/require.js/2.2.0/require.min.js\"></script>\n\n    <script>\n        $(document).ready(function() {\n            var iPad = window.navigator.userAgent.indexOf('iPad');\n            if (iPad > -1 || $(\".left-col\").css(\"display\") === \"none\") {\n                var bgColorList = [\"#9db3f4\", \"#414141\", \"#e5a859\", \"#f5dfc6\", \"#c084a0\", \"#847e72\", \"#cd8390\", \"#996731\"];\n                var bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));\n                $(\"body\").css({\"background-color\": bgColorList[bgColor], \"background-size\": \"cover\"});\n            }\n            else {\n                var backgroundnum = 5;\n                var backgroundimg = \"url(/background/bg-x.jpg)\".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));\n                $(\"body\").css({\"background\": backgroundimg, \"background-attachment\": \"fixed\", \"background-size\": \"cover\"});\n            }\n        })\n    </script>\n\n\n\n\n\n<div class=\"scroll\" id=\"scroll\">\n    <a href=\"#\" title=\"返回顶部\"><i class=\"fa fa-arrow-up\"></i></a>\n    <a href=\"#comments\" onclick=\"load$hide();\" title=\"查看评论\"><i class=\"fa fa-comments-o\"></i></a>\n    <a href=\"#footer\" title=\"转到底部\"><i class=\"fa fa-arrow-down\"></i></a>\n</div>\n<script>\n    // Open in New Window\n    \n        var oOpenInNew = {\n            \n            \n            \n            \n            \n            \n             archives: \".archive-article-title\", \n             miniArchives: \"a.post-list-link\", \n            \n             friends: \"#js-friends a\", \n             socail: \".social a\" \n        }\n        for (var x in oOpenInNew) {\n            $(oOpenInNew[x]).attr(\"target\", \"_blank\");\n        }\n    \n</script>\n\n    <script>\n        var originTitle = document.title;\n        var titleTime;\n        document.addEventListener(\"visibilitychange\", function() {\n            if (document.hidden) {\n                document.title = \"(つェ⊂) 我藏好了哦~ \" + originTitle;\n                clearTimeout(titleTime);\n            }\n            else {\n                document.title = \"(*´∇｀*) 被你发现啦~ \" + originTitle;\n                titleTime = setTimeout(function() {\n                    document.title = originTitle;\n                }, 2000);\n            }\n        })\n    </script>\n\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n  </div>\n</body>\n</html>","date":"2018-08-10T01:21:40.650Z","updated":"2018-08-09T08:02:51.391Z","path":"Go性能分析工具/index.html","_id":"cjknfez9x0000non9vm551guh","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"zh-Hans\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta name=\"author\" content=\"四娃\">\n\n\n\n<meta name=\"description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"keywords\" content=\"golang\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"Go性能分析工具\">\n<meta property=\"og:url\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/index.html\">\n<meta property=\"og:site_name\" content=\"zhqqqy\">\n<meta property=\"og:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/client_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/analyze.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/Blog/hexo/source/_posts/Go性能分析工具/sum&cum&flat.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/fire1.png\">\n<meta property=\"og:updated_time\" content=\"2018-07-20T05:05:45.634Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"Go性能分析工具\">\n<meta name=\"twitter:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"twitter:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n\n<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n\n\n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"zhqqqy\" type=\"application/atom+xml\">\n\n\n\n    <link rel=\"shortcut icon\" href=\"/img/avatar.png\">\n\n\n\n    <link href=\"//cdn.bootcss.com/animate.css/3.5.1/animate.min.css\" rel=\"stylesheet\">\n\n\n\n    <link href=\"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css\" rel=\"stylesheet\">\n\n\n\n    <script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n    <link href=\"//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-minimal.css\" rel=\"stylesheet\">\n\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n\n\n<link href=\"//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n\n<title>Go性能分析工具 | zhqqqy</title>\n\n<script src=\"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js\"></script>\n<script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n\n<script>\n    var yiliaConfig = {\n        fancybox: true,\n        animate: true,\n        isHome: false,\n        isPost: true,\n        isArchive: false,\n        isTag: false,\n        isCategory: false,\n        fancybox_js: \"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js\",\n        scrollreveal: \"//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js\",\n        search: undefined\n    }\n</script>\n\n\n    <script> yiliaConfig.jquery_ui = [false]; </script>\n\n\n\n    <script> yiliaConfig.rootUrl = \"\\/\";</script>\n\n\n\n\n\n\n</head>\n<body>\n  <div id=\"container\">\n    <div class=\"left-col\">\n    <div class=\"overlay\"></div>\n<div class=\"intrude-less\">\n    <header id=\"header\" class=\"inner\">\n        <a href=\"/\" class=\"profilepic\">\n            <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n        </a>\n        <hgroup>\n          <h1 class=\"header-author\"><a href=\"/\">四娃</a></h1>\n        </hgroup>\n\n        \n\n        \n\n\n        \n            <div id=\"switch-btn\" class=\"switch-btn\">\n                <div class=\"icon\">\n                    <div class=\"icon-ctn\">\n                        <div class=\"icon-wrap icon-house\" data-idx=\"0\">\n                            <div class=\"birdhouse\"></div>\n                            <div class=\"birdhouse_holes\"></div>\n                        </div>\n                        <div class=\"icon-wrap icon-ribbon hide\" data-idx=\"1\">\n                            <div class=\"ribbon\"></div>\n                        </div>\n                        \n                        <div class=\"icon-wrap icon-link hide\" data-idx=\"2\">\n                            <div class=\"loopback_l\"></div>\n                            <div class=\"loopback_r\"></div>\n                        </div>\n                        \n                        \n                        <div class=\"icon-wrap icon-me hide\" data-idx=\"3\">\n                            <div class=\"user\"></div>\n                            <div class=\"shoulder\"></div>\n                        </div>\n                        \n                    </div>\n                    \n                </div>\n                <div class=\"tips-box hide\">\n                    <div class=\"tips-arrow\"></div>\n                    <ul class=\"tips-inner\">\n                        <li>菜单</li>\n                        <li>标签</li>\n                        \n                        <li>友情链接</li>\n                        \n                        \n                        <li>关于我</li>\n                        \n                    </ul>\n                </div>\n            </div>\n        \n\n        <div id=\"switch-area\" class=\"switch-area\">\n            <div class=\"switch-wrap\">\n                <section class=\"switch-part switch-part1\">\n                    <nav class=\"header-menu\">\n                        <ul>\n                        \n                            <li><a href=\"/\">主页</a></li>\n                        \n                            <li><a href=\"/archives/\">所有文章</a></li>\n                        \n                            <li><a href=\"/tags/\">标签云</a></li>\n                        \n                            <li><a href=\"/about/\">关于我</a></li>\n                        \n                            <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                        \n                        </ul>\n                    </nav>\n                    <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\" target=\"_blank\" rel=\"noopener\"></a>\n                            \n                                <a class=\"fa GitHub\" href=\"https://github.com/zhqqqy\" title=\"GitHub\" target=\"_blank\" rel=\"noopener\"></a>\n                            \n                                <a class=\"fa RSS\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n                    </nav>\n                </section>\n                \n                \n                <section class=\"switch-part switch-part2\">\n                    <div class=\"widget tagcloud\" id=\"js-tagcloud\">\n                        <ul class=\"tag-list\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/Consul/\">Consul</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/golang/\">golang</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/redis/\">redis</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/微服务/\">微服务</a></li></ul>\n                    </div>\n                </section>\n                \n                \n                \n                <section class=\"switch-part switch-part3\">\n                    <div id=\"js-friends\">\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"http://moxfive.xyz/\" target=\"_blank\" rel=\"noopener\">MOxFIVE</a>\n                    \n                    </div>\n                </section>\n                \n\n                \n                \n                <section class=\"switch-part switch-part4\">\n                \n                    <div id=\"js-aboutme\">专注于前端</div>\n                </section>\n                \n            </div>\n        </div>\n    </header>                \n</div>\n    </div>\n    <div class=\"mid-col\">\n      <nav id=\"mobile-nav\">\n      <div class=\"overlay\">\n          <div class=\"slider-trigger\"></div>\n          <h1 class=\"header-author js-mobile-header hide\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n      </div>\n    <div class=\"intrude-less\">\n        <header id=\"header\" class=\"inner\">\n            <a href=\"/\" class=\"profilepic\">\n                <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n            </a>\n            <hgroup>\n              <h1 class=\"header-author\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n            </hgroup>\n            \n            <nav class=\"header-menu\">\n                <ul>\n                \n                    <li><a href=\"/\">主页</a></li>\n                \n                    <li><a href=\"/archives/\">所有文章</a></li>\n                \n                    <li><a href=\"/tags/\">标签云</a></li>\n                \n                    <li><a href=\"/about/\">关于我</a></li>\n                \n                    <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                \n                <div class=\"clearfix\"></div>\n                </ul>\n            </nav>\n            <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" target=\"_blank\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\"></a>\n                            \n                                <a class=\"fa GitHub\" target=\"_blank\" href=\"https://github.com/zhqqqy\" title=\"GitHub\"></a>\n                            \n                                <a class=\"fa RSS\" target=\"_blank\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n            </nav>\n        </header>                \n    </div>\n    <link class=\"menu-list\" tags=\"标签\" friends=\"友情链接\" about=\"关于我\">\n</nav>\n      <div class=\"body-wrap\"><article id=\"post-Go性能分析工具\" class=\"article article-type-post\" itemscope=\"\" itemprop=\"blogPost\">\n  \n    <div class=\"article-meta\">\n      <a href=\"/2017/08/23/Go性能分析工具/\" class=\"article-date\">\n      <time datetime=\"2017-08-23T09:33:44.000Z\" itemprop=\"datePublished\">2017-08-23</time>\n</a>\n\n\n    </div>\n  \n  <div class=\"article-inner\">\n    \n      <input type=\"hidden\" class=\"isFancy\">\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"article-title\" itemprop=\"name\">\n      Go性能分析工具\n    </h1>\n  \n\n      </header>\n      \n      <div class=\"article-info article-info-post\">\n        \n    <div class=\"article-category tagcloud\">\n    <a class=\"article-category-link\" href=\"/categories/Golang/\">Golang</a>\n    </div>\n\n\n        \n    <div class=\"article-tag tagcloud\">\n        <ul class=\"article-tag-list\"><li class=\"article-tag-list-item\"><a class=\"article-tag-list-link\" href=\"/tags/golang/\">golang</a></li></ul>\n    </div>\n\n        <div class=\"clearfix\"></div>\n      </div>\n      \n    \n    <div class=\"article-entry\" itemprop=\"articleBody\">\n      \n          \n        <h1 id=\"为什么需要性能分析\"><a href=\"#为什么需要性能分析\" class=\"headerlink\" title=\"为什么需要性能分析\"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p>\n<p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p>\n<h1 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h1><h2 id=\"什么是pprof\"><a href=\"#什么是pprof\" class=\"headerlink\" title=\"什么是pprof\"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>，<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"external\">net/http/pprof</a>  ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。 </p>\n<h2 id=\"pprof文件生成\"><a href=\"#pprof文件生成\" class=\"headerlink\" title=\"pprof文件生成\"></a>pprof文件生成</h2><h3 id=\"runtime-pprof\"><a href=\"#runtime-pprof\" class=\"headerlink\" title=\"runtime/pprof\"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tf, err := os.Create(fmt.Sprintf(<span class=\"string\">\"cpu-%s.pprof\"</span>, time.Now().Format(<span class=\"string\">\"20060102\"</span>)))</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"create CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(f); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"start CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> pprof.StopCPUProfile()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tdoSth()</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"comment\">//优雅退出</span></div><div class=\"line\">\tsigChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</div><div class=\"line\">\texitChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"signal received\"</span>, &lt;-sigChan)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err := server.Stop(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\texitChan &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> &lt;-exitChan:</div><div class=\"line\">\t<span class=\"keyword\">case</span> s := &lt;-sigChan:</div><div class=\"line\">\t\tlog.Panicln(<span class=\"string\">\"signal received, stopping immediately\"</span>, s)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\trand.Float32()</div><div class=\"line\">\t\ttime.Sleep(<span class=\"number\">500</span> * time.Millisecond)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p>\n<p>然后通过命令执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ <span class=\"keyword\">go</span> tool pprof .\\cpu<span class=\"number\">-20170823.</span>pprof</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul <span class=\"number\">19</span>, <span class=\"number\">2018</span> at <span class=\"number\">5</span>:<span class=\"number\">31</span>pm (CST)</div><div class=\"line\">Duration: <span class=\"number\">58.32s</span>, Total samples = <span class=\"number\">0</span></div><div class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>然后就可以在pprof下使用命令了</p>\n<p>可以通过go tool pprof命令查看pprof支持哪些命令。</p>\n<p><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p>\n<h3 id=\"net-http-pprof\"><a href=\"#net-http-pprof\" class=\"headerlink\" title=\"net/http/pprof\"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p>\n<p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, Index)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, Cmdline)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, Profile)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, Symbol)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, Trace)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"通过浏览器分析\"><a href=\"#通过浏览器分析\" class=\"headerlink\" title=\"通过浏览器分析\"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p>\n<p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/debug_pprof.png\" alt=\"\"></p>\n<p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p>\n<p>通过代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Profile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">sec, _ := strconv.ParseInt(r.FormValue(<span class=\"string\">\"seconds\"</span>), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> sec == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\tsec = <span class=\"number\">30</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">········</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(w); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// StartCPUProfile failed, so no writes yet.</span></div><div class=\"line\">\t\t<span class=\"comment\">// Can change header back to text content</span></div><div class=\"line\">\t\t<span class=\"comment\">// and send error code.</span></div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain; charset=utf-8\"</span>)</div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"X-Go-Pprof\"</span>, <span class=\"string\">\"1\"</span>)</div><div class=\"line\">\t\tw.WriteHeader(http.StatusInternalServerError)</div><div class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">\"Could not enable CPU profiling: %s\\n\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsleep(w, time.Duration(sec)*time.Second)</div><div class=\"line\">\tpprof.StopCPUProfile()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p>\n<p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p>\n<p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p>\n<p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p>\n<h4 id=\"通过命令行来分析\"><a href=\"#通过命令行来分析\" class=\"headerlink\" title=\"通过命令行来分析\"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p>\n<p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p>\n<p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/client_pprof.png\" alt=\"\"></p>\n<p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p>\n<h2 id=\"pprof文件分析\"><a href=\"#pprof文件分析\" class=\"headerlink\" title=\"pprof文件分析\"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p>\n<p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/analyze.png\" alt=\"\"></p>\n<p>这里分析下各个参数的意思</p>\n<h3 id=\"flat和cum\"><a href=\"#flat和cum\" class=\"headerlink\" title=\"flat和cum:\"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p>\n<p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p>\n<p>flat表示的是a()函数自己耗费的时间</p>\n<p>如果a()函数是这样的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">b() <span class=\"comment\">// takes 2s</span></div><div class=\"line\">do something directly <span class=\"comment\">// takes 3s</span></div><div class=\"line\">c() <span class=\"comment\">// takes 2s</span></div></pre></td></tr></table></figure>\n<p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum:\"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p>\n<p>具体可以参考：</p>\n<p><a href=\"https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/\" target=\"_blank\" rel=\"external\">What is the meaning of “flat” and “cum” in golang pprof output</a></p>\n<h3 id=\"图形分析\"><a href=\"#图形分析\" class=\"headerlink\" title=\"图形分析\"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p>\n<p>安装好之后可以直接使用命令来生成图片</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z guess]# go tool pprof  cpu.pprof</div><div class=\"line\">Entering interactive mode (type \"help\" for commands)</div><div class=\"line\">(pprof) svg</div><div class=\"line\">Generating report in profile001.svg</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>这样就生成了svg图片<code>profile001.svg</code></p>\n<p><img src=\"/2017/08/23/Go性能分析工具/Blog\\hexo\\source\\_posts\\Go性能分析工具\\sum&amp;cum&amp;flat.png\" alt=\"\"></p>\n<p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p>\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz </p>\n<p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p>\n<p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p>\n<blockquote>\n<p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/brendangregg/FlameGraph.git</div></pre></td></tr></table></figure>\n<p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp flamegraph.pl /usr/local/bin</div></pre></td></tr></table></figure>\n<p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ flamegraph.pl -h</div><div class=\"line\">Option h is ambiguous (hash, height, help)</div><div class=\"line\">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</div><div class=\"line\"></div><div class=\"line\">    --title       # change title text</div><div class=\"line\">    --width       # width of image (default 1200)</div><div class=\"line\">    --height      # height of each frame (default 16)</div><div class=\"line\">    --minwidth    # omit smaller functions (default 0.1 pixels)</div><div class=\"line\">    --fonttype    # font type (default &quot;Verdana&quot;)</div><div class=\"line\">    --fontsize    # font size (default 12)</div><div class=\"line\">    --countname   # count type label (default &quot;samples&quot;)</div><div class=\"line\">    --nametype    # name type label (default &quot;Function:&quot;)</div><div class=\"line\">    --colors      # set color palette. choices are: hot (default), mem, io,</div><div class=\"line\">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</div><div class=\"line\">                  # yellow, purple, orange</div><div class=\"line\">    --hash        # colors are keyed by function name hash</div><div class=\"line\">    --cp          # use consistent palette (palette.map)</div><div class=\"line\">    --reverse     # generate stack-reversed flame graph</div><div class=\"line\">    --inverted    # icicle graph</div><div class=\"line\">    --negate      # switch differential hues (blue&lt;-&gt;red)</div><div class=\"line\">    --help        # this message</div><div class=\"line\"></div><div class=\"line\">    eg,</div><div class=\"line\">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</div></pre></td></tr></table></figure>\n<p>4.安装go-torch</p>\n<p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go get -v github.com/uber/go-torch</div></pre></td></tr></table></figure>\n<p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go-torch -b cpu.pprof -f cpu.svg</div><div class=\"line\">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</div><div class=\"line\">INFO[12:38:16] Writing svg to cpu.svg</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li>\n<li><strong>-f：</strong>表示要生成的svg图片名称</li>\n</ul>\n<p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/fire1.png\" alt=\"\"></p>\n<p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p>\n<blockquote>\n<ul>\n<li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li>\n<li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li>\n</ul>\n</blockquote>\n<p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html\" target=\"_blank\" rel=\"external\">Go代码调优利器-火焰图</a></p>\n<p><a href=\"https://blog.csdn.net/WaltonWang/article/details/54019891\" target=\"_blank\" rel=\"external\">Golang性能调优(go-torch, go tool pprof)</a></p>\n\n      \n    </div>\n    \n  </div>\n  \n    \n    <div class=\"copyright\">\n        <p><span>本文标题:</span><a href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></p>\n        <p><span>文章作者:</span><a href=\"/\" title=\"回到主页\">四娃</a></p>\n        <p><span>发布时间:</span>2017-08-23, 17:33:44</p>\n        <p><span>最后更新:</span>2018-07-20, 13:05:45</p>\n        <p>\n            <span>原始链接:</span><a class=\"post-url\" href=\"/2017/08/23/Go性能分析工具/\" title=\"Go性能分析工具\">http://yoursite.com/2017/08/23/Go性能分析工具/</a>\n            <span class=\"copy-path\" data-clipboard-text=\"原文: http://yoursite.com/2017/08/23/Go性能分析工具/　　作者: 四娃\" title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\"></i></span>\n            <script> var clipboard = new Clipboard('.copy-path'); </script>\n        </p>\n        <p>\n            <span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" title=\"CC BY-NC-SA 4.0 International\" target=\"_blank\">\"署名-非商用-相同方式共享 4.0\"</a> 转载请保留原文链接及作者。\n        </p>\n    </div>\n\n\n\n    <nav id=\"article-nav\">\n        \n            <div id=\"article-nav-newer\" class=\"article-nav-title\">\n                <a href=\"/2017/12/12/codis/\">\n                    codis安装及配置\n                </a>\n            </div>\n        \n        \n            <div id=\"article-nav-older\" class=\"article-nav-title\">\n                <a href=\"/2017/08/16/golang-http包/\">\n                    golang-http包\n                </a>\n            </div>\n        \n    </nav>\n\n  \n</article>\n\n    <div id=\"toc\" class=\"toc-article\">\n        <strong class=\"toc-title\">文章目录</strong>\n        \n            <ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#为什么需要性能分析\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">为什么需要性能分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pprof\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#什么是pprof\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">什么是pprof</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件生成\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">pprof文件生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#runtime-pprof\"><span class=\"toc-number\">2.2.1.</span> <span class=\"toc-text\">runtime/pprof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#net-http-pprof\"><span class=\"toc-number\">2.2.2.</span> <span class=\"toc-text\">net/http/pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过浏览器分析\"><span class=\"toc-number\">2.2.2.1.</span> <span class=\"toc-text\">通过浏览器分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过命令行来分析\"><span class=\"toc-number\">2.2.2.2.</span> <span class=\"toc-text\">通过命令行来分析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件分析\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">pprof文件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flat和cum\"><span class=\"toc-number\">2.3.1.</span> <span class=\"toc-text\">flat和cum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sum\"><span class=\"toc-number\">2.3.2.</span> <span class=\"toc-text\">sum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#图形分析\"><span class=\"toc-number\">2.3.3.</span> <span class=\"toc-text\">图形分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#火焰图\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">火焰图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#安装\"><span class=\"toc-number\">2.4.1.</span> <span class=\"toc-text\">安装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#参考：\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">参考：</span></a></li></ol>\n        \n    </div>\n    <style>\n        .left-col .switch-btn,\n        .left-col .switch-area {\n            display: none;\n        }\n        .toc-level-3 i,\n        .toc-level-3 ol {\n            display: none !important;\n        }\n    </style>\n\n    <input type=\"button\" id=\"tocButton\" value=\"隐藏目录\" title=\"点击按钮隐藏或者显示文章目录\">\n\n    <script>\n        yiliaConfig.toc = [\"隐藏目录\", \"显示目录\", !!\"false\"];\n    </script>\n\n\n\n    \n<div class=\"share\">\n    \n        <div class=\"bdsharebuttonbox\">\n            <a href=\"#\" class=\"fa fa-twitter bds_twi\" data-cmd=\"twi\" title=\"分享到推特\"></a>\n            <a href=\"#\" class=\"fa fa-weibo bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\n            <a href=\"#\" class=\"fa fa-qq bds_sqq\" data-cmd=\"sqq\" title=\"分享给 QQ 好友\"></a>\n            <a href=\"#\" class=\"fa fa-files-o bds_copy\" data-cmd=\"copy\" title=\"复制网址\"></a>\n            <a href=\"#\" class=\"fa fa fa-envelope-o bds_mail\" data-cmd=\"mail\" title=\"通过邮件分享\"></a>\n            <a href=\"#\" class=\"fa fa-weixin bds_weixin\" data-cmd=\"weixin\" title=\"生成文章二维码\"></a>\n            <a href=\"#\" class=\"fa fa-share-alt bds_more\" data-cmd=\"more\"></a>\n        </div>\n        <script>\n            window._bd_share_config={\n                \"common\":{\"bdSnsKey\":{},\"bdText\":\"Go性能分析工具　| zhqqqy　\",\"bdMini\":\"2\",\"bdMiniList\":false,\"bdPic\":\"\",\"bdStyle\":\"0\",\"bdSize\":\"24\"},\"share\":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];\n        </script>\n    \n\n    \n</div>\n\n\n\n\n\n\n\n    \n\n\n\n\n    <div class=\"scroll\" id=\"post-nav-button\">\n        \n            <a href=\"/2017/12/12/codis/\" title=\"上一篇: codis安装及配置\">\n                <i class=\"fa fa-angle-left\"></i>\n            </a>\n        \n\n        <a title=\"文章列表\"><i class=\"fa fa-bars\"></i><i class=\"fa fa-times\"></i></a>\n\n        \n            <a href=\"/2017/08/16/golang-http包/\" title=\"下一篇: golang-http包\">\n                <i class=\"fa fa-angle-right\"></i>\n            </a>\n        \n    </div>\n\n    <ul class=\"post-list\"><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/18/Go里面的堆栈跟踪/\">Go里面的堆栈跟踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/13/Consul安装部署/\">Consul安装部署</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/12/微服务初探/\">微服务初探</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/29/redis Cluster 集群安装/\">redis Cluster 集群安装</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/12/codis/\">codis安装及配置</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/16/golang-http包/\">golang-http包</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/23/Go单元测试/\">Go单元测试</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/my-first-blog/\">6.4 defer 和追踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/hello-world/\">First Test</a></li></ul>\n\n\n\n\n    <script>\n        \n    </script>\n</div>\n      <footer id=\"footer\">\n    <div class=\"outer\">\n        <div id=\"footer-info\">\n            <div class=\"footer-left\">\n                <i class=\"fa fa-copyright\"></i> \n                2016-2018 四娃\n            </div>\n            <div class=\"footer-right\">\n                <a href=\"http://hexo.io/\" target=\"_blank\" title=\"快速、简洁且高效的博客框架\">Hexo</a>  Theme <a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" title=\"简而不减 Hexo 双栏博客主题  v3.5\">Yelee</a> by MOxFIVE <i class=\"fa fa-heart animated infinite pulse\"></i>\n            </div>\n        </div>\n        \n            <div class=\"visit\">\n                \n                    <span id=\"busuanzi_container_site_pv\" style=\"display:none\">\n                        <span id=\"site-visit\" title=\"本站到访数\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_site_uv\"></span>\n                        </span>\n                    </span>\n                \n                \n                    <span>| </span>\n                \n                \n                    <span id=\"busuanzi_container_page_pv\" style=\"display:none\">\n                        <span id=\"page-visit\" title=\"本页阅读量\"><i class=\"fa fa-eye animated infinite pulse\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_page_pv\"></span>\n                        </span>\n                    </span>\n                \n            </div>\n        \n    </div>\n</footer>\n    </div>\n    \n<script data-main=\"/js/main.js\" src=\"//cdn.bootcss.com/require.js/2.2.0/require.min.js\"></script>\n\n    <script>\n        $(document).ready(function() {\n            var iPad = window.navigator.userAgent.indexOf('iPad');\n            if (iPad > -1 || $(\".left-col\").css(\"display\") === \"none\") {\n                var bgColorList = [\"#9db3f4\", \"#414141\", \"#e5a859\", \"#f5dfc6\", \"#c084a0\", \"#847e72\", \"#cd8390\", \"#996731\"];\n                var bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));\n                $(\"body\").css({\"background-color\": bgColorList[bgColor], \"background-size\": \"cover\"});\n            }\n            else {\n                var backgroundnum = 5;\n                var backgroundimg = \"url(/background/bg-x.jpg)\".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));\n                $(\"body\").css({\"background\": backgroundimg, \"background-attachment\": \"fixed\", \"background-size\": \"cover\"});\n            }\n        })\n    </script>\n\n\n\n\n\n<div class=\"scroll\" id=\"scroll\">\n    <a href=\"#\" title=\"返回顶部\"><i class=\"fa fa-arrow-up\"></i></a>\n    <a href=\"#comments\" onclick=\"load$hide();\" title=\"查看评论\"><i class=\"fa fa-comments-o\"></i></a>\n    <a href=\"#footer\" title=\"转到底部\"><i class=\"fa fa-arrow-down\"></i></a>\n</div>\n<script>\n    // Open in New Window\n    \n        var oOpenInNew = {\n            \n            \n            \n            \n            \n            \n             archives: \".archive-article-title\", \n             miniArchives: \"a.post-list-link\", \n            \n             friends: \"#js-friends a\", \n             socail: \".social a\" \n        }\n        for (var x in oOpenInNew) {\n            $(oOpenInNew[x]).attr(\"target\", \"_blank\");\n        }\n    \n</script>\n\n    <script>\n        var originTitle = document.title;\n        var titleTime;\n        document.addEventListener(\"visibilitychange\", function() {\n            if (document.hidden) {\n                document.title = \"(つェ⊂) 我藏好了哦~ \" + originTitle;\n                clearTimeout(titleTime);\n            }\n            else {\n                document.title = \"(*´∇｀*) 被你发现啦~ \" + originTitle;\n                titleTime = setTimeout(function() {\n                    document.title = originTitle;\n                }, 2000);\n            }\n        })\n    </script>\n\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n  </div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh-Hans\">\n<head>\n\n    <!--[if lt IE 9]>\n        <style>body {display: none; background: none !important} </style>\n        <meta http-equiv=\"Refresh\" Content=\"0; url=//outdatedbrowser.com/\" />\n    <![endif]-->\n\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta name=\"author\" content=\"四娃\">\n\n\n\n<meta name=\"description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"keywords\" content=\"golang\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"Go性能分析工具\">\n<meta property=\"og:url\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/index.html\">\n<meta property=\"og:site_name\" content=\"zhqqqy\">\n<meta property=\"og:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/client_pprof.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/analyze.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/Blog/hexo/source/_posts/Go性能分析工具/sum&cum&flat.png\">\n<meta property=\"og:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/fire1.png\">\n<meta property=\"og:updated_time\" content=\"2018-07-20T05:05:45.634Z\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"Go性能分析工具\">\n<meta name=\"twitter:description\" content=\"为什么需要性能分析作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。 很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方 pprof什\">\n<meta name=\"twitter:image\" content=\"http://yoursite.com/2017/08/23/Go性能分析工具/debug_pprof.png\">\n\n<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n\n\n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"zhqqqy\" type=\"application/atom+xml\">\n\n\n\n    <link rel=\"shortcut icon\" href=\"/img/avatar.png\">\n\n\n\n    <link href=\"//cdn.bootcss.com/animate.css/3.5.1/animate.min.css\" rel=\"stylesheet\">\n\n\n\n    <link href=\"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css\" rel=\"stylesheet\">\n\n\n\n    <script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n    <link href=\"//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-minimal.css\" rel=\"stylesheet\">\n\n\n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n\n\n<link href=\"//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css\" rel=\"stylesheet\">\n\n\n<title>Go性能分析工具 | zhqqqy</title>\n\n<script src=\"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js\"></script>\n<script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n\n<script>\n    var yiliaConfig = {\n        fancybox: true,\n        animate: true,\n        isHome: false,\n        isPost: true,\n        isArchive: false,\n        isTag: false,\n        isCategory: false,\n        fancybox_js: \"//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js\",\n        scrollreveal: \"//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js\",\n        search: undefined\n    }\n</script>\n\n\n    <script> yiliaConfig.jquery_ui = [false]; </script>\n\n\n\n    <script> yiliaConfig.rootUrl = \"\\/\";</script>\n\n\n\n\n\n\n</head>\n<body>\n  <div id=\"container\">\n    <div class=\"left-col\">\n    <div class=\"overlay\"></div>\n<div class=\"intrude-less\">\n    <header id=\"header\" class=\"inner\">\n        <a href=\"/\" class=\"profilepic\">\n            <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n        </a>\n        <hgroup>\n          <h1 class=\"header-author\"><a href=\"/\">四娃</a></h1>\n        </hgroup>\n\n        \n\n        \n\n\n        \n            <div id=\"switch-btn\" class=\"switch-btn\">\n                <div class=\"icon\">\n                    <div class=\"icon-ctn\">\n                        <div class=\"icon-wrap icon-house\" data-idx=\"0\">\n                            <div class=\"birdhouse\"></div>\n                            <div class=\"birdhouse_holes\"></div>\n                        </div>\n                        <div class=\"icon-wrap icon-ribbon hide\" data-idx=\"1\">\n                            <div class=\"ribbon\"></div>\n                        </div>\n                        \n                        <div class=\"icon-wrap icon-link hide\" data-idx=\"2\">\n                            <div class=\"loopback_l\"></div>\n                            <div class=\"loopback_r\"></div>\n                        </div>\n                        \n                        \n                        <div class=\"icon-wrap icon-me hide\" data-idx=\"3\">\n                            <div class=\"user\"></div>\n                            <div class=\"shoulder\"></div>\n                        </div>\n                        \n                    </div>\n                    \n                </div>\n                <div class=\"tips-box hide\">\n                    <div class=\"tips-arrow\"></div>\n                    <ul class=\"tips-inner\">\n                        <li>菜单</li>\n                        <li>标签</li>\n                        \n                        <li>友情链接</li>\n                        \n                        \n                        <li>关于我</li>\n                        \n                    </ul>\n                </div>\n            </div>\n        \n\n        <div id=\"switch-area\" class=\"switch-area\">\n            <div class=\"switch-wrap\">\n                <section class=\"switch-part switch-part1\">\n                    <nav class=\"header-menu\">\n                        <ul>\n                        \n                            <li><a href=\"/\">主页</a></li>\n                        \n                            <li><a href=\"/archives/\">所有文章</a></li>\n                        \n                            <li><a href=\"/tags/\">标签云</a></li>\n                        \n                            <li><a href=\"/about/\">关于我</a></li>\n                        \n                            <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                        \n                        </ul>\n                    </nav>\n                    <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\" target=\"_blank\" rel=\"noopener\"></a>\n                            \n                                <a class=\"fa GitHub\" href=\"https://github.com/zhqqqy\" title=\"GitHub\" target=\"_blank\" rel=\"noopener\"></a>\n                            \n                                <a class=\"fa RSS\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n                    </nav>\n                </section>\n                \n                \n                <section class=\"switch-part switch-part2\">\n                    <div class=\"widget tagcloud\" id=\"js-tagcloud\">\n                        <ul class=\"tag-list\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/Consul/\">Consul</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/golang/\">golang</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/redis/\">redis</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/微服务/\">微服务</a></li></ul>\n                    </div>\n                </section>\n                \n                \n                \n                <section class=\"switch-part switch-part3\">\n                    <div id=\"js-friends\">\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n                    \n                      <a class=\"main-nav-link switch-friends-link\" href=\"http://moxfive.xyz/\" target=\"_blank\" rel=\"noopener\">MOxFIVE</a>\n                    \n                    </div>\n                </section>\n                \n\n                \n                \n                <section class=\"switch-part switch-part4\">\n                \n                    <div id=\"js-aboutme\">专注于前端</div>\n                </section>\n                \n            </div>\n        </div>\n    </header>                \n</div>\n    </div>\n    <div class=\"mid-col\">\n      <nav id=\"mobile-nav\">\n      <div class=\"overlay\">\n          <div class=\"slider-trigger\"></div>\n          <h1 class=\"header-author js-mobile-header hide\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n      </div>\n    <div class=\"intrude-less\">\n        <header id=\"header\" class=\"inner\">\n            <a href=\"/\" class=\"profilepic\">\n                <img src=\"/img/avatar.png\" class=\"animated zoomIn\">\n            </a>\n            <hgroup>\n              <h1 class=\"header-author\"><a href=\"/\" title=\"回到主页\">四娃</a></h1>\n            </hgroup>\n            \n            <nav class=\"header-menu\">\n                <ul>\n                \n                    <li><a href=\"/\">主页</a></li>\n                \n                    <li><a href=\"/archives/\">所有文章</a></li>\n                \n                    <li><a href=\"/tags/\">标签云</a></li>\n                \n                    <li><a href=\"/about/\">关于我</a></li>\n                \n                    <li><a href=\"/sitemap.xml\">sitemap</a></li>\n                \n                <div class=\"clearfix\"></div>\n                </ul>\n            </nav>\n            <nav class=\"header-nav\">\n                        <ul class=\"social\">\n                            \n                                <a class=\"fa Email\" target=\"_blank\" href=\"mailto:zhq568405944@gmail.com\" title=\"Email\"></a>\n                            \n                                <a class=\"fa GitHub\" target=\"_blank\" href=\"https://github.com/zhqqqy\" title=\"GitHub\"></a>\n                            \n                                <a class=\"fa RSS\" target=\"_blank\" href=\"/atom.xml\" title=\"RSS\"></a>\n                            \n                        </ul>\n            </nav>\n        </header>                \n    </div>\n    <link class=\"menu-list\" tags=\"标签\" friends=\"友情链接\" about=\"关于我\">\n</nav>\n      <div class=\"body-wrap\"><article id=\"post-Go性能分析工具\" class=\"article article-type-post\" itemscope=\"\" itemprop=\"blogPost\">\n  \n    <div class=\"article-meta\">\n      <a href=\"/2017/08/23/Go性能分析工具/\" class=\"article-date\">\n      <time datetime=\"2017-08-23T09:33:44.000Z\" itemprop=\"datePublished\">2017-08-23</time>\n</a>\n\n\n    </div>\n  \n  <div class=\"article-inner\">\n    \n      <input type=\"hidden\" class=\"isFancy\">\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"article-title\" itemprop=\"name\">\n      Go性能分析工具\n    </h1>\n  \n\n      </header>\n      \n      <div class=\"article-info article-info-post\">\n        \n    <div class=\"article-category tagcloud\">\n    <a class=\"article-category-link\" href=\"/categories/Golang/\">Golang</a>\n    </div>\n\n\n        \n    <div class=\"article-tag tagcloud\">\n        <ul class=\"article-tag-list\"><li class=\"article-tag-list-item\"><a class=\"article-tag-list-link\" href=\"/tags/golang/\">golang</a></li></ul>\n    </div>\n\n        <div class=\"clearfix\"></div>\n      </div>\n      \n    \n    <div class=\"article-entry\" itemprop=\"articleBody\">\n      \n          \n        <h1 id=\"为什么需要性能分析\"><a href=\"#为什么需要性能分析\" class=\"headerlink\" title=\"为什么需要性能分析\"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p>\n<p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p>\n<h1 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h1><h2 id=\"什么是pprof\"><a href=\"#什么是pprof\" class=\"headerlink\" title=\"什么是pprof\"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>，<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"external\">net/http/pprof</a>  ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。 </p>\n<h2 id=\"pprof文件生成\"><a href=\"#pprof文件生成\" class=\"headerlink\" title=\"pprof文件生成\"></a>pprof文件生成</h2><h3 id=\"runtime-pprof\"><a href=\"#runtime-pprof\" class=\"headerlink\" title=\"runtime/pprof\"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tf, err := os.Create(fmt.Sprintf(<span class=\"string\">\"cpu-%s.pprof\"</span>, time.Now().Format(<span class=\"string\">\"20060102\"</span>)))</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"create CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(f); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"start CPU profile error: \"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> pprof.StopCPUProfile()</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\tdoSth()</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"comment\">//优雅退出</span></div><div class=\"line\">\tsigChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</div><div class=\"line\">\texitChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</div><div class=\"line\">\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</div><div class=\"line\">\tlog.Printf(<span class=\"string\">\"signal received\"</span>, &lt;-sigChan)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err := server.Stop(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tlog.Fatal(err)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\texitChan &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\t<span class=\"keyword\">select</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> &lt;-exitChan:</div><div class=\"line\">\t<span class=\"keyword\">case</span> s := &lt;-sigChan:</div><div class=\"line\">\t\tlog.Panicln(<span class=\"string\">\"signal received, stopping immediately\"</span>, s)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> &#123;</div><div class=\"line\">\t\trand.Float32()</div><div class=\"line\">\t\ttime.Sleep(<span class=\"number\">500</span> * time.Millisecond)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p>\n<p>然后通过命令执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ <span class=\"keyword\">go</span> tool pprof .\\cpu<span class=\"number\">-20170823.</span>pprof</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul <span class=\"number\">19</span>, <span class=\"number\">2018</span> at <span class=\"number\">5</span>:<span class=\"number\">31</span>pm (CST)</div><div class=\"line\">Duration: <span class=\"number\">58.32s</span>, Total samples = <span class=\"number\">0</span></div><div class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>然后就可以在pprof下使用命令了</p>\n<p>可以通过go tool pprof命令查看pprof支持哪些命令。</p>\n<p><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p>\n<h3 id=\"net-http-pprof\"><a href=\"#net-http-pprof\" class=\"headerlink\" title=\"net/http/pprof\"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p>\n<p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, Index)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, Cmdline)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, Profile)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, Symbol)</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, Trace)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"通过浏览器分析\"><a href=\"#通过浏览器分析\" class=\"headerlink\" title=\"通过浏览器分析\"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p>\n<p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/debug_pprof.png\" alt=\"\"></p>\n<p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p>\n<p>通过代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Profile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">sec, _ := strconv.ParseInt(r.FormValue(<span class=\"string\">\"seconds\"</span>), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> sec == <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\tsec = <span class=\"number\">30</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">········</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(w); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// StartCPUProfile failed, so no writes yet.</span></div><div class=\"line\">\t\t<span class=\"comment\">// Can change header back to text content</span></div><div class=\"line\">\t\t<span class=\"comment\">// and send error code.</span></div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain; charset=utf-8\"</span>)</div><div class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"X-Go-Pprof\"</span>, <span class=\"string\">\"1\"</span>)</div><div class=\"line\">\t\tw.WriteHeader(http.StatusInternalServerError)</div><div class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">\"Could not enable CPU profiling: %s\\n\"</span>, err)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsleep(w, time.Duration(sec)*time.Second)</div><div class=\"line\">\tpprof.StopCPUProfile()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p>\n<p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p>\n<p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p>\n<p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p>\n<h4 id=\"通过命令行来分析\"><a href=\"#通过命令行来分析\" class=\"headerlink\" title=\"通过命令行来分析\"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p>\n<p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p>\n<p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/client_pprof.png\" alt=\"\"></p>\n<p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p>\n<h2 id=\"pprof文件分析\"><a href=\"#pprof文件分析\" class=\"headerlink\" title=\"pprof文件分析\"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p>\n<p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/analyze.png\" alt=\"\"></p>\n<p>这里分析下各个参数的意思</p>\n<h3 id=\"flat和cum\"><a href=\"#flat和cum\" class=\"headerlink\" title=\"flat和cum:\"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p>\n<p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p>\n<p>flat表示的是a()函数自己耗费的时间</p>\n<p>如果a()函数是这样的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">b() <span class=\"comment\">// takes 2s</span></div><div class=\"line\">do something directly <span class=\"comment\">// takes 3s</span></div><div class=\"line\">c() <span class=\"comment\">// takes 2s</span></div></pre></td></tr></table></figure>\n<p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum:\"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p>\n<p>具体可以参考：</p>\n<p><a href=\"https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/\" target=\"_blank\" rel=\"external\">What is the meaning of “flat” and “cum” in golang pprof output</a></p>\n<h3 id=\"图形分析\"><a href=\"#图形分析\" class=\"headerlink\" title=\"图形分析\"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p>\n<p>安装好之后可以直接使用命令来生成图片</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z guess]# go tool pprof  cpu.pprof</div><div class=\"line\">Entering interactive mode (type \"help\" for commands)</div><div class=\"line\">(pprof) svg</div><div class=\"line\">Generating report in profile001.svg</div><div class=\"line\">(pprof)</div></pre></td></tr></table></figure>\n<p>这样就生成了svg图片<code>profile001.svg</code></p>\n<p><img src=\"/2017/08/23/Go性能分析工具/Blog\\hexo\\source\\_posts\\Go性能分析工具\\sum&amp;cum&amp;flat.png\" alt=\"\"></p>\n<p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p>\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz </p>\n<p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p>\n<p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p>\n<blockquote>\n<p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/brendangregg/FlameGraph.git</div></pre></td></tr></table></figure>\n<p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp flamegraph.pl /usr/local/bin</div></pre></td></tr></table></figure>\n<p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ flamegraph.pl -h</div><div class=\"line\">Option h is ambiguous (hash, height, help)</div><div class=\"line\">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</div><div class=\"line\"></div><div class=\"line\">    --title       # change title text</div><div class=\"line\">    --width       # width of image (default 1200)</div><div class=\"line\">    --height      # height of each frame (default 16)</div><div class=\"line\">    --minwidth    # omit smaller functions (default 0.1 pixels)</div><div class=\"line\">    --fonttype    # font type (default &quot;Verdana&quot;)</div><div class=\"line\">    --fontsize    # font size (default 12)</div><div class=\"line\">    --countname   # count type label (default &quot;samples&quot;)</div><div class=\"line\">    --nametype    # name type label (default &quot;Function:&quot;)</div><div class=\"line\">    --colors      # set color palette. choices are: hot (default), mem, io,</div><div class=\"line\">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</div><div class=\"line\">                  # yellow, purple, orange</div><div class=\"line\">    --hash        # colors are keyed by function name hash</div><div class=\"line\">    --cp          # use consistent palette (palette.map)</div><div class=\"line\">    --reverse     # generate stack-reversed flame graph</div><div class=\"line\">    --inverted    # icicle graph</div><div class=\"line\">    --negate      # switch differential hues (blue&lt;-&gt;red)</div><div class=\"line\">    --help        # this message</div><div class=\"line\"></div><div class=\"line\">    eg,</div><div class=\"line\">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</div></pre></td></tr></table></figure>\n<p>4.安装go-torch</p>\n<p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go get -v github.com/uber/go-torch</div></pre></td></tr></table></figure>\n<p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ go-torch -b cpu.pprof -f cpu.svg</div><div class=\"line\">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</div><div class=\"line\">INFO[12:38:16] Writing svg to cpu.svg</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li>\n<li><strong>-f：</strong>表示要生成的svg图片名称</li>\n</ul>\n<p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/fire1.png\" alt=\"\"></p>\n<p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p>\n<blockquote>\n<ul>\n<li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li>\n<li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li>\n</ul>\n</blockquote>\n<p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html\" target=\"_blank\" rel=\"external\">Go代码调优利器-火焰图</a></p>\n<p><a href=\"https://blog.csdn.net/WaltonWang/article/details/54019891\" target=\"_blank\" rel=\"external\">Golang性能调优(go-torch, go tool pprof)</a></p>\n\n      \n    </div>\n    \n  </div>\n  \n    \n    <div class=\"copyright\">\n        <p><span>本文标题:</span><a href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></p>\n        <p><span>文章作者:</span><a href=\"/\" title=\"回到主页\">四娃</a></p>\n        <p><span>发布时间:</span>2017-08-23, 17:33:44</p>\n        <p><span>最后更新:</span>2018-07-20, 13:05:45</p>\n        <p>\n            <span>原始链接:</span><a class=\"post-url\" href=\"/2017/08/23/Go性能分析工具/\" title=\"Go性能分析工具\">http://yoursite.com/2017/08/23/Go性能分析工具/</a>\n            <span class=\"copy-path\" data-clipboard-text=\"原文: http://yoursite.com/2017/08/23/Go性能分析工具/　　作者: 四娃\" title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\"></i></span>\n            <script> var clipboard = new Clipboard('.copy-path'); </script>\n        </p>\n        <p>\n            <span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" title=\"CC BY-NC-SA 4.0 International\" target=\"_blank\">\"署名-非商用-相同方式共享 4.0\"</a> 转载请保留原文链接及作者。\n        </p>\n    </div>\n\n\n\n    <nav id=\"article-nav\">\n        \n            <div id=\"article-nav-newer\" class=\"article-nav-title\">\n                <a href=\"/2017/12/12/codis/\">\n                    codis安装及配置\n                </a>\n            </div>\n        \n        \n            <div id=\"article-nav-older\" class=\"article-nav-title\">\n                <a href=\"/2017/08/16/golang-http包/\">\n                    golang-http包\n                </a>\n            </div>\n        \n    </nav>\n\n  \n</article>\n\n    <div id=\"toc\" class=\"toc-article\">\n        <strong class=\"toc-title\">文章目录</strong>\n        \n            <ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#为什么需要性能分析\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">为什么需要性能分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pprof\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#什么是pprof\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">什么是pprof</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件生成\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">pprof文件生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#runtime-pprof\"><span class=\"toc-number\">2.2.1.</span> <span class=\"toc-text\">runtime/pprof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#net-http-pprof\"><span class=\"toc-number\">2.2.2.</span> <span class=\"toc-text\">net/http/pprof</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过浏览器分析\"><span class=\"toc-number\">2.2.2.1.</span> <span class=\"toc-text\">通过浏览器分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#通过命令行来分析\"><span class=\"toc-number\">2.2.2.2.</span> <span class=\"toc-text\">通过命令行来分析</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pprof文件分析\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">pprof文件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flat和cum\"><span class=\"toc-number\">2.3.1.</span> <span class=\"toc-text\">flat和cum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sum\"><span class=\"toc-number\">2.3.2.</span> <span class=\"toc-text\">sum:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#图形分析\"><span class=\"toc-number\">2.3.3.</span> <span class=\"toc-text\">图形分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#火焰图\"><span class=\"toc-number\">2.4.</span> <span class=\"toc-text\">火焰图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#安装\"><span class=\"toc-number\">2.4.1.</span> <span class=\"toc-text\">安装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#参考：\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">参考：</span></a></li></ol>\n        \n    </div>\n    <style>\n        .left-col .switch-btn,\n        .left-col .switch-area {\n            display: none;\n        }\n        .toc-level-3 i,\n        .toc-level-3 ol {\n            display: none !important;\n        }\n    </style>\n\n    <input type=\"button\" id=\"tocButton\" value=\"隐藏目录\" title=\"点击按钮隐藏或者显示文章目录\">\n\n    <script>\n        yiliaConfig.toc = [\"隐藏目录\", \"显示目录\", !!\"false\"];\n    </script>\n\n\n\n    \n<div class=\"share\">\n    \n        <div class=\"bdsharebuttonbox\">\n            <a href=\"#\" class=\"fa fa-twitter bds_twi\" data-cmd=\"twi\" title=\"分享到推特\"></a>\n            <a href=\"#\" class=\"fa fa-weibo bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\n            <a href=\"#\" class=\"fa fa-qq bds_sqq\" data-cmd=\"sqq\" title=\"分享给 QQ 好友\"></a>\n            <a href=\"#\" class=\"fa fa-files-o bds_copy\" data-cmd=\"copy\" title=\"复制网址\"></a>\n            <a href=\"#\" class=\"fa fa fa-envelope-o bds_mail\" data-cmd=\"mail\" title=\"通过邮件分享\"></a>\n            <a href=\"#\" class=\"fa fa-weixin bds_weixin\" data-cmd=\"weixin\" title=\"生成文章二维码\"></a>\n            <a href=\"#\" class=\"fa fa-share-alt bds_more\" data-cmd=\"more\"></a>\n        </div>\n        <script>\n            window._bd_share_config={\n                \"common\":{\"bdSnsKey\":{},\"bdText\":\"Go性能分析工具　| zhqqqy　\",\"bdMini\":\"2\",\"bdMiniList\":false,\"bdPic\":\"\",\"bdStyle\":\"0\",\"bdSize\":\"24\"},\"share\":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];\n        </script>\n    \n\n    \n</div>\n\n\n\n\n\n\n\n    \n\n\n\n\n    <div class=\"scroll\" id=\"post-nav-button\">\n        \n            <a href=\"/2017/12/12/codis/\" title=\"上一篇: codis安装及配置\">\n                <i class=\"fa fa-angle-left\"></i>\n            </a>\n        \n\n        <a title=\"文章列表\"><i class=\"fa fa-bars\"></i><i class=\"fa fa-times\"></i></a>\n\n        \n            <a href=\"/2017/08/16/golang-http包/\" title=\"下一篇: golang-http包\">\n                <i class=\"fa fa-angle-right\"></i>\n            </a>\n        \n    </div>\n\n    <ul class=\"post-list\"><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/18/Go里面的堆栈跟踪/\">Go里面的堆栈跟踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/13/Consul安装部署/\">Consul安装部署</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2018/07/12/微服务初探/\">微服务初探</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/29/redis Cluster 集群安装/\">redis Cluster 集群安装</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/12/12/codis/\">codis安装及配置</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/23/Go性能分析工具/\">Go性能分析工具</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/08/16/golang-http包/\">golang-http包</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/23/Go单元测试/\">Go单元测试</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/my-first-blog/\">6.4 defer 和追踪</a></li><li class=\"post-list-item\"><a class=\"post-list-link\" href=\"/2017/06/15/hello-world/\">First Test</a></li></ul>\n\n\n\n\n    <script>\n        \n    </script>\n</div>\n      <footer id=\"footer\">\n    <div class=\"outer\">\n        <div id=\"footer-info\">\n            <div class=\"footer-left\">\n                <i class=\"fa fa-copyright\"></i> \n                2016-2018 四娃\n            </div>\n            <div class=\"footer-right\">\n                <a href=\"http://hexo.io/\" target=\"_blank\" title=\"快速、简洁且高效的博客框架\">Hexo</a>  Theme <a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" title=\"简而不减 Hexo 双栏博客主题  v3.5\">Yelee</a> by MOxFIVE <i class=\"fa fa-heart animated infinite pulse\"></i>\n            </div>\n        </div>\n        \n            <div class=\"visit\">\n                \n                    <span id=\"busuanzi_container_site_pv\" style=\"display:none\">\n                        <span id=\"site-visit\" title=\"本站到访数\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_site_uv\"></span>\n                        </span>\n                    </span>\n                \n                \n                    <span>| </span>\n                \n                \n                    <span id=\"busuanzi_container_page_pv\" style=\"display:none\">\n                        <span id=\"page-visit\" title=\"本页阅读量\"><i class=\"fa fa-eye animated infinite pulse\" aria-hidden=\"true\"></i><span id=\"busuanzi_value_page_pv\"></span>\n                        </span>\n                    </span>\n                \n            </div>\n        \n    </div>\n</footer>\n    </div>\n    \n<script data-main=\"/js/main.js\" src=\"//cdn.bootcss.com/require.js/2.2.0/require.min.js\"></script>\n\n    <script>\n        $(document).ready(function() {\n            var iPad = window.navigator.userAgent.indexOf('iPad');\n            if (iPad > -1 || $(\".left-col\").css(\"display\") === \"none\") {\n                var bgColorList = [\"#9db3f4\", \"#414141\", \"#e5a859\", \"#f5dfc6\", \"#c084a0\", \"#847e72\", \"#cd8390\", \"#996731\"];\n                var bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));\n                $(\"body\").css({\"background-color\": bgColorList[bgColor], \"background-size\": \"cover\"});\n            }\n            else {\n                var backgroundnum = 5;\n                var backgroundimg = \"url(/background/bg-x.jpg)\".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));\n                $(\"body\").css({\"background\": backgroundimg, \"background-attachment\": \"fixed\", \"background-size\": \"cover\"});\n            }\n        })\n    </script>\n\n\n\n\n\n<div class=\"scroll\" id=\"scroll\">\n    <a href=\"#\" title=\"返回顶部\"><i class=\"fa fa-arrow-up\"></i></a>\n    <a href=\"#comments\" onclick=\"load$hide();\" title=\"查看评论\"><i class=\"fa fa-comments-o\"></i></a>\n    <a href=\"#footer\" title=\"转到底部\"><i class=\"fa fa-arrow-down\"></i></a>\n</div>\n<script>\n    // Open in New Window\n    \n        var oOpenInNew = {\n            \n            \n            \n            \n            \n            \n             archives: \".archive-article-title\", \n             miniArchives: \"a.post-list-link\", \n            \n             friends: \"#js-friends a\", \n             socail: \".social a\" \n        }\n        for (var x in oOpenInNew) {\n            $(oOpenInNew[x]).attr(\"target\", \"_blank\");\n        }\n    \n</script>\n\n    <script>\n        var originTitle = document.title;\n        var titleTime;\n        document.addEventListener(\"visibilitychange\", function() {\n            if (document.hidden) {\n                document.title = \"(つェ⊂) 我藏好了哦~ \" + originTitle;\n                clearTimeout(titleTime);\n            }\n            else {\n                document.title = \"(*´∇｀*) 被你发现啦~ \" + originTitle;\n                titleTime = setTimeout(function() {\n                    document.title = originTitle;\n                }, 2000);\n            }\n        })\n    </script>\n\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n  </div>\n</body>\n</html>"}],"Post":[{"_content":"","source":"_posts/Consul安装部署.md","raw":"","slug":"Consul安装部署","published":1,"date":"2018-08-10T03:24:44.229Z","updated":"2018-08-10T03:24:44.229Z","_id":"cjknf5fo70000lzn9r9me1r89","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Go单元测试.md","raw":"","slug":"Go单元测试","published":1,"date":"2018-08-10T03:25:19.013Z","updated":"2018-08-10T03:25:19.013Z","_id":"cjknf5fob0002lzn98upuvi5i","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Go性能分析工具.md","raw":"","slug":"Go性能分析工具","published":1,"date":"2018-08-10T03:25:46.918Z","updated":"2018-08-10T03:25:46.918Z","_id":"cjknf5foe0005lzn9nt1ix3yq","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Go里面的堆栈跟踪.md","raw":"","slug":"Go里面的堆栈跟踪","published":1,"date":"2018-08-10T03:26:15.255Z","updated":"2018-08-10T03:26:15.255Z","_id":"cjknf5fof0006lzn9sycs8pgd","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/codis安装及配置.md","raw":"","slug":"codis安装及配置","published":1,"date":"2018-08-10T03:24:26.620Z","updated":"2018-08-10T03:24:26.620Z","_id":"cjknf5fog0007lzn9j8s5ijnv","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"defer和追踪","date":"2017-06-15T07:46:28.000Z","_content":"## defer关键字\n\n关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 `return` 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 `return` 语句同样可以包含一些操作，而不是单纯地返回某个值）。\n\n关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 `finally` 语句块，它一般用于释放某些已分配的资源。\n\n### 示例 6.8 [defer.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go)：\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n\tfunction1()\n}\n\nfunc function1() {\n\tfmt.Printf(\"In function1 at the top\\n\")\n\tdefer function2()\n\tfmt.Printf(\"In function1 at the bottom!\\n\")\n}\n\nfunc function2() {\n\tfmt.Printf(\"function2: Deferred until the end of the calling function!\")\n}\n```\n\n输出：\n\n```\nIn Function1 at the top\nIn Function1 at the bottom!\nFunction2: Deferred until the end of the calling function!\n```\n\n请将 defer 关键字去掉并对比输出结果。\n\n使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 `0`：\n\n```go\nfunc a() {\n\ti := 0\n\tdefer fmt.Println(i)\n\ti++\n\treturn\n}\n```\n\n当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：\n\n```go\nfunc f() {\n\tfor i := 0; i < 5; i++ {\n\t\tdefer fmt.Printf(\"%d \", i)\n\t}\n}\n```\n\n上面的代码将会输出：`4 3 2 1 0`。\n\n### 关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\n\n例如：\n\n1. 关闭文件流：\n\n   // open a file\n   defer file.Close() （详见第 12.2 节）\n\n2. 解锁一个加锁的资源\n\n   mu.Lock()\n   defer mu.Unlock() （详见第 9.3 节）\n\n3. 打印最终报告\n\n   printHeader()\n   defer printFooter()\n\n4. 关闭数据库链接\n\n   // open a database connection\n   defer disconnectFromDB()\n\n合理使用 defer 语句能够使得代码更加简洁。\n\n以下代码模拟了上面描述的第 4 种情况：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdoDBOperations()\n}\n\nfunc connectToDB() {\n\tfmt.Println(\"ok, connected to db\")\n}\n\nfunc disconnectFromDB() {\n\tfmt.Println(\"ok, disconnected from db\")\n}\n\nfunc doDBOperations() {\n\tconnectToDB()\n\tfmt.Println(\"Defering the database disconnect.\")\n\tdefer disconnectFromDB() //function called here with defer\n\tfmt.Println(\"Doing some DB operations ...\")\n\tfmt.Println(\"Oops! some crash or network error ...\")\n\tfmt.Println(\"Returning from function here!\")\n\treturn //terminate the program\n\t// deferred function executed here just before actually returning, even if\n\t// there is a return or abnormal termination before\n}\n```\n\n输出：\n\n```\nok, connected to db\nDefering the database disconnect.\nDoing some DB operations ...\nOops! some crash or network error ...\nReturning from function here!\nok, disconnected from db\n```\n\n### 使用 defer 语句实现代码追踪\n\n一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：\n\n```go\nfunc trace(s string) { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n```\n\n以下代码展示了何时调用两个函数：\n\n示例 6.10 [defer_tracing.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go):\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\nfunc a() {\n\ttrace(\"a\")\n\tdefer untrace(\"a\")\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\ttrace(\"b\")\n\tdefer untrace(\"b\")\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n输出：\n\n```\nentering: b\nin b\nentering: a\nin a\nleaving: a\nleaving: b\n```\n\n上面的代码还可以修改为更加简便的版本（示例 6.11 [defer_tracing2.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go)）：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string) string {\n\tfmt.Println(\"entering:\", s)\n\treturn s\n}\n\nfunc un(s string) {\n\tfmt.Println(\"leaving:\", s)\n}\n\nfunc a() {\n\tdefer un(trace(\"a\"))\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\tdefer un(trace(\"b\"))\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n### 使用 defer 语句来记录函数的参数与返回值\n\n下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 [defer_logvalues.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go)）：\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n)\n\nfunc func1(s string) (n int, err error) {\n\tdefer func() {\n\t\tlog.Printf(\"func1(%q) = %d, %v\", s, n, err)\n\t}()\n\treturn 7, io.EOF\n}\n\nfunc main() {\n\tfunc1(\"Go\")\n}\n```\n\n输出：\n\n```\nOutput: 2011/10/04 10:46:11 func1(\"Go\") = 7, EOF\n```","source":"_posts/defer和追踪.md","raw":"---\ntitle: defer和追踪\ndate: 2017-06-15 15:46:28\ntags: golang\ncategories: Golang\n---\n## defer关键字\n\n关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 `return` 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 `return` 语句同样可以包含一些操作，而不是单纯地返回某个值）。\n\n关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 `finally` 语句块，它一般用于释放某些已分配的资源。\n\n### 示例 6.8 [defer.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go)：\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n\tfunction1()\n}\n\nfunc function1() {\n\tfmt.Printf(\"In function1 at the top\\n\")\n\tdefer function2()\n\tfmt.Printf(\"In function1 at the bottom!\\n\")\n}\n\nfunc function2() {\n\tfmt.Printf(\"function2: Deferred until the end of the calling function!\")\n}\n```\n\n输出：\n\n```\nIn Function1 at the top\nIn Function1 at the bottom!\nFunction2: Deferred until the end of the calling function!\n```\n\n请将 defer 关键字去掉并对比输出结果。\n\n使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 `0`：\n\n```go\nfunc a() {\n\ti := 0\n\tdefer fmt.Println(i)\n\ti++\n\treturn\n}\n```\n\n当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：\n\n```go\nfunc f() {\n\tfor i := 0; i < 5; i++ {\n\t\tdefer fmt.Printf(\"%d \", i)\n\t}\n}\n```\n\n上面的代码将会输出：`4 3 2 1 0`。\n\n### 关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\n\n例如：\n\n1. 关闭文件流：\n\n   // open a file\n   defer file.Close() （详见第 12.2 节）\n\n2. 解锁一个加锁的资源\n\n   mu.Lock()\n   defer mu.Unlock() （详见第 9.3 节）\n\n3. 打印最终报告\n\n   printHeader()\n   defer printFooter()\n\n4. 关闭数据库链接\n\n   // open a database connection\n   defer disconnectFromDB()\n\n合理使用 defer 语句能够使得代码更加简洁。\n\n以下代码模拟了上面描述的第 4 种情况：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdoDBOperations()\n}\n\nfunc connectToDB() {\n\tfmt.Println(\"ok, connected to db\")\n}\n\nfunc disconnectFromDB() {\n\tfmt.Println(\"ok, disconnected from db\")\n}\n\nfunc doDBOperations() {\n\tconnectToDB()\n\tfmt.Println(\"Defering the database disconnect.\")\n\tdefer disconnectFromDB() //function called here with defer\n\tfmt.Println(\"Doing some DB operations ...\")\n\tfmt.Println(\"Oops! some crash or network error ...\")\n\tfmt.Println(\"Returning from function here!\")\n\treturn //terminate the program\n\t// deferred function executed here just before actually returning, even if\n\t// there is a return or abnormal termination before\n}\n```\n\n输出：\n\n```\nok, connected to db\nDefering the database disconnect.\nDoing some DB operations ...\nOops! some crash or network error ...\nReturning from function here!\nok, disconnected from db\n```\n\n### 使用 defer 语句实现代码追踪\n\n一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：\n\n```go\nfunc trace(s string) { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n```\n\n以下代码展示了何时调用两个函数：\n\n示例 6.10 [defer_tracing.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go):\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\nfunc a() {\n\ttrace(\"a\")\n\tdefer untrace(\"a\")\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\ttrace(\"b\")\n\tdefer untrace(\"b\")\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n输出：\n\n```\nentering: b\nin b\nentering: a\nin a\nleaving: a\nleaving: b\n```\n\n上面的代码还可以修改为更加简便的版本（示例 6.11 [defer_tracing2.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go)）：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string) string {\n\tfmt.Println(\"entering:\", s)\n\treturn s\n}\n\nfunc un(s string) {\n\tfmt.Println(\"leaving:\", s)\n}\n\nfunc a() {\n\tdefer un(trace(\"a\"))\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\tdefer un(trace(\"b\"))\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n### 使用 defer 语句来记录函数的参数与返回值\n\n下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 [defer_logvalues.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go)）：\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n)\n\nfunc func1(s string) (n int, err error) {\n\tdefer func() {\n\t\tlog.Printf(\"func1(%q) = %d, %v\", s, n, err)\n\t}()\n\treturn 7, io.EOF\n}\n\nfunc main() {\n\tfunc1(\"Go\")\n}\n```\n\n输出：\n\n```\nOutput: 2011/10/04 10:46:11 func1(\"Go\") = 7, EOF\n```","slug":"defer和追踪","published":1,"updated":"2018-08-10T01:38:40.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknf5foi000blzn99jyxy9fn","content":"<h2 id=\"defer关键字\"><a href=\"#defer关键字\" class=\"headerlink\" title=\"defer关键字\"></a>defer关键字</h2><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p>\n<p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p>\n<h3 id=\"示例-6-8-defer-go：\"><a href=\"#示例-6-8-defer-go：\" class=\"headerlink\" title=\"示例 6.8 defer.go：\"></a>示例 6.8 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go\">defer.go</a>：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunction1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the top\\n\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> function2()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the bottom!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"function2: Deferred until the end of the calling function!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In Function1 at the top</span><br><span class=\"line\">In Function1 at the bottom!</span><br><span class=\"line\">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure>\n<p>请将 defer 关键字去掉并对比输出结果。</p>\n<p>使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 <code>0</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\ti++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">\"%d \"</span>, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将会输出：<code>4 3 2 1 0</code>。</p>\n<h3 id=\"关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\"><a href=\"#关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\" class=\"headerlink\" title=\"关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\"></a>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，</h3><p>例如：</p>\n<ol>\n<li><p>关闭文件流：</p>\n<p>// open a file<br>defer file.Close() （详见第 12.2 节）</p>\n</li>\n<li><p>解锁一个加锁的资源</p>\n<p>mu.Lock()<br>defer mu.Unlock() （详见第 9.3 节）</p>\n</li>\n<li><p>打印最终报告</p>\n<p>printHeader()<br>defer printFooter()</p>\n</li>\n<li><p>关闭数据库链接</p>\n<p>// open a database connection<br>defer disconnectFromDB()</p>\n</li>\n</ol>\n<p>合理使用 defer 语句能够使得代码更加简洁。</p>\n<p>以下代码模拟了上面描述的第 4 种情况：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdoDBOperations()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">connectToDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, connected to db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disconnectFromDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, disconnected from db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doDBOperations</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconnectToDB()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Defering the database disconnect.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> disconnectFromDB() <span class=\"comment\">//function called here with defer</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Doing some DB operations ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Oops! some crash or network error ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Returning from function here!\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"comment\">//terminate the program</span></span><br><span class=\"line\">\t<span class=\"comment\">// deferred function executed here just before actually returning, even if</span></span><br><span class=\"line\">\t<span class=\"comment\">// there is a return or abnormal termination before</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ok, connected to db</span><br><span class=\"line\">Defering the database disconnect.</span><br><span class=\"line\">Doing some DB operations ...</span><br><span class=\"line\">Oops! some crash or network error ...</span><br><span class=\"line\">Returning from function here!</span><br><span class=\"line\">ok, disconnected from db</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句实现代码追踪\"><a href=\"#使用-defer-语句实现代码追踪\" class=\"headerlink\" title=\"使用 defer 语句实现代码追踪\"></a>使用 defer 语句实现代码追踪</h3><p>一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br></pre></td></tr></table></figure>\n<p>以下代码展示了何时调用两个函数：</p>\n<p>示例 6.10 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go\">defer_tracing.go</a>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span>   &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entering: b</span><br><span class=\"line\">in b</span><br><span class=\"line\">entering: a</span><br><span class=\"line\">in a</span><br><span class=\"line\">leaving: a</span><br><span class=\"line\">leaving: b</span><br></pre></td></tr></table></figure>\n<p>上面的代码还可以修改为更加简便的版本（示例 6.11 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go\">defer_tracing2.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"entering:\"</span>, s)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">un</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"leaving:\"</span>, s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句来记录函数的参数与返回值\"><a href=\"#使用-defer-语句来记录函数的参数与返回值\" class=\"headerlink\" title=\"使用 defer 语句来记录函数的参数与返回值\"></a>使用 defer 语句来记录函数的参数与返回值</h3><p>下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go\">defer_logvalues.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">func1</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"func1(%q) = %d, %v\"</span>, s, n, err)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">7</span>, io.EOF</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunc1(<span class=\"string\">\"Go\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"defer关键字\"><a href=\"#defer关键字\" class=\"headerlink\" title=\"defer关键字\"></a>defer关键字</h2><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p>\n<p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p>\n<h3 id=\"示例-6-8-defer-go：\"><a href=\"#示例-6-8-defer-go：\" class=\"headerlink\" title=\"示例 6.8 defer.go：\"></a>示例 6.8 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go\">defer.go</a>：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunction1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the top\\n\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> function2()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the bottom!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"function2: Deferred until the end of the calling function!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In Function1 at the top</span><br><span class=\"line\">In Function1 at the bottom!</span><br><span class=\"line\">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure>\n<p>请将 defer 关键字去掉并对比输出结果。</p>\n<p>使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 <code>0</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\ti++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">\"%d \"</span>, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将会输出：<code>4 3 2 1 0</code>。</p>\n<h3 id=\"关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\"><a href=\"#关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\" class=\"headerlink\" title=\"关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\"></a>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，</h3><p>例如：</p>\n<ol>\n<li><p>关闭文件流：</p>\n<p>// open a file<br>defer file.Close() （详见第 12.2 节）</p>\n</li>\n<li><p>解锁一个加锁的资源</p>\n<p>mu.Lock()<br>defer mu.Unlock() （详见第 9.3 节）</p>\n</li>\n<li><p>打印最终报告</p>\n<p>printHeader()<br>defer printFooter()</p>\n</li>\n<li><p>关闭数据库链接</p>\n<p>// open a database connection<br>defer disconnectFromDB()</p>\n</li>\n</ol>\n<p>合理使用 defer 语句能够使得代码更加简洁。</p>\n<p>以下代码模拟了上面描述的第 4 种情况：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdoDBOperations()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">connectToDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, connected to db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disconnectFromDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, disconnected from db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doDBOperations</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconnectToDB()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Defering the database disconnect.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> disconnectFromDB() <span class=\"comment\">//function called here with defer</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Doing some DB operations ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Oops! some crash or network error ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Returning from function here!\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"comment\">//terminate the program</span></span><br><span class=\"line\">\t<span class=\"comment\">// deferred function executed here just before actually returning, even if</span></span><br><span class=\"line\">\t<span class=\"comment\">// there is a return or abnormal termination before</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ok, connected to db</span><br><span class=\"line\">Defering the database disconnect.</span><br><span class=\"line\">Doing some DB operations ...</span><br><span class=\"line\">Oops! some crash or network error ...</span><br><span class=\"line\">Returning from function here!</span><br><span class=\"line\">ok, disconnected from db</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句实现代码追踪\"><a href=\"#使用-defer-语句实现代码追踪\" class=\"headerlink\" title=\"使用 defer 语句实现代码追踪\"></a>使用 defer 语句实现代码追踪</h3><p>一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br></pre></td></tr></table></figure>\n<p>以下代码展示了何时调用两个函数：</p>\n<p>示例 6.10 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go\">defer_tracing.go</a>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span>   &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entering: b</span><br><span class=\"line\">in b</span><br><span class=\"line\">entering: a</span><br><span class=\"line\">in a</span><br><span class=\"line\">leaving: a</span><br><span class=\"line\">leaving: b</span><br></pre></td></tr></table></figure>\n<p>上面的代码还可以修改为更加简便的版本（示例 6.11 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go\">defer_tracing2.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"entering:\"</span>, s)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">un</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"leaving:\"</span>, s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句来记录函数的参数与返回值\"><a href=\"#使用-defer-语句来记录函数的参数与返回值\" class=\"headerlink\" title=\"使用 defer 语句来记录函数的参数与返回值\"></a>使用 defer 语句来记录函数的参数与返回值</h3><p>下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go\">defer_logvalues.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">func1</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"func1(%q) = %d, %v\"</span>, s, n, err)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">7</span>, io.EOF</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunc1(<span class=\"string\">\"Go\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br></pre></td></tr></table></figure>"},{"_content":"","source":"_posts/redis集群安装.md","raw":"","slug":"redis集群安装","published":1,"date":"2018-08-10T03:27:16.408Z","updated":"2018-08-10T03:27:16.408Z","_id":"cjknf5foj000clzn97kyd3vka","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"golang-http包","date":"2017-08-16T08:21:21.000Z","_content":"\n# http服务\n\nhttp包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.\n\n## 1. 函数\n\n### 1.1 服务端函数\n\n1. `Handle`将handler按照指定的格式注册到`DefaultServeMux`,`ServeMux`解释了模式匹配规则\n\n   ```go\n   func Handle(pattern string, handler Handler)\n   ```\n\n2. `HandleFunc`同上，主要用来实现动态文件内容的展示，这点与`ServerFile()`不同的地方。\n\n   ```go\n   func HandleFunc(pattern string, handler func(ResponseWriter, *Request))\n   ```\n\n3. `ServeFile`利用指定的文件或者目录的内容来响应相应的请求.\n\n   ```go\n   func ServeFile(w ResponseWriter, r *Request, name string)\n   ```\n\n4. `ListenAndServe`监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux\n\n   ```go\n   func ListenAndServe(addr string, handler Handler) error\n   ```\n\n### 1.2最简单的http服务\n\n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() {\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面\n由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关\n\n由1.1的解析可知，第2个参数是一个 **Hander**\n\n在http包中看到这个 **Hander**接口只有一个方法ServeHTTP\n\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n```\n\n所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用\n\nServeHTTP方法，他需要2个参数，\n\n1. 一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容\n2. 另一个是*http.Request，*http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）\n\n### example\n\n```go\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n)\n\ntype test struct{}\n//结构体a实现了ServeHTTP\nfunc (*test) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n\nfunc main() {\n    http.ListenAndServe(\":8080\", &test{})//第2个参数需要实现Hander的struct，a满足\n}\n```\n\n现在\n访问localhost:8080的话，可以看到“hello world”\n访问localhost:8080/abc的话，可以看到“hello world”\n访问localhost:8080/123的话，可以看到“hello world”\n事实上访问任何路径都是“hello world”\n\n当 http.ListenAndServe(“:8080”, &test{})后，开始等待有访问请求\n\n一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的`http.ResponseWriter, *http.Request`传进去\n\n而test的ServeHTTP这个方法，拿到`*http.ResponseWriter`后，并往里面写东西，客户端的网页就显示出来了\n\n一、从源码可以理解:这里会将Handler赋值给Server\n\n```go\n// ListenAndServe always returns a non-nil error.\nfunc ListenAndServe(addr string, handler Handler) error {\n\tserver := &Server{Addr: addr, Handler: handler}\n\treturn server.ListenAndServe()\n}\n```\n\n二、\n\n这里是server.ListenAndServe()———–>回去调用go c.server(ctx)\n\n其中c是`c := srv.newConn(rw)`\n\n然后`c.server(ctx)`这个函数中会调用`serverHandler{c.server}.ServeHTTP(w, w.req)`这个方法\n\n这里serverHandler组合了Server结构体\n\n这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP\n\n```go\n// serverHandler delegates to either the server's Handler or\n// DefaultServeMux and also handles \"OPTIONS *\" requests.\ntype serverHandler struct {\n\tsrv *Server\n}\n\nfunc (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {\n\thandler := sh.srv.Handler\n\tif handler == nil {\n\t\thandler = DefaultServeMux\n\t}\n\tif req.RequestURI == \"*\" && req.Method == \"OPTIONS\" {\n\t\thandler = globalOptionsHandler{}\n\t}\n\thandler.ServeHTTP(rw, req)\n}\n```\n\n通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的\n\n\\###2.3、ServeMux的作用\n\n先看ServeMux的结构体:\n\n```go\ntype ServeMux struct {\n   mu    sync.RWMutex\n   m     map[string]muxEntry\n   hosts bool // whether any patterns contain hostnames\n}\n\ntype muxEntry struct {\n   explicit bool\n   h        Handler\n   pattern  string\n}\n```\n\n从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法\n\n然后看代码\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\ntype b struct{}\n\nfunc (*b) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello\")\n}\nfunc main() {\n    mux := http.NewServeMux()//新建一个ServeMux。\n    mux.Handle(\"/h\", &b{})//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。\n    http.ListenAndServe(\":8080\", mux)\n}\n```\n\n**mux.Handle内部**\n\n```go\n//Handle registers the handler for the given pattern.\n// If a handler already exists for pattern, Handle panics.\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {\n   mux.mu.Lock()\n   defer mux.mu.Unlock()\n\n   if pattern == \"\" {\n      panic(\"http: invalid pattern \" + pattern)\n   }\n   if handler == nil {\n      panic(\"http: nil handler\")\n   }\n   if mux.m[pattern].explicit {\n      panic(\"http: multiple registrations for \" + pattern)\n   }\n\n   if mux.m == nil {\n      mux.m = make(map[string]muxEntry)\n   }\n  //将路由作为key，然后将handler和路由以及显示调用设置为true\n   mux.m[pattern] = muxEntry{explicit: true, h: handler, pattern: pattern}\n\n   if pattern[0] != '/' {\n      mux.hosts = true\n   }\n   ....\n   }\n```\n\n所以可以看出ServeMux是通过一个map将路由以及函数存起来的。\n\n```go\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {}\n```\n\n这个函数接收的第一个参数是**路由**，第二个参数是一个**Handler**。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。\n\n运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&b{}的ServeHTTP方法）\n\n如果用户访问`/h`的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&b{}的 ServeHTTP方法，从而打印hello\n如果用户访问`/abc`的话，mux因为没有匹配上，从而打印404 page not found\n\n### 2.4、ServeMux的HandleFunc方法\n\nServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP\n\n```go\nfunc (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {\n   mux.Handle(pattern, HandlerFunc(handler))\n}\n```\n\n```go\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(w, r).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n   f(w, r)\n}\n```\n\n所以使用HandlerFunc的时候\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/h\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"hello\")\n    })\n    mux.HandleFunc(\"/bye\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"byebye\")\n    })\n    mux.HandleFunc(\"/hello\", sayhello)\n    http.ListenAndServe(\":8080\", mux)\n}\n\nfunc sayhello(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n```\n\n","source":"_posts/golang-http包.md","raw":"---\ntitle: golang-http包\ndate: 2017-08-16 16:21:21\ntags: golang\ncategories: Golang\n---\n\n# http服务\n\nhttp包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.\n\n## 1. 函数\n\n### 1.1 服务端函数\n\n1. `Handle`将handler按照指定的格式注册到`DefaultServeMux`,`ServeMux`解释了模式匹配规则\n\n   ```go\n   func Handle(pattern string, handler Handler)\n   ```\n\n2. `HandleFunc`同上，主要用来实现动态文件内容的展示，这点与`ServerFile()`不同的地方。\n\n   ```go\n   func HandleFunc(pattern string, handler func(ResponseWriter, *Request))\n   ```\n\n3. `ServeFile`利用指定的文件或者目录的内容来响应相应的请求.\n\n   ```go\n   func ServeFile(w ResponseWriter, r *Request, name string)\n   ```\n\n4. `ListenAndServe`监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux\n\n   ```go\n   func ListenAndServe(addr string, handler Handler) error\n   ```\n\n### 1.2最简单的http服务\n\n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() {\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面\n由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关\n\n由1.1的解析可知，第2个参数是一个 **Hander**\n\n在http包中看到这个 **Hander**接口只有一个方法ServeHTTP\n\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n```\n\n所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用\n\nServeHTTP方法，他需要2个参数，\n\n1. 一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容\n2. 另一个是*http.Request，*http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）\n\n### example\n\n```go\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n)\n\ntype test struct{}\n//结构体a实现了ServeHTTP\nfunc (*test) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n\nfunc main() {\n    http.ListenAndServe(\":8080\", &test{})//第2个参数需要实现Hander的struct，a满足\n}\n```\n\n现在\n访问localhost:8080的话，可以看到“hello world”\n访问localhost:8080/abc的话，可以看到“hello world”\n访问localhost:8080/123的话，可以看到“hello world”\n事实上访问任何路径都是“hello world”\n\n当 http.ListenAndServe(“:8080”, &test{})后，开始等待有访问请求\n\n一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的`http.ResponseWriter, *http.Request`传进去\n\n而test的ServeHTTP这个方法，拿到`*http.ResponseWriter`后，并往里面写东西，客户端的网页就显示出来了\n\n一、从源码可以理解:这里会将Handler赋值给Server\n\n```go\n// ListenAndServe always returns a non-nil error.\nfunc ListenAndServe(addr string, handler Handler) error {\n\tserver := &Server{Addr: addr, Handler: handler}\n\treturn server.ListenAndServe()\n}\n```\n\n二、\n\n这里是server.ListenAndServe()———–>回去调用go c.server(ctx)\n\n其中c是`c := srv.newConn(rw)`\n\n然后`c.server(ctx)`这个函数中会调用`serverHandler{c.server}.ServeHTTP(w, w.req)`这个方法\n\n这里serverHandler组合了Server结构体\n\n这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP\n\n```go\n// serverHandler delegates to either the server's Handler or\n// DefaultServeMux and also handles \"OPTIONS *\" requests.\ntype serverHandler struct {\n\tsrv *Server\n}\n\nfunc (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {\n\thandler := sh.srv.Handler\n\tif handler == nil {\n\t\thandler = DefaultServeMux\n\t}\n\tif req.RequestURI == \"*\" && req.Method == \"OPTIONS\" {\n\t\thandler = globalOptionsHandler{}\n\t}\n\thandler.ServeHTTP(rw, req)\n}\n```\n\n通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的\n\n\\###2.3、ServeMux的作用\n\n先看ServeMux的结构体:\n\n```go\ntype ServeMux struct {\n   mu    sync.RWMutex\n   m     map[string]muxEntry\n   hosts bool // whether any patterns contain hostnames\n}\n\ntype muxEntry struct {\n   explicit bool\n   h        Handler\n   pattern  string\n}\n```\n\n从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法\n\n然后看代码\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\ntype b struct{}\n\nfunc (*b) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello\")\n}\nfunc main() {\n    mux := http.NewServeMux()//新建一个ServeMux。\n    mux.Handle(\"/h\", &b{})//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。\n    http.ListenAndServe(\":8080\", mux)\n}\n```\n\n**mux.Handle内部**\n\n```go\n//Handle registers the handler for the given pattern.\n// If a handler already exists for pattern, Handle panics.\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {\n   mux.mu.Lock()\n   defer mux.mu.Unlock()\n\n   if pattern == \"\" {\n      panic(\"http: invalid pattern \" + pattern)\n   }\n   if handler == nil {\n      panic(\"http: nil handler\")\n   }\n   if mux.m[pattern].explicit {\n      panic(\"http: multiple registrations for \" + pattern)\n   }\n\n   if mux.m == nil {\n      mux.m = make(map[string]muxEntry)\n   }\n  //将路由作为key，然后将handler和路由以及显示调用设置为true\n   mux.m[pattern] = muxEntry{explicit: true, h: handler, pattern: pattern}\n\n   if pattern[0] != '/' {\n      mux.hosts = true\n   }\n   ....\n   }\n```\n\n所以可以看出ServeMux是通过一个map将路由以及函数存起来的。\n\n```go\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {}\n```\n\n这个函数接收的第一个参数是**路由**，第二个参数是一个**Handler**。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。\n\n运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&b{}的ServeHTTP方法）\n\n如果用户访问`/h`的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&b{}的 ServeHTTP方法，从而打印hello\n如果用户访问`/abc`的话，mux因为没有匹配上，从而打印404 page not found\n\n### 2.4、ServeMux的HandleFunc方法\n\nServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP\n\n```go\nfunc (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {\n   mux.Handle(pattern, HandlerFunc(handler))\n}\n```\n\n```go\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(w, r).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n   f(w, r)\n}\n```\n\n所以使用HandlerFunc的时候\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/h\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"hello\")\n    })\n    mux.HandleFunc(\"/bye\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"byebye\")\n    })\n    mux.HandleFunc(\"/hello\", sayhello)\n    http.ListenAndServe(\":8080\", mux)\n}\n\nfunc sayhello(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n```\n\n","slug":"golang-http包","published":1,"updated":"2018-08-10T03:05:49.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknf5fol000hlzn9h2l9j5ap","content":"<h1 id=\"http服务\"><a href=\"#http服务\" class=\"headerlink\" title=\"http服务\"></a>http服务</h1><p>http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.</p>\n<h2 id=\"1-函数\"><a href=\"#1-函数\" class=\"headerlink\" title=\"1. 函数\"></a>1. 函数</h2><h3 id=\"1-1-服务端函数\"><a href=\"#1-1-服务端函数\" class=\"headerlink\" title=\"1.1 服务端函数\"></a>1.1 服务端函数</h3><ol>\n<li><p><code>Handle</code>将handler按照指定的格式注册到<code>DefaultServeMux</code>,<code>ServeMux</code>解释了模式匹配规则</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>HandleFunc</code>同上，主要用来实现动态文件内容的展示，这点与<code>ServerFile()</code>不同的地方。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ServeFile</code>利用指定的文件或者目录的内容来响应相应的请求.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ServeFile</span><span class=\"params\">(w ResponseWriter, r *Request, name <span class=\"keyword\">string</span>)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ListenAndServe</code>监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"1-2最简单的http服务\"><a href=\"#1-2最简单的http服务\" class=\"headerlink\" title=\"1.2最简单的http服务\"></a>1.2最简单的http服务</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面<br>由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关</p>\n<p>由1.1的解析可知，第2个参数是一个 <strong>Hander</strong></p>\n<p>在http包中看到这个 <strong>Hander</strong>接口只有一个方法ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用</p>\n<p>ServeHTTP方法，他需要2个参数，</p>\n<ol>\n<li>一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容</li>\n<li>另一个是<em>http.Request，</em>http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）</li>\n</ol>\n<h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体a实现了ServeHTTP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*test)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, &amp;test&#123;&#125;)<span class=\"comment\">//第2个参数需要实现Hander的struct，a满足</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在<br>访问localhost:8080的话，可以看到“hello world”<br>访问localhost:8080/abc的话，可以看到“hello world”<br>访问localhost:8080/123的话，可以看到“hello world”<br>事实上访问任何路径都是“hello world”</p>\n<p>当 http.ListenAndServe(“:8080”, &amp;test{})后，开始等待有访问请求</p>\n<p>一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的<code>http.ResponseWriter, *http.Request</code>传进去</p>\n<p>而test的ServeHTTP这个方法，拿到<code>*http.ResponseWriter</code>后，并往里面写东西，客户端的网页就显示出来了</p>\n<p>一、从源码可以理解:这里会将Handler赋值给Server</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ListenAndServe always returns a non-nil error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> server.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<p>这里是server.ListenAndServe()———–&gt;回去调用go c.server(ctx)</p>\n<p>其中c是<code>c := srv.newConn(rw)</code></p>\n<p>然后<code>c.server(ctx)</code>这个函数中会调用<code>serverHandler{c.server}.ServeHTTP(w, w.req)</code>这个方法</p>\n<p>这里serverHandler组合了Server结构体</p>\n<p>这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// serverHandler delegates to either the server's Handler or</span></span><br><span class=\"line\"><span class=\"comment\">// DefaultServeMux and also handles \"OPTIONS *\" requests.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> serverHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsrv *Server</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sh serverHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(rw ResponseWriter, req *Request)</span></span> &#123;</span><br><span class=\"line\">\thandler := sh.srv.Handler</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\thandler = DefaultServeMux</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> req.RequestURI == <span class=\"string\">\"*\"</span> &amp;&amp; req.Method == <span class=\"string\">\"OPTIONS\"</span> &#123;</span><br><span class=\"line\">\t\thandler = globalOptionsHandler&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandler.ServeHTTP(rw, req)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的</p>\n<p>###2.3、ServeMux的作用</p>\n<p>先看ServeMux的结构体:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServeMux <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   mu    sync.RWMutex</span><br><span class=\"line\">   m     <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry</span><br><span class=\"line\">   hosts <span class=\"keyword\">bool</span> <span class=\"comment\">// whether any patterns contain hostnames</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> muxEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   explicit <span class=\"keyword\">bool</span></span><br><span class=\"line\">   h        Handler</span><br><span class=\"line\">   pattern  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法</p>\n<p>然后看代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> b <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*b)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()<span class=\"comment\">//新建一个ServeMux。</span></span><br><span class=\"line\">    mux.Handle(<span class=\"string\">\"/h\"</span>, &amp;b&#123;&#125;)<span class=\"comment\">//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。</span></span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>mux.Handle内部</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Handle registers the handler for the given pattern.</span></span><br><span class=\"line\"><span class=\"comment\">// If a handler already exists for pattern, Handle panics.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;</span><br><span class=\"line\">   mux.mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> mux.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: invalid pattern \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: nil handler\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m[pattern].explicit &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: multiple registrations for \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      mux.m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将路由作为key，然后将handler和路由以及显示调用设置为true</span></span><br><span class=\"line\">   mux.m[pattern] = muxEntry&#123;explicit: <span class=\"literal\">true</span>, h: handler, pattern: pattern&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern[<span class=\"number\">0</span>] != <span class=\"string\">'/'</span> &#123;</span><br><span class=\"line\">      mux.hosts = <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>所以可以看出ServeMux是通过一个map将路由以及函数存起来的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数接收的第一个参数是<strong>路由</strong>，第二个参数是一个<strong>Handler</strong>。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。</p>\n<p>运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&amp;b{}的ServeHTTP方法）</p>\n<p>如果用户访问<code>/h</code>的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&amp;b{}的 ServeHTTP方法，从而打印hello<br>如果用户访问<code>/abc</code>的话，mux因为没有匹配上，从而打印404 page not found</p>\n<h3 id=\"2-4、ServeMux的HandleFunc方法\"><a href=\"#2-4、ServeMux的HandleFunc方法\" class=\"headerlink\" title=\"2.4、ServeMux的HandleFunc方法\"></a>2.4、ServeMux的HandleFunc方法</h3><p>ServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class=\"line\">   mux.Handle(pattern, HandlerFunc(handler))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ResponseWriter, *Request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ServeHTTP</span> <span class=\"title\">calls</span> <span class=\"title\">f</span><span class=\"params\">(w, r)</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">   f(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以使用HandlerFunc的时候</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/h\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/bye\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"byebye\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/hello\"</span>, sayhello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"http服务\"><a href=\"#http服务\" class=\"headerlink\" title=\"http服务\"></a>http服务</h1><p>http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.</p>\n<h2 id=\"1-函数\"><a href=\"#1-函数\" class=\"headerlink\" title=\"1. 函数\"></a>1. 函数</h2><h3 id=\"1-1-服务端函数\"><a href=\"#1-1-服务端函数\" class=\"headerlink\" title=\"1.1 服务端函数\"></a>1.1 服务端函数</h3><ol>\n<li><p><code>Handle</code>将handler按照指定的格式注册到<code>DefaultServeMux</code>,<code>ServeMux</code>解释了模式匹配规则</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>HandleFunc</code>同上，主要用来实现动态文件内容的展示，这点与<code>ServerFile()</code>不同的地方。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ServeFile</code>利用指定的文件或者目录的内容来响应相应的请求.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ServeFile</span><span class=\"params\">(w ResponseWriter, r *Request, name <span class=\"keyword\">string</span>)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ListenAndServe</code>监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"1-2最简单的http服务\"><a href=\"#1-2最简单的http服务\" class=\"headerlink\" title=\"1.2最简单的http服务\"></a>1.2最简单的http服务</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面<br>由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关</p>\n<p>由1.1的解析可知，第2个参数是一个 <strong>Hander</strong></p>\n<p>在http包中看到这个 <strong>Hander</strong>接口只有一个方法ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用</p>\n<p>ServeHTTP方法，他需要2个参数，</p>\n<ol>\n<li>一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容</li>\n<li>另一个是<em>http.Request，</em>http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）</li>\n</ol>\n<h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体a实现了ServeHTTP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*test)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, &amp;test&#123;&#125;)<span class=\"comment\">//第2个参数需要实现Hander的struct，a满足</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在<br>访问localhost:8080的话，可以看到“hello world”<br>访问localhost:8080/abc的话，可以看到“hello world”<br>访问localhost:8080/123的话，可以看到“hello world”<br>事实上访问任何路径都是“hello world”</p>\n<p>当 http.ListenAndServe(“:8080”, &amp;test{})后，开始等待有访问请求</p>\n<p>一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的<code>http.ResponseWriter, *http.Request</code>传进去</p>\n<p>而test的ServeHTTP这个方法，拿到<code>*http.ResponseWriter</code>后，并往里面写东西，客户端的网页就显示出来了</p>\n<p>一、从源码可以理解:这里会将Handler赋值给Server</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ListenAndServe always returns a non-nil error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> server.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<p>这里是server.ListenAndServe()———–&gt;回去调用go c.server(ctx)</p>\n<p>其中c是<code>c := srv.newConn(rw)</code></p>\n<p>然后<code>c.server(ctx)</code>这个函数中会调用<code>serverHandler{c.server}.ServeHTTP(w, w.req)</code>这个方法</p>\n<p>这里serverHandler组合了Server结构体</p>\n<p>这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// serverHandler delegates to either the server's Handler or</span></span><br><span class=\"line\"><span class=\"comment\">// DefaultServeMux and also handles \"OPTIONS *\" requests.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> serverHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsrv *Server</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sh serverHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(rw ResponseWriter, req *Request)</span></span> &#123;</span><br><span class=\"line\">\thandler := sh.srv.Handler</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\thandler = DefaultServeMux</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> req.RequestURI == <span class=\"string\">\"*\"</span> &amp;&amp; req.Method == <span class=\"string\">\"OPTIONS\"</span> &#123;</span><br><span class=\"line\">\t\thandler = globalOptionsHandler&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandler.ServeHTTP(rw, req)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的</p>\n<p>###2.3、ServeMux的作用</p>\n<p>先看ServeMux的结构体:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServeMux <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   mu    sync.RWMutex</span><br><span class=\"line\">   m     <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry</span><br><span class=\"line\">   hosts <span class=\"keyword\">bool</span> <span class=\"comment\">// whether any patterns contain hostnames</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> muxEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   explicit <span class=\"keyword\">bool</span></span><br><span class=\"line\">   h        Handler</span><br><span class=\"line\">   pattern  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法</p>\n<p>然后看代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> b <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*b)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()<span class=\"comment\">//新建一个ServeMux。</span></span><br><span class=\"line\">    mux.Handle(<span class=\"string\">\"/h\"</span>, &amp;b&#123;&#125;)<span class=\"comment\">//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。</span></span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>mux.Handle内部</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Handle registers the handler for the given pattern.</span></span><br><span class=\"line\"><span class=\"comment\">// If a handler already exists for pattern, Handle panics.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;</span><br><span class=\"line\">   mux.mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> mux.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: invalid pattern \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: nil handler\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m[pattern].explicit &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: multiple registrations for \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      mux.m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将路由作为key，然后将handler和路由以及显示调用设置为true</span></span><br><span class=\"line\">   mux.m[pattern] = muxEntry&#123;explicit: <span class=\"literal\">true</span>, h: handler, pattern: pattern&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern[<span class=\"number\">0</span>] != <span class=\"string\">'/'</span> &#123;</span><br><span class=\"line\">      mux.hosts = <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>所以可以看出ServeMux是通过一个map将路由以及函数存起来的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数接收的第一个参数是<strong>路由</strong>，第二个参数是一个<strong>Handler</strong>。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。</p>\n<p>运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&amp;b{}的ServeHTTP方法）</p>\n<p>如果用户访问<code>/h</code>的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&amp;b{}的 ServeHTTP方法，从而打印hello<br>如果用户访问<code>/abc</code>的话，mux因为没有匹配上，从而打印404 page not found</p>\n<h3 id=\"2-4、ServeMux的HandleFunc方法\"><a href=\"#2-4、ServeMux的HandleFunc方法\" class=\"headerlink\" title=\"2.4、ServeMux的HandleFunc方法\"></a>2.4、ServeMux的HandleFunc方法</h3><p>ServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class=\"line\">   mux.Handle(pattern, HandlerFunc(handler))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ResponseWriter, *Request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ServeHTTP</span> <span class=\"title\">calls</span> <span class=\"title\">f</span><span class=\"params\">(w, r)</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">   f(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以使用HandlerFunc的时候</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/h\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/bye\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"byebye\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/hello\"</span>, sayhello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"","source":"_posts/微服务初探.md","raw":"","slug":"微服务初探","published":1,"date":"2018-08-10T03:26:40.616Z","updated":"2018-08-10T03:26:40.616Z","_id":"cjknf5fon000jlzn9yuv3odpj","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cjknf5foi000blzn99jyxy9fn","category_id":"cjknf5foh0008lzn97eci4cp7","_id":"cjknf5foo000klzn9sjthsjq1"},{"post_id":"cjknf5fol000hlzn9h2l9j5ap","category_id":"cjknf5foh0008lzn97eci4cp7","_id":"cjknf5fop000qlzn96kbou5x3"}],"PostTag":[{"post_id":"cjknf5foi000blzn99jyxy9fn","tag_id":"cjknf5foh0009lzn9w3wi91ky","_id":"cjknf5fol000glzn906kpvi6l"},{"post_id":"cjknf5fol000hlzn9h2l9j5ap","tag_id":"cjknf5foh0009lzn9w3wi91ky","_id":"cjknf5foo000nlzn9iaf89xsw"}],"Tag":[{"name":"Consul","_id":"cjknf5foe0004lzn9br989vhw"},{"name":"golang","_id":"cjknf5foh0009lzn9w3wi91ky"},{"name":"codis","_id":"cjknf5fop000slzn9l0bef3q1"},{"name":"redis","_id":"cjknf5foq000xlzn9eu1fnl5c"},{"name":"微服务","_id":"cjknf5for0011lzn9almqcckm"}]}}