{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1533840606000},{"_id":"themes/yelee/_config.yml","hash":"6d19e4ab281a8b980009d1a5c15990fd24bcd6e7","modified":1533888251120},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1533840606000},{"_id":"source/_posts/Consul安装部署.md","hash":"91a7431481128bfd5dc4d782a99795bde870637a","modified":1533889522937},{"_id":"source/_posts/Go单元测试.md","hash":"69040f277199a87f3746018520f33021c610ccae","modified":1533889681357},{"_id":"source/_posts/Go里面的堆栈跟踪.md","hash":"d55cd108d234e629c3425aba59e14a3e433269c3","modified":1533888460545},{"_id":"source/_posts/codis安装及配置.md","hash":"6f0cf50f9849623ef4c3d0b4f7f8454fe5521d2e","modified":1533889627280},{"_id":"source/_posts/defer和追踪.md","hash":"ca0b1ededf00fb24312bdd5cd42410c3d06e4a0b","modified":1533880384632},{"_id":"source/_posts/golang-http包.md","hash":"fbfab6b12ecfaeb43d72f6490a70a458aca68b52","modified":1533870349047},{"_id":"source/_posts/redis集群安装.md","hash":"84fdefa9299c202261c3a26e1b2a450038c10e3f","modified":1533871636416},{"_id":"source/_posts/微服务初探.md","hash":"46f18e2a01abe5ef00b742415abc1cca9722ec25","modified":1533890041949},{"_id":"source/about/index.md","hash":"0e2e66e7161861b7c29b7dec21b999138902ce1a","modified":1533888858664},{"_id":"source/categories/index.md","hash":"36fed31ed905b0bb212496722c2b676fd7a3bf56","modified":1533806388904},{"_id":"source/tags/index.md","hash":"86d108bf9ed69c0adac9588d7330f0e0e980bdcf","modified":1533806377968},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1533840606000},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1533840606000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1533840606000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1533840606000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1533840606000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1533840606000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1533840606000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1533840606000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1533840606000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1533840606000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1533840606000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1533840606000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1533840606000},{"_id":"themes/yelee/source/favicon.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533846280000},{"_id":"source/_posts/Consul安装部署/member_dev.png","hash":"a2753b83497b22fc988e62bebd94a97262557b94","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/ui_1.png","hash":"8b5ceafb840dddf081016e8d1066c6fd868496fb","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/ui_2.png","hash":"ae5c3eaadb8a52a521b77e8763109fd42fc1ba0a","modified":1533801771399},{"_id":"source/_posts/Consul安装部署/ui_3.png","hash":"e91c6d26058bdc1e98d6452c7c61b0d48b4ad56e","modified":1533801771399},{"_id":"source/_posts/Consul安装部署/ui_dev.png","hash":"cee3879e0a41074f817540931994174c9a10e052","modified":1533801771399},{"_id":"source/_posts/Go单元测试/更新.png","hash":"0a6af4e6cc8d9a0df3c2de02f56ec6b7aab86350","modified":1533801771387},{"_id":"source/_posts/Go里面的堆栈跟踪/Figure1.png","hash":"2c5aba8a18845a8325731b696d206a63a2faebe3","modified":1533801771399},{"_id":"source/_posts/Go里面的堆栈跟踪/Figure3.png","hash":"e468947778d213e89ee5eb71367b6853cd4f8e6b","modified":1533801771399},{"_id":"source/_posts/Go里面的堆栈跟踪/Figure2.png","hash":"646e65ea99e7c034d6dd490d05d7eff5e8ef075e","modified":1533801771399},{"_id":"source/_posts/codis安装及配置/addgroup.jpg","hash":"16f4e64701269a26b89938c17c47b23a2a70c2b1","modified":1533864375690},{"_id":"source/_posts/codis安装及配置/rebalance_slots.jpg","hash":"6b6a09292ffe794822259166bc68857539676baf","modified":1533864408386},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1533840606000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1533840606000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1533840606000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1533840606000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1533840606000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1533840606000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1533840606000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1533840606000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1533840606000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1533840606000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1533840606000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1533840606000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1533840606000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1533840606000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1533840606000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1533840606000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1533840606000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1533840606000},{"_id":"themes/yelee/source/img/avatar.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533846280000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1533840606000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1533840606000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1533840606000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1533840606000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1533840606000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1533840606000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1533840606000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1533840606000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1533840606000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1533840606000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1533840606000},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1533840606000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1533840606000},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1533840606000},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1533840606000},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1533840606000},{"_id":"source/_posts/Consul安装部署/candidate_146.png","hash":"cc438d8d2b5587dfbbda5aa6491467e8ec2f2494","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/consul_dev.png","hash":"e47c057999e1e3e489970a7a9b4d17b812e849b4","modified":1533801771395},{"_id":"source/_posts/Consul安装部署/consul架构图.png","hash":"395f68f0c6e83e0dd764d1b39f2bfb3cc7048f60","modified":1533801771395},{"_id":"source/_posts/微服务初探/客户端服务发现.png","hash":"069cbc7ddea50d749cdaace2ca287b025e54079e","modified":1533801771391},{"_id":"source/_posts/微服务初探/服务端服务发现.png","hash":"96aef90daba8cfe772f1cc676630c9b58be2a8ad","modified":1533801771395},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1533840606000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1533840606000},{"_id":"source/_posts/Consul安装部署/leader_52.png","hash":"0ac3d63d9d967beaf8ca74a5ebf09446cbbb436a","modified":1533801771395},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1533840606000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1533840606000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1533840606000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1533840606000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1533840606000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1533840606000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1533840606000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1533840606000},{"_id":"source/_posts/Go单元测试/带有错误的convey.png","hash":"d914c997f2eae5a6465e3b13790f8247f1af294d","modified":1533801771387},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1533840606000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1533840606000},{"_id":"public/search.xml","hash":"f3d51b520a914b7e9488c4862c85e80accf853ea","modified":1533891721182},{"_id":"public/about/index.html","hash":"448e444580a97e8e279c4ce55ce8113059902431","modified":1533891299676},{"_id":"public/categories/index.html","hash":"01ab33700616a8316b138d48337a34eeed77bab5","modified":1533891299676},{"_id":"public/archives/2017/06/index.html","hash":"7b532d2d46339c22fd766aff00b2f9f30136cd57","modified":1533891299676},{"_id":"public/archives/2017/08/index.html","hash":"b8d9a13fc3dfc6ff2e00dd7b567fe3883853d0cf","modified":1533891389881},{"_id":"public/archives/2017/12/index.html","hash":"85cdf5c569b59a75e7e694a0285c7fd1a630b41d","modified":1533891299676},{"_id":"public/categories/分布式/index.html","hash":"8ce576e35df525dd713629a19a7d41f76082561d","modified":1533891299676},{"_id":"public/categories/redis/index.html","hash":"1b8ceee675955a2faaae323ccfcc8bca84391d17","modified":1533891299676},{"_id":"public/categories/微服务/index.html","hash":"e1625aa4c89f07ef1c209efffea7d593affded47","modified":1533891299676},{"_id":"public/tags/Consul/index.html","hash":"b8a17ae659db064bdf14bf9d28a521a931421cd7","modified":1533891299677},{"_id":"public/tags/codis/index.html","hash":"cea2f52c0b4a52585c792627b7929652d2fccb47","modified":1533891299677},{"_id":"public/tags/redis/index.html","hash":"e9c5d678515953a134dd7c34be61164b37fc80ee","modified":1533891299677},{"_id":"public/tags/微服务/index.html","hash":"ba7192b7d073ef1ad7bc00a4c7ea5166af576b98","modified":1533891299677},{"_id":"public/tags/index.html","hash":"de20a20b1844be9e944cd4f80eaa8b9285b05ec4","modified":1533891389906},{"_id":"public/2018/07/18/Go里面的堆栈跟踪/index.html","hash":"2a4b2f453731b90930cfd40fa6a862ced98ab676","modified":1533891721324},{"_id":"public/2018/07/13/Consul安装部署/index.html","hash":"60bdbc6ae4cfd614c8325a4ddc8565b5d59a691e","modified":1533891721324},{"_id":"public/2018/07/12/微服务初探/index.html","hash":"bda6f6e64e8ff297a04f3b24f1c56879b13a1267","modified":1533891721325},{"_id":"public/2017/12/29/redis集群安装/index.html","hash":"5a1d1c9ec21e3eee7789762a4a13be4b9d18d8a4","modified":1533891721325},{"_id":"public/2017/12/12/codis安装及配置/index.html","hash":"6472d9c4c3282c99b38800db05436b7c9f6ca00d","modified":1533891721325},{"_id":"public/2017/08/16/golang-http包/index.html","hash":"92341c71d7807716330d09cafc12632360671d6b","modified":1533891721325},{"_id":"public/2017/06/23/Go单元测试/index.html","hash":"af2af86c1690e9b70250e1347fd7b41643441586","modified":1533891721325},{"_id":"public/2017/06/15/defer和追踪/index.html","hash":"1e1e156d6dce3b477a634d253b16cd8ec6781d97","modified":1533891721325},{"_id":"public/archives/index.html","hash":"9d8efc378e8a832a5767430833d0ce598d824060","modified":1533891721325},{"_id":"public/archives/2017/index.html","hash":"e2d52592cb7889a5eda8eba16bf2afb7625f870c","modified":1533891389907},{"_id":"public/archives/2018/index.html","hash":"2ea4cc34c302151dbfeec6ab69f4791459ec5723","modified":1533891721325},{"_id":"public/archives/2018/07/index.html","hash":"e5f4de2240cf98f1ed235637cd2b3330e1f62737","modified":1533891299677},{"_id":"public/categories/Golang/index.html","hash":"6e8d098b560e206e6297ef6f9f6530d89f80dc28","modified":1533891389907},{"_id":"public/index.html","hash":"5abe146f409dadd8832ec7e6c574e19e1ad3d75b","modified":1533891721325},{"_id":"public/tags/golang/index.html","hash":"9613496d89343268a4fac3519d802fe0d0bce2a4","modified":1533891389907},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1533891299682},{"_id":"public/favicon.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533891299683},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1533891299683},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1533891299683},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1533891299683},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1533891299683},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1533891299683},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1533891299683},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1533891299683},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1533891299683},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1533891299683},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1533891299683},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1533891299683},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1533891299683},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1533891299683},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1533891299683},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1533891299683},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1533891299683},{"_id":"public/img/avatar.png","hash":"5ef95c396e834a400d27962eae45f470d316c045","modified":1533891299683},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1533891299683},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1533891299684},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1533891299684},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1533891299685},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1533891299685},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1533891299685},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1533891299685},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1533891299685},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1533891299685},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1533891299685},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1533891299685},{"_id":"public/2017/06/23/Go单元测试/更新.png","hash":"0a6af4e6cc8d9a0df3c2de02f56ec6b7aab86350","modified":1533891299685},{"_id":"public/2017/12/12/codis安装及配置/addgroup.jpg","hash":"16f4e64701269a26b89938c17c47b23a2a70c2b1","modified":1533891299685},{"_id":"public/2017/12/12/codis安装及配置/rebalance_slots.jpg","hash":"6b6a09292ffe794822259166bc68857539676baf","modified":1533891299685},{"_id":"public/2018/07/18/Go里面的堆栈跟踪/Figure1.png","hash":"2c5aba8a18845a8325731b696d206a63a2faebe3","modified":1533891299685},{"_id":"public/2018/07/18/Go里面的堆栈跟踪/Figure2.png","hash":"646e65ea99e7c034d6dd490d05d7eff5e8ef075e","modified":1533891299685},{"_id":"public/2018/07/18/Go里面的堆栈跟踪/Figure3.png","hash":"e468947778d213e89ee5eb71367b6853cd4f8e6b","modified":1533891299685},{"_id":"public/2018/07/13/Consul安装部署/member_dev.png","hash":"a2753b83497b22fc988e62bebd94a97262557b94","modified":1533891299685},{"_id":"public/2018/07/13/Consul安装部署/ui_1.png","hash":"8b5ceafb840dddf081016e8d1066c6fd868496fb","modified":1533891299685},{"_id":"public/2018/07/13/Consul安装部署/ui_2.png","hash":"ae5c3eaadb8a52a521b77e8763109fd42fc1ba0a","modified":1533891299685},{"_id":"public/2018/07/13/Consul安装部署/ui_3.png","hash":"e91c6d26058bdc1e98d6452c7c61b0d48b4ad56e","modified":1533891299686},{"_id":"public/2018/07/13/Consul安装部署/ui_dev.png","hash":"cee3879e0a41074f817540931994174c9a10e052","modified":1533891299686},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1533891300145},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1533891300147},{"_id":"public/2018/07/12/微服务初探/客户端服务发现.png","hash":"069cbc7ddea50d749cdaace2ca287b025e54079e","modified":1533891300147},{"_id":"public/2018/07/12/微服务初探/服务端服务发现.png","hash":"96aef90daba8cfe772f1cc676630c9b58be2a8ad","modified":1533891300147},{"_id":"public/2018/07/13/Consul安装部署/candidate_146.png","hash":"cc438d8d2b5587dfbbda5aa6491467e8ec2f2494","modified":1533891300147},{"_id":"public/2018/07/13/Consul安装部署/consul_dev.png","hash":"e47c057999e1e3e489970a7a9b4d17b812e849b4","modified":1533891300147},{"_id":"public/2018/07/13/Consul安装部署/consul架构图.png","hash":"395f68f0c6e83e0dd764d1b39f2bfb3cc7048f60","modified":1533891300147},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1533891300173},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1533891300173},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1533891300173},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1533891300173},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1533891300173},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1533891300173},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1533891300173},{"_id":"public/css/style.css","hash":"689bb5bd04a0693814432d971e50a5652d4d6631","modified":1533891300173},{"_id":"public/2018/07/13/Consul安装部署/leader_52.png","hash":"0ac3d63d9d967beaf8ca74a5ebf09446cbbb436a","modified":1533891300174},{"_id":"public/2017/06/23/Go单元测试/带有错误的convey.png","hash":"d914c997f2eae5a6465e3b13790f8247f1af294d","modified":1533891300176},{"_id":"source/_posts/Go性能分析工具/analyze.png","hash":"f96ca606575ee276cb081abd3f99b688ee5ea5c2","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/client_pprof.png","hash":"568f4e4654fc73e21c56660119a86272898a60d0","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/debug_pprof.png","hash":"a234b25fa6d3601aacd586b3c00285181970b101","modified":1533801771387},{"_id":"source/_posts/Go性能分析工具/index.html","hash":"000a2b4edde517fcf47f576c343e89f9203b84e1","modified":1533801771391},{"_id":"source/_posts/Go性能分析工具/profile001.svg","hash":"79e6a5da25ef5b692cf1e2a1dc670eade3fda387","modified":1533801771391},{"_id":"source/_posts/Go性能分析工具/fire1.png","hash":"0fcbc421f8d21af0a036e62b8ce8399631a2b358","modified":1533801771391},{"_id":"source/_posts/Go性能分析工具/sum&cum&flat.png","hash":"ce71dadfb8ac37c0e81e65d5d935eeaed6890f01","modified":1533801771391},{"_id":"source/_posts/Go性能分析工具.md","hash":"d0aed8a603800c913817747269d3465dfbeeb877","modified":1533891380542},{"_id":"public/archives/2018/08/index.html","hash":"3c46b3a85c97d69d1895c930cebf210663981b4b","modified":1533891389909},{"_id":"public/2017/08/23/Go性能分析工具/index.html","hash":"006eef46a760725e0658361e328761903718bef7","modified":1533891721325},{"_id":"public/2018/08/10/Go性能分析工具/index/index.html","hash":"bfe197ed008b5aa9138e67ec51d70110eaf9d8e4","modified":1533891389909},{"_id":"public/2017/08/23/Go性能分析工具/analyze.png","hash":"f96ca606575ee276cb081abd3f99b688ee5ea5c2","modified":1533891389910},{"_id":"public/2017/08/23/Go性能分析工具/client_pprof.png","hash":"568f4e4654fc73e21c56660119a86272898a60d0","modified":1533891389910},{"_id":"public/2017/08/23/Go性能分析工具/debug_pprof.png","hash":"a234b25fa6d3601aacd586b3c00285181970b101","modified":1533891389910},{"_id":"public/2017/08/23/Go性能分析工具/profile001.svg","hash":"79e6a5da25ef5b692cf1e2a1dc670eade3fda387","modified":1533891389910},{"_id":"public/2017/08/23/Go性能分析工具/fire1.png","hash":"0fcbc421f8d21af0a036e62b8ce8399631a2b358","modified":1533891389911},{"_id":"public/2017/08/23/Go性能分析工具/sum&cum&flat.png","hash":"ce71dadfb8ac37c0e81e65d5d935eeaed6890f01","modified":1533891389911}],"Category":[{"name":"分布式","_id":"cjknr9x3f0004u5n9iv09teks"},{"name":"Golang","_id":"cjknr9x3k000au5n9sn1f4jd9"},{"name":"redis","_id":"cjknr9x3u000qu5n9tmfuejfl"},{"name":"微服务","_id":"cjknr9x3v000yu5n9i2409m4y"}],"Data":[],"Page":[{"title":"about","date":"2018-08-10T08:14:18.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-08-10 16:14:18\n---\n","updated":"2018-08-10T08:14:18.664Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjknr9x3b0001u5n9o750kka8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-08-09T09:17:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-09 17:17:20\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2018-08-09T09:19:48.904Z","path":"categories/index.html","comments":1,"_id":"cjknr9x3e0003u5n9knkpqvge","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-09T09:17:17.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-09 17:17:17\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2018-08-09T09:19:37.968Z","path":"tags/index.html","comments":1,"_id":"cjknr9x3h0007u5n96b5hl1xg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Consul安装部署","date":"2018-07-13T07:45:07.000Z","_content":"\n# 什么是Consul\n\n- 是一个服务管理软件。\n- 支持多数据中心下，分布式高可用的，服务发现和配置共享。\n- consul支持健康检查，允许存储键值对。\n- 一致性协议采用 Raft 算法,用来保证服务的高可用.\n- 成员管理和消息广播 采用GOSSIP协议，支持ACL访问控制。\n\n**ACL技术**\n\n在路由器中被广泛采用，它是一种基于包过滤的流控制技术。控制列表通过把源地址、目的地址及端口号作为数据包检查的基本元素，并可以规定符合条件的数据包是否允许通过。\n\n**gossip就是p2p协议。**\n\n他主要要做的事情是，去中心化。\n这个协议就是模拟人类中传播谣言的行为而来。首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。\n\n**什么是强一致性协议？**\n\n按照某一顺序串行执行存储对象读写操作， 更新存储对象之后， 后续访问总是读到最新值。 假如进程A先更新了存储对象，存储系统保证后续A,B,C进程的读取操作都将返回最新值。强一致性模型有几种常见实现方法， 主从同步复制， 以及quorum复制等。\n\nConsul is opinionated in its usage while Serf is a more flexible and general purpose tool. In CAP terms, Consul uses a CP architecture, favoring consistency over availability.\n\n[官方文档地址](https://www.consul.io/intro/vs/serf.html)\n\n说明consul是cp的，并不是网上有些文章说的是ca模式\n\n下面表格对consul 、zookeeper、 etcd、 euerka做了对比\n\n| Feature              | Consul                 | zookeeper             | etcd              | euerka                       |\n| -------------------- | ---------------------- | --------------------- | ----------------- | ---------------------------- |\n| 服务健康检查         | 服务状态，内存，硬盘等 | (弱)长连接，keepalive | 连接心跳          | 可配支持                     |\n| 多数据中心           | 支持                   | —                     | —                 | —                            |\n| kv存储服务           | 支持                   | 支持                  | 支持              | —                            |\n| 一致性               | raft                   | paxos                 | raft              | —                            |\n| cap                  | cp                     | cp                    | cp                | ap                           |\n| 使用接口(多语言能力) | 支持http和dns          | 客户端                | http/grpc         | http（sidecar）              |\n| watch支持            | 全量/支持long polling  | 支持                  | 支持 long polling | 支持 long polling/大部分增量 |\n| 自身监控             | metrics                | —                     | metrics           | metrics                      |\n| 安全                 | acl /https             | acl                   | https支持（弱）   | —                            |\n| spring cloud集成     | 已支持                 | 已支持                | 已支持            | 已支持                       |\n\n# Consul安装\n\n安装Consul,找到适合你系统的包下载他.Consul打包为一个’Zip’文件.[前往下载](https://www.consul.io/downloads.html)\n\n下载后解开压缩包.拷贝Consul到你的PATH路径中,在Unix系统中`/bin`和`/usr/local/bin`是通常的安装目录.根据你是想为单个用户安装还是给整个系统安装来选择.在Windows系统中有可以安装到`%PATH%`的路径中.\n\n## 验证安装\n\n完成安装后,通过打开一个新终端窗口检查`consul`安装是否成功.通过执行 `consul`你应该看到类似下面的输出\n\n```\n[root@iZbp14ouog5ocoeakj39q1Z ~]# consul\nUsage: consul [--version] [--help] <command> [<args>]\n\nAvailable commands are:\n    agent          Runs a Consul agent\n    catalog        Interact with the catalog\n    connect        Interact with Consul Connect\n    event          Fire a new event\n    exec           Executes a command on Consul nodes\n    force-leave    Forces a member of the cluster to enter the \"left\" state\n    info           Provides debugging information for operators.\n    intention      Interact with Connect service intentions\n    join           Tell Consul agent to join cluster\n    keygen         Generates a new encryption key\n    keyring        Manages gossip layer encryption keys\n    kv             Interact with the key-value store\n    leave          Gracefully leaves the Consul cluster and shuts down\n    lock           Execute a command holding a lock\n    maint          Controls node or service maintenance mode\n    members        Lists the members of a Consul cluster\n    monitor        Stream logs from a Consul agent\n    operator       Provides cluster-level tools for Consul operators\n    reload         Triggers the agent to reload configuration files\n    rtt            Estimates network round trip time between nodes\n    snapshot       Saves, restores and inspects snapshots of Consul server state\n    validate       Validate config files/directories\n    version        Prints the Consul version\n    watch          Watch for changes in Consul\n```\n\n如果你得到一个`consul not be found`的错误,你的`PATH`可能没有正确设置.请返回检查你的`consul`的安装路径是否包含在`PATH`中.\n\n## consule参数的介绍\n\n### consul 术语\n\n首先介绍下在 consul 中会经常见到的术语：\n\n- `node`：节点，需要 consul 注册发现或配置管理的服务器。在一个集群中必须是唯一的，默认是该节点的主机名\n- `agent`：consul 中的核心程序，它将以守护进程的方式在各个节点运行，有 client 和 server 启动模式。每个 agent 维护一套服务和注册发现以及健康信息。\n- `client`：agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0\n- `server`：agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。\n- `datacenter`：数据中心，私有的，低延迟的和高带宽的网络环境。一般的多个数据中心之间的数据是不会被复制的，但可用过 [ACL replication](https://www.consul.io/docs/guides/acl.html#outages-and-acl-replication) 或使用外部工具 [onsul-replicate](https://github.com/hashicorp/consul-replicate)。\n- `Consensus`，[共识协议](https://www.consul.io/docs/internals/consensus.html)，使用它来协商选出 leader。\n- `Gossip`：consul 是建立在 [Serf](https://www.serf.io/)，它提供完整的 [gossip protocol](https://www.consul.io/docs/internals/gossip.html)，[维基百科](https://en.wikipedia.org/wiki/Gossip_protocol)。\n- `LAN Gossip`，Lan gossip 池，包含位于同一局域网或数据中心上的节点。\n- `WAN Gossip`，只包含 server 的 WAN Gossip 池，这些服务器主要位于不同的数据中心，通常通过互联网或广域网进行通信。\n- `members`：成员，对 consul 成员的称呼。提供会员资格，故障检测和事件广播。\n- `-bootstrap-expect` ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用\n- `-bind`：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0\n- `-ui-dir`： 提供存放web ui资源的路径，该目录必须是可读的，**1.2中是直接使用-ui参数就可以**\n- `-rejoin`：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。\n- `-config-dir`：：配置文件目录，里面所有以.json结尾的文件都会被加载\n\n### consul 端口说明\n\nconsul 内使用了很多端口，理解这些端口的用处对你理解 consul 架构很有帮助：\n\n| 端口         | 说明                                                         |\n| ------------ | ------------------------------------------------------------ |\n| TCP/8300     | 8300 端口用于服务器节点。客户端通过该端口 RPC 协议调用服务端节点。服务器节点之间相互调用 |\n| TCP/UDP/8301 | 8301 端口用于单个数据中心所有节点之间的互相通信，即对 LAN 池信息的同步。它使得整个数据中心能够自动发现服务器地址，分布式检测节点故障，事件广播（如领导选举事件）。 |\n| TCP/UDP/8302 | 8302 端口用于单个或多个数据中心之间的服务器节点的信息同步，即对 WAN 池信息的同步。它针对互联网的高延迟进行了优化，能够实现跨数据中心请求。 |\n| 8500         | 8500 端口基于 HTTP 协议，用于 API 接口或 WEB UI 访问。       |\n| 8600         | 8600 端口作为 DNS 服务器，它使得我们可以通过节点名查询节点信息。 |\n\n# Consul运行\n\n## 开发模式运行consul\n\n![](Consul安装部署/consul_dev.png)\n\n- 查看集群成员\n\n新开一个终端窗口运行`consul members`, 你可以看到Consul集群的成员.\n\n![](Consul安装部署/member_dev.png)\n\n- 浏览器查看webUI界面\n\n  浏览器中输出serverip:8500,会出现consul的管理webUI\n![](/home/zhaohq/blog/hexo/source/_posts/image/Consul安装部署/ui_dev.png)\n\n## 生产环境运行consul\n\n### 启动三台server服务器\n\n agent可以运行为server或client模式.每个数据中心至少必须拥有一台server . 建议在一个集群中有3或者5个server.部署单一的server,在出现失败时会不可避免的造成数据丢失.\n\n```\n其他的agent运行为client模式.一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行. \n```\n\n这里启动三个agent server，三台机器的地址分别是\n\n```\n10.174.96.52    s1 \n10.173.224.146  s2\n10.173.224.74   s3\n```\n\n必须有一个初始节点，且手动指定为leader，然后开启其它server节点，让它们加入集群。 最后初始节点下线，重新加入集群，参与选举。\n\n我们手动指定10.174.96.52为leader,这种方式，`-bootstrap-expect 3` 期待三个 server 加入才能完成 consul 的引导。\n\n```\nconsul agent -server -bootstrap-expect 3 -data-dir /tmp/consul -node=s1 -bind=10.174.96.52 -ui -client 0.0.0.0\n```\n\n继续添加 server2、server3：\n\n```\nconsul agent -server  -data-dir /tmp/consul -node=s2 -bind=10.173.224.146 -ui -join 10.174.96.52\n\nconsul agent -server  -data-dir /tmp/consul -node=s3 -bind=10.173.224.74 -ui  -join 10.174.96.52\n```\n\n- `-data-dir`：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在\n- `-join`：将agent加入到集群\n\n**此时10.174.96.52显示的信息是，当146主机和74主机加入到集群后，s1就被选举为leader**\n![](Consul安装部署/leader_52.png)\n\n**10.173.224.146加入到集群中后显示的信息**：\n![](Consul安装部署/candidate_146.png)\n\n**查看webUI**\n![](Consul安装部署/ui_1.png)\n\n查看三个server的名称\n![](Consul安装部署/ui_2.png)\n\n### 将新服务服务注册到consul\n\nconsul 支持两种服务发现的方式：\n\n1. 通过 HTTP API 方式，这种方式需要额外编程，适用于不安装 consul agent 的情况，[文档地址](https://www.consul.io/api/catalog.html)。\n2. 通过 consul agent 配置的方式，agent 启动的时候会读取一个配置文件目录，通过配置进行服务的发现，[文档地址](https://www.consul.io/docs/agent/services.html)。\n\n这里介绍第二种方式，通过配置文件来进行服务发现。这里就需要用到我们的 client 服务器啦。\n\n首先，用 Go 写一个简单的 HTTP 服务器：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc HandleExample(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"hello man\"))\n}\n\nfunc HandleHealth(w http.ResponseWriter, r *http.Request) {\n    fmt.Println(\"health check!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", HandleExample)\n    http.HandleFunc(\"/health\", HandleHealth)\n\n    fmt.Println(\"listen on :9000\")\n    http.ListenAndServe(\":9000\", nil)\n}\n```\n\n然后编辑一个配置文件 `/etc/consul.d/web.json`：\n\n```json\n{\n    \"service\":\n    {\n        \"name\": \"web\",\n        \"tags\": [\"primary\"],\n        \"address\": \"10.174.96.52\",\n        \"port\": 9000,\n        \"checks\": [\n        {\n            \"http\": \"http://localhost:9000/health\",\n            \"interval\": \"10s\"\n        }]\n    }\n}\n```\n![](Consul安装部署/ui_3.png)\n\n- `-config-dir`：配置文件目录，里面所有以.json结尾的文件都会被加载\n\n### 配置共享\n\n由与有了 agent client 和 server 模式的提供，配置共享也变得异常的简单。\n\n在任意节点更新配置数据：\n\n```\n$ consul kv put redis/config 192.168.99.133\nSuccess! Data written to: redis/config\n```\n\n整个集群均会自动更新，在 s1 节点查看数据：\n\n```\n$ consul kv get redis/config\n192.168.99.133\n```\n\n## 断开连接\n\n你可以使用`Ctrl-C` 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.\n\n在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.\n\n此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成[一致性协议](https://www.consul.io/docs/internals/consensus.html).\n\n查看[这里](https://www.consul.io/docs/internals/consensus.html)了解添加和移除server.\n\n## 总结\n\n一个consul agent就是一个独立的程序。一个长时间运行的守护进程，运行在concul集群中的每个节点上。\n\n启动一个consul agent ，只是启动一个孤立的node，如果想知道集群中的其他节点，应该将consul agent加入到集群中去 cluster。\n\n**agent有两种模式：server与client。**\n\n- server模式包含了一致性的工作：保证一致性和可用性（在部分失败的情况下），响应RPC，同步数据到其他节点代理。\n- client 模式用于与server进行通信，转发RPC到服务的代理agent，它仅保存自身的少量一些状态，是非常轻量化的东西。本身是相对无状态的。\n\nagent除去设置server/client模式、数据路径之外，还最好设置node的名称和ip。\n\n**一张经典的consul架构图片：**\n\n![](Consul安装部署/consul架构图.png)\n\n- LAN gossip pool包含了同一局域网内所有节点，包括server与client。这基本上是位于同一个数据中心DC。\n- WAN gossip pool一般仅包含server，将跨越多个DC数据中心，通过互联网或广域网进行通信。\n- Leader服务器负责所有的RPC请求，查询并相应。所以其他服务器收到client的RPC请求时，会转发到leader服务器。\n\n# 参考：\n\n[consul 支持多数据中心的服务发现与配置共享工具](https://deepzz.com/post/the-consul-of-discovery-and-configure-services.html)\n\n[consul入门](https://blog.csdn.net/viewcode/article/details/45915179)\n\n[Consul使用手册](http://www.liangxiansen.cn/2017/04/06/consul)","source":"_posts/Consul安装部署.md","raw":"---\ntitle: Consul安装部署\ndate: 2018-07-13 15:45:07\ntags: Consul\ncategories: 分布式\n---\n\n# 什么是Consul\n\n- 是一个服务管理软件。\n- 支持多数据中心下，分布式高可用的，服务发现和配置共享。\n- consul支持健康检查，允许存储键值对。\n- 一致性协议采用 Raft 算法,用来保证服务的高可用.\n- 成员管理和消息广播 采用GOSSIP协议，支持ACL访问控制。\n\n**ACL技术**\n\n在路由器中被广泛采用，它是一种基于包过滤的流控制技术。控制列表通过把源地址、目的地址及端口号作为数据包检查的基本元素，并可以规定符合条件的数据包是否允许通过。\n\n**gossip就是p2p协议。**\n\n他主要要做的事情是，去中心化。\n这个协议就是模拟人类中传播谣言的行为而来。首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。\n\n**什么是强一致性协议？**\n\n按照某一顺序串行执行存储对象读写操作， 更新存储对象之后， 后续访问总是读到最新值。 假如进程A先更新了存储对象，存储系统保证后续A,B,C进程的读取操作都将返回最新值。强一致性模型有几种常见实现方法， 主从同步复制， 以及quorum复制等。\n\nConsul is opinionated in its usage while Serf is a more flexible and general purpose tool. In CAP terms, Consul uses a CP architecture, favoring consistency over availability.\n\n[官方文档地址](https://www.consul.io/intro/vs/serf.html)\n\n说明consul是cp的，并不是网上有些文章说的是ca模式\n\n下面表格对consul 、zookeeper、 etcd、 euerka做了对比\n\n| Feature              | Consul                 | zookeeper             | etcd              | euerka                       |\n| -------------------- | ---------------------- | --------------------- | ----------------- | ---------------------------- |\n| 服务健康检查         | 服务状态，内存，硬盘等 | (弱)长连接，keepalive | 连接心跳          | 可配支持                     |\n| 多数据中心           | 支持                   | —                     | —                 | —                            |\n| kv存储服务           | 支持                   | 支持                  | 支持              | —                            |\n| 一致性               | raft                   | paxos                 | raft              | —                            |\n| cap                  | cp                     | cp                    | cp                | ap                           |\n| 使用接口(多语言能力) | 支持http和dns          | 客户端                | http/grpc         | http（sidecar）              |\n| watch支持            | 全量/支持long polling  | 支持                  | 支持 long polling | 支持 long polling/大部分增量 |\n| 自身监控             | metrics                | —                     | metrics           | metrics                      |\n| 安全                 | acl /https             | acl                   | https支持（弱）   | —                            |\n| spring cloud集成     | 已支持                 | 已支持                | 已支持            | 已支持                       |\n\n# Consul安装\n\n安装Consul,找到适合你系统的包下载他.Consul打包为一个’Zip’文件.[前往下载](https://www.consul.io/downloads.html)\n\n下载后解开压缩包.拷贝Consul到你的PATH路径中,在Unix系统中`/bin`和`/usr/local/bin`是通常的安装目录.根据你是想为单个用户安装还是给整个系统安装来选择.在Windows系统中有可以安装到`%PATH%`的路径中.\n\n## 验证安装\n\n完成安装后,通过打开一个新终端窗口检查`consul`安装是否成功.通过执行 `consul`你应该看到类似下面的输出\n\n```\n[root@iZbp14ouog5ocoeakj39q1Z ~]# consul\nUsage: consul [--version] [--help] <command> [<args>]\n\nAvailable commands are:\n    agent          Runs a Consul agent\n    catalog        Interact with the catalog\n    connect        Interact with Consul Connect\n    event          Fire a new event\n    exec           Executes a command on Consul nodes\n    force-leave    Forces a member of the cluster to enter the \"left\" state\n    info           Provides debugging information for operators.\n    intention      Interact with Connect service intentions\n    join           Tell Consul agent to join cluster\n    keygen         Generates a new encryption key\n    keyring        Manages gossip layer encryption keys\n    kv             Interact with the key-value store\n    leave          Gracefully leaves the Consul cluster and shuts down\n    lock           Execute a command holding a lock\n    maint          Controls node or service maintenance mode\n    members        Lists the members of a Consul cluster\n    monitor        Stream logs from a Consul agent\n    operator       Provides cluster-level tools for Consul operators\n    reload         Triggers the agent to reload configuration files\n    rtt            Estimates network round trip time between nodes\n    snapshot       Saves, restores and inspects snapshots of Consul server state\n    validate       Validate config files/directories\n    version        Prints the Consul version\n    watch          Watch for changes in Consul\n```\n\n如果你得到一个`consul not be found`的错误,你的`PATH`可能没有正确设置.请返回检查你的`consul`的安装路径是否包含在`PATH`中.\n\n## consule参数的介绍\n\n### consul 术语\n\n首先介绍下在 consul 中会经常见到的术语：\n\n- `node`：节点，需要 consul 注册发现或配置管理的服务器。在一个集群中必须是唯一的，默认是该节点的主机名\n- `agent`：consul 中的核心程序，它将以守护进程的方式在各个节点运行，有 client 和 server 启动模式。每个 agent 维护一套服务和注册发现以及健康信息。\n- `client`：agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0\n- `server`：agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。\n- `datacenter`：数据中心，私有的，低延迟的和高带宽的网络环境。一般的多个数据中心之间的数据是不会被复制的，但可用过 [ACL replication](https://www.consul.io/docs/guides/acl.html#outages-and-acl-replication) 或使用外部工具 [onsul-replicate](https://github.com/hashicorp/consul-replicate)。\n- `Consensus`，[共识协议](https://www.consul.io/docs/internals/consensus.html)，使用它来协商选出 leader。\n- `Gossip`：consul 是建立在 [Serf](https://www.serf.io/)，它提供完整的 [gossip protocol](https://www.consul.io/docs/internals/gossip.html)，[维基百科](https://en.wikipedia.org/wiki/Gossip_protocol)。\n- `LAN Gossip`，Lan gossip 池，包含位于同一局域网或数据中心上的节点。\n- `WAN Gossip`，只包含 server 的 WAN Gossip 池，这些服务器主要位于不同的数据中心，通常通过互联网或广域网进行通信。\n- `members`：成员，对 consul 成员的称呼。提供会员资格，故障检测和事件广播。\n- `-bootstrap-expect` ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用\n- `-bind`：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0\n- `-ui-dir`： 提供存放web ui资源的路径，该目录必须是可读的，**1.2中是直接使用-ui参数就可以**\n- `-rejoin`：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。\n- `-config-dir`：：配置文件目录，里面所有以.json结尾的文件都会被加载\n\n### consul 端口说明\n\nconsul 内使用了很多端口，理解这些端口的用处对你理解 consul 架构很有帮助：\n\n| 端口         | 说明                                                         |\n| ------------ | ------------------------------------------------------------ |\n| TCP/8300     | 8300 端口用于服务器节点。客户端通过该端口 RPC 协议调用服务端节点。服务器节点之间相互调用 |\n| TCP/UDP/8301 | 8301 端口用于单个数据中心所有节点之间的互相通信，即对 LAN 池信息的同步。它使得整个数据中心能够自动发现服务器地址，分布式检测节点故障，事件广播（如领导选举事件）。 |\n| TCP/UDP/8302 | 8302 端口用于单个或多个数据中心之间的服务器节点的信息同步，即对 WAN 池信息的同步。它针对互联网的高延迟进行了优化，能够实现跨数据中心请求。 |\n| 8500         | 8500 端口基于 HTTP 协议，用于 API 接口或 WEB UI 访问。       |\n| 8600         | 8600 端口作为 DNS 服务器，它使得我们可以通过节点名查询节点信息。 |\n\n# Consul运行\n\n## 开发模式运行consul\n\n![](Consul安装部署/consul_dev.png)\n\n- 查看集群成员\n\n新开一个终端窗口运行`consul members`, 你可以看到Consul集群的成员.\n\n![](Consul安装部署/member_dev.png)\n\n- 浏览器查看webUI界面\n\n  浏览器中输出serverip:8500,会出现consul的管理webUI\n![](/home/zhaohq/blog/hexo/source/_posts/image/Consul安装部署/ui_dev.png)\n\n## 生产环境运行consul\n\n### 启动三台server服务器\n\n agent可以运行为server或client模式.每个数据中心至少必须拥有一台server . 建议在一个集群中有3或者5个server.部署单一的server,在出现失败时会不可避免的造成数据丢失.\n\n```\n其他的agent运行为client模式.一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行. \n```\n\n这里启动三个agent server，三台机器的地址分别是\n\n```\n10.174.96.52    s1 \n10.173.224.146  s2\n10.173.224.74   s3\n```\n\n必须有一个初始节点，且手动指定为leader，然后开启其它server节点，让它们加入集群。 最后初始节点下线，重新加入集群，参与选举。\n\n我们手动指定10.174.96.52为leader,这种方式，`-bootstrap-expect 3` 期待三个 server 加入才能完成 consul 的引导。\n\n```\nconsul agent -server -bootstrap-expect 3 -data-dir /tmp/consul -node=s1 -bind=10.174.96.52 -ui -client 0.0.0.0\n```\n\n继续添加 server2、server3：\n\n```\nconsul agent -server  -data-dir /tmp/consul -node=s2 -bind=10.173.224.146 -ui -join 10.174.96.52\n\nconsul agent -server  -data-dir /tmp/consul -node=s3 -bind=10.173.224.74 -ui  -join 10.174.96.52\n```\n\n- `-data-dir`：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在\n- `-join`：将agent加入到集群\n\n**此时10.174.96.52显示的信息是，当146主机和74主机加入到集群后，s1就被选举为leader**\n![](Consul安装部署/leader_52.png)\n\n**10.173.224.146加入到集群中后显示的信息**：\n![](Consul安装部署/candidate_146.png)\n\n**查看webUI**\n![](Consul安装部署/ui_1.png)\n\n查看三个server的名称\n![](Consul安装部署/ui_2.png)\n\n### 将新服务服务注册到consul\n\nconsul 支持两种服务发现的方式：\n\n1. 通过 HTTP API 方式，这种方式需要额外编程，适用于不安装 consul agent 的情况，[文档地址](https://www.consul.io/api/catalog.html)。\n2. 通过 consul agent 配置的方式，agent 启动的时候会读取一个配置文件目录，通过配置进行服务的发现，[文档地址](https://www.consul.io/docs/agent/services.html)。\n\n这里介绍第二种方式，通过配置文件来进行服务发现。这里就需要用到我们的 client 服务器啦。\n\n首先，用 Go 写一个简单的 HTTP 服务器：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc HandleExample(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"hello man\"))\n}\n\nfunc HandleHealth(w http.ResponseWriter, r *http.Request) {\n    fmt.Println(\"health check!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", HandleExample)\n    http.HandleFunc(\"/health\", HandleHealth)\n\n    fmt.Println(\"listen on :9000\")\n    http.ListenAndServe(\":9000\", nil)\n}\n```\n\n然后编辑一个配置文件 `/etc/consul.d/web.json`：\n\n```json\n{\n    \"service\":\n    {\n        \"name\": \"web\",\n        \"tags\": [\"primary\"],\n        \"address\": \"10.174.96.52\",\n        \"port\": 9000,\n        \"checks\": [\n        {\n            \"http\": \"http://localhost:9000/health\",\n            \"interval\": \"10s\"\n        }]\n    }\n}\n```\n![](Consul安装部署/ui_3.png)\n\n- `-config-dir`：配置文件目录，里面所有以.json结尾的文件都会被加载\n\n### 配置共享\n\n由与有了 agent client 和 server 模式的提供，配置共享也变得异常的简单。\n\n在任意节点更新配置数据：\n\n```\n$ consul kv put redis/config 192.168.99.133\nSuccess! Data written to: redis/config\n```\n\n整个集群均会自动更新，在 s1 节点查看数据：\n\n```\n$ consul kv get redis/config\n192.168.99.133\n```\n\n## 断开连接\n\n你可以使用`Ctrl-C` 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.\n\n在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.\n\n此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成[一致性协议](https://www.consul.io/docs/internals/consensus.html).\n\n查看[这里](https://www.consul.io/docs/internals/consensus.html)了解添加和移除server.\n\n## 总结\n\n一个consul agent就是一个独立的程序。一个长时间运行的守护进程，运行在concul集群中的每个节点上。\n\n启动一个consul agent ，只是启动一个孤立的node，如果想知道集群中的其他节点，应该将consul agent加入到集群中去 cluster。\n\n**agent有两种模式：server与client。**\n\n- server模式包含了一致性的工作：保证一致性和可用性（在部分失败的情况下），响应RPC，同步数据到其他节点代理。\n- client 模式用于与server进行通信，转发RPC到服务的代理agent，它仅保存自身的少量一些状态，是非常轻量化的东西。本身是相对无状态的。\n\nagent除去设置server/client模式、数据路径之外，还最好设置node的名称和ip。\n\n**一张经典的consul架构图片：**\n\n![](Consul安装部署/consul架构图.png)\n\n- LAN gossip pool包含了同一局域网内所有节点，包括server与client。这基本上是位于同一个数据中心DC。\n- WAN gossip pool一般仅包含server，将跨越多个DC数据中心，通过互联网或广域网进行通信。\n- Leader服务器负责所有的RPC请求，查询并相应。所以其他服务器收到client的RPC请求时，会转发到leader服务器。\n\n# 参考：\n\n[consul 支持多数据中心的服务发现与配置共享工具](https://deepzz.com/post/the-consul-of-discovery-and-configure-services.html)\n\n[consul入门](https://blog.csdn.net/viewcode/article/details/45915179)\n\n[Consul使用手册](http://www.liangxiansen.cn/2017/04/06/consul)","slug":"Consul安装部署","published":1,"updated":"2018-08-10T08:25:22.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x370000u5n9fx4uq6t6","content":"<h1 id=\"什么是Consul\"><a href=\"#什么是Consul\" class=\"headerlink\" title=\"什么是Consul\"></a>什么是Consul</h1><ul>\n<li>是一个服务管理软件。</li>\n<li>支持多数据中心下，分布式高可用的，服务发现和配置共享。</li>\n<li>consul支持健康检查，允许存储键值对。</li>\n<li>一致性协议采用 Raft 算法,用来保证服务的高可用.</li>\n<li>成员管理和消息广播 采用GOSSIP协议，支持ACL访问控制。</li>\n</ul>\n<p><strong>ACL技术</strong></p>\n<p>在路由器中被广泛采用，它是一种基于包过滤的流控制技术。控制列表通过把源地址、目的地址及端口号作为数据包检查的基本元素，并可以规定符合条件的数据包是否允许通过。</p>\n<p><strong>gossip就是p2p协议。</strong></p>\n<p>他主要要做的事情是，去中心化。<br>这个协议就是模拟人类中传播谣言的行为而来。首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。</p>\n<p><strong>什么是强一致性协议？</strong></p>\n<p>按照某一顺序串行执行存储对象读写操作， 更新存储对象之后， 后续访问总是读到最新值。 假如进程A先更新了存储对象，存储系统保证后续A,B,C进程的读取操作都将返回最新值。强一致性模型有几种常见实现方法， 主从同步复制， 以及quorum复制等。</p>\n<p>Consul is opinionated in its usage while Serf is a more flexible and general purpose tool. In CAP terms, Consul uses a CP architecture, favoring consistency over availability.</p>\n<p><a href=\"https://www.consul.io/intro/vs/serf.html\" target=\"_blank\" rel=\"noopener\">官方文档地址</a></p>\n<p>说明consul是cp的，并不是网上有些文章说的是ca模式</p>\n<p>下面表格对consul 、zookeeper、 etcd、 euerka做了对比</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Consul</th>\n<th>zookeeper</th>\n<th>etcd</th>\n<th>euerka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务健康检查</td>\n<td>服务状态，内存，硬盘等</td>\n<td>(弱)长连接，keepalive</td>\n<td>连接心跳</td>\n<td>可配支持</td>\n</tr>\n<tr>\n<td>多数据中心</td>\n<td>支持</td>\n<td>—</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>kv存储服务</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>—</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>raft</td>\n<td>paxos</td>\n<td>raft</td>\n<td>—</td>\n</tr>\n<tr>\n<td>cap</td>\n<td>cp</td>\n<td>cp</td>\n<td>cp</td>\n<td>ap</td>\n</tr>\n<tr>\n<td>使用接口(多语言能力)</td>\n<td>支持http和dns</td>\n<td>客户端</td>\n<td>http/grpc</td>\n<td>http（sidecar）</td>\n</tr>\n<tr>\n<td>watch支持</td>\n<td>全量/支持long polling</td>\n<td>支持</td>\n<td>支持 long polling</td>\n<td>支持 long polling/大部分增量</td>\n</tr>\n<tr>\n<td>自身监控</td>\n<td>metrics</td>\n<td>—</td>\n<td>metrics</td>\n<td>metrics</td>\n</tr>\n<tr>\n<td>安全</td>\n<td>acl /https</td>\n<td>acl</td>\n<td>https支持（弱）</td>\n<td>—</td>\n</tr>\n<tr>\n<td>spring cloud集成</td>\n<td>已支持</td>\n<td>已支持</td>\n<td>已支持</td>\n<td>已支持</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Consul安装\"><a href=\"#Consul安装\" class=\"headerlink\" title=\"Consul安装\"></a>Consul安装</h1><p>安装Consul,找到适合你系统的包下载他.Consul打包为一个’Zip’文件.<a href=\"https://www.consul.io/downloads.html\" target=\"_blank\" rel=\"noopener\">前往下载</a></p>\n<p>下载后解开压缩包.拷贝Consul到你的PATH路径中,在Unix系统中<code>/bin</code>和<code>/usr/local/bin</code>是通常的安装目录.根据你是想为单个用户安装还是给整个系统安装来选择.在Windows系统中有可以安装到<code>%PATH%</code>的路径中.</p>\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>完成安装后,通过打开一个新终端窗口检查<code>consul</code>安装是否成功.通过执行 <code>consul</code>你应该看到类似下面的输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z ~]# consul</span><br><span class=\"line\">Usage: consul [--version] [--help] &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Available commands are:</span><br><span class=\"line\">    agent          Runs a Consul agent</span><br><span class=\"line\">    catalog        Interact with the catalog</span><br><span class=\"line\">    connect        Interact with Consul Connect</span><br><span class=\"line\">    event          Fire a new event</span><br><span class=\"line\">    exec           Executes a command on Consul nodes</span><br><span class=\"line\">    force-leave    Forces a member of the cluster to enter the &quot;left&quot; state</span><br><span class=\"line\">    info           Provides debugging information for operators.</span><br><span class=\"line\">    intention      Interact with Connect service intentions</span><br><span class=\"line\">    join           Tell Consul agent to join cluster</span><br><span class=\"line\">    keygen         Generates a new encryption key</span><br><span class=\"line\">    keyring        Manages gossip layer encryption keys</span><br><span class=\"line\">    kv             Interact with the key-value store</span><br><span class=\"line\">    leave          Gracefully leaves the Consul cluster and shuts down</span><br><span class=\"line\">    lock           Execute a command holding a lock</span><br><span class=\"line\">    maint          Controls node or service maintenance mode</span><br><span class=\"line\">    members        Lists the members of a Consul cluster</span><br><span class=\"line\">    monitor        Stream logs from a Consul agent</span><br><span class=\"line\">    operator       Provides cluster-level tools for Consul operators</span><br><span class=\"line\">    reload         Triggers the agent to reload configuration files</span><br><span class=\"line\">    rtt            Estimates network round trip time between nodes</span><br><span class=\"line\">    snapshot       Saves, restores and inspects snapshots of Consul server state</span><br><span class=\"line\">    validate       Validate config files/directories</span><br><span class=\"line\">    version        Prints the Consul version</span><br><span class=\"line\">    watch          Watch for changes in Consul</span><br></pre></td></tr></table></figure>\n<p>如果你得到一个<code>consul not be found</code>的错误,你的<code>PATH</code>可能没有正确设置.请返回检查你的<code>consul</code>的安装路径是否包含在<code>PATH</code>中.</p>\n<h2 id=\"consule参数的介绍\"><a href=\"#consule参数的介绍\" class=\"headerlink\" title=\"consule参数的介绍\"></a>consule参数的介绍</h2><h3 id=\"consul-术语\"><a href=\"#consul-术语\" class=\"headerlink\" title=\"consul 术语\"></a>consul 术语</h3><p>首先介绍下在 consul 中会经常见到的术语：</p>\n<ul>\n<li><code>node</code>：节点，需要 consul 注册发现或配置管理的服务器。在一个集群中必须是唯一的，默认是该节点的主机名</li>\n<li><code>agent</code>：consul 中的核心程序，它将以守护进程的方式在各个节点运行，有 client 和 server 启动模式。每个 agent 维护一套服务和注册发现以及健康信息。</li>\n<li><code>client</code>：agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</li>\n<li><code>server</code>：agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。</li>\n<li><code>datacenter</code>：数据中心，私有的，低延迟的和高带宽的网络环境。一般的多个数据中心之间的数据是不会被复制的，但可用过 <a href=\"https://www.consul.io/docs/guides/acl.html#outages-and-acl-replication\" target=\"_blank\" rel=\"noopener\">ACL replication</a> 或使用外部工具 <a href=\"https://github.com/hashicorp/consul-replicate\" target=\"_blank\" rel=\"noopener\">onsul-replicate</a>。</li>\n<li><code>Consensus</code>，<a href=\"https://www.consul.io/docs/internals/consensus.html\" target=\"_blank\" rel=\"noopener\">共识协议</a>，使用它来协商选出 leader。</li>\n<li><code>Gossip</code>：consul 是建立在 <a href=\"https://www.serf.io/\" target=\"_blank\" rel=\"noopener\">Serf</a>，它提供完整的 <a href=\"https://www.consul.io/docs/internals/gossip.html\" target=\"_blank\" rel=\"noopener\">gossip protocol</a>，<a href=\"https://en.wikipedia.org/wiki/Gossip_protocol\" target=\"_blank\" rel=\"noopener\">维基百科</a>。</li>\n<li><code>LAN Gossip</code>，Lan gossip 池，包含位于同一局域网或数据中心上的节点。</li>\n<li><code>WAN Gossip</code>，只包含 server 的 WAN Gossip 池，这些服务器主要位于不同的数据中心，通常通过互联网或广域网进行通信。</li>\n<li><code>members</code>：成员，对 consul 成员的称呼。提供会员资格，故障检测和事件广播。</li>\n<li><code>-bootstrap-expect</code> ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</li>\n<li><code>-bind</code>：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li>\n<li><code>-ui-dir</code>： 提供存放web ui资源的路径，该目录必须是可读的，<strong>1.2中是直接使用-ui参数就可以</strong></li>\n<li><code>-rejoin</code>：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</li>\n<li><code>-config-dir</code>：：配置文件目录，里面所有以.json结尾的文件都会被加载</li>\n</ul>\n<h3 id=\"consul-端口说明\"><a href=\"#consul-端口说明\" class=\"headerlink\" title=\"consul 端口说明\"></a>consul 端口说明</h3><p>consul 内使用了很多端口，理解这些端口的用处对你理解 consul 架构很有帮助：</p>\n<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP/8300</td>\n<td>8300 端口用于服务器节点。客户端通过该端口 RPC 协议调用服务端节点。服务器节点之间相互调用</td>\n</tr>\n<tr>\n<td>TCP/UDP/8301</td>\n<td>8301 端口用于单个数据中心所有节点之间的互相通信，即对 LAN 池信息的同步。它使得整个数据中心能够自动发现服务器地址，分布式检测节点故障，事件广播（如领导选举事件）。</td>\n</tr>\n<tr>\n<td>TCP/UDP/8302</td>\n<td>8302 端口用于单个或多个数据中心之间的服务器节点的信息同步，即对 WAN 池信息的同步。它针对互联网的高延迟进行了优化，能够实现跨数据中心请求。</td>\n</tr>\n<tr>\n<td>8500</td>\n<td>8500 端口基于 HTTP 协议，用于 API 接口或 WEB UI 访问。</td>\n</tr>\n<tr>\n<td>8600</td>\n<td>8600 端口作为 DNS 服务器，它使得我们可以通过节点名查询节点信息。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Consul运行\"><a href=\"#Consul运行\" class=\"headerlink\" title=\"Consul运行\"></a>Consul运行</h1><h2 id=\"开发模式运行consul\"><a href=\"#开发模式运行consul\" class=\"headerlink\" title=\"开发模式运行consul\"></a>开发模式运行consul</h2><p><img src=\"/2018/07/13/Consul安装部署/consul_dev.png\" alt=\"\"></p>\n<ul>\n<li>查看集群成员</li>\n</ul>\n<p>新开一个终端窗口运行<code>consul members</code>, 你可以看到Consul集群的成员.</p>\n<p><img src=\"/2018/07/13/Consul安装部署/member_dev.png\" alt=\"\"></p>\n<ul>\n<li><p>浏览器查看webUI界面</p>\n<p>浏览器中输出serverip:8500,会出现consul的管理webUI<br><img src=\"/home/zhaohq/blog/hexo/source/_posts/image/Consul安装部署/ui_dev.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"生产环境运行consul\"><a href=\"#生产环境运行consul\" class=\"headerlink\" title=\"生产环境运行consul\"></a>生产环境运行consul</h2><h3 id=\"启动三台server服务器\"><a href=\"#启动三台server服务器\" class=\"headerlink\" title=\"启动三台server服务器\"></a>启动三台server服务器</h3><p> agent可以运行为server或client模式.每个数据中心至少必须拥有一台server . 建议在一个集群中有3或者5个server.部署单一的server,在出现失败时会不可避免的造成数据丢失.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他的agent运行为client模式.一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行.</span><br></pre></td></tr></table></figure>\n<p>这里启动三个agent server，三台机器的地址分别是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.174.96.52    s1 </span><br><span class=\"line\">10.173.224.146  s2</span><br><span class=\"line\">10.173.224.74   s3</span><br></pre></td></tr></table></figure>\n<p>必须有一个初始节点，且手动指定为leader，然后开启其它server节点，让它们加入集群。 最后初始节点下线，重新加入集群，参与选举。</p>\n<p>我们手动指定10.174.96.52为leader,这种方式，<code>-bootstrap-expect 3</code> 期待三个 server 加入才能完成 consul 的引导。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -server -bootstrap-expect 3 -data-dir /tmp/consul -node=s1 -bind=10.174.96.52 -ui -client 0.0.0.0</span><br></pre></td></tr></table></figure>\n<p>继续添加 server2、server3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -server  -data-dir /tmp/consul -node=s2 -bind=10.173.224.146 -ui -join 10.174.96.52</span><br><span class=\"line\"></span><br><span class=\"line\">consul agent -server  -data-dir /tmp/consul -node=s3 -bind=10.173.224.74 -ui  -join 10.174.96.52</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-data-dir</code>：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</li>\n<li><code>-join</code>：将agent加入到集群</li>\n</ul>\n<p><strong>此时10.174.96.52显示的信息是，当146主机和74主机加入到集群后，s1就被选举为leader</strong><br><img src=\"/2018/07/13/Consul安装部署/leader_52.png\" alt=\"\"></p>\n<p><strong>10.173.224.146加入到集群中后显示的信息</strong>：<br><img src=\"/2018/07/13/Consul安装部署/candidate_146.png\" alt=\"\"></p>\n<p><strong>查看webUI</strong><br><img src=\"/2018/07/13/Consul安装部署/ui_1.png\" alt=\"\"></p>\n<p>查看三个server的名称<br><img src=\"/2018/07/13/Consul安装部署/ui_2.png\" alt=\"\"></p>\n<h3 id=\"将新服务服务注册到consul\"><a href=\"#将新服务服务注册到consul\" class=\"headerlink\" title=\"将新服务服务注册到consul\"></a>将新服务服务注册到consul</h3><p>consul 支持两种服务发现的方式：</p>\n<ol>\n<li>通过 HTTP API 方式，这种方式需要额外编程，适用于不安装 consul agent 的情况，<a href=\"https://www.consul.io/api/catalog.html\" target=\"_blank\" rel=\"noopener\">文档地址</a>。</li>\n<li>通过 consul agent 配置的方式，agent 启动的时候会读取一个配置文件目录，通过配置进行服务的发现，<a href=\"https://www.consul.io/docs/agent/services.html\" target=\"_blank\" rel=\"noopener\">文档地址</a>。</li>\n</ol>\n<p>这里介绍第二种方式，通过配置文件来进行服务发现。这里就需要用到我们的 client 服务器啦。</p>\n<p>首先，用 Go 写一个简单的 HTTP 服务器：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleExample</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"hello man\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleHealth</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"health check!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/\"</span>, HandleExample)</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/health\"</span>, HandleHealth)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"listen on :9000\"</span>)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":9000\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后编辑一个配置文件 <code>/etc/consul.d/web.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"service\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tags\"</span>: [<span class=\"string\">\"primary\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span>: <span class=\"string\">\"10.174.96.52\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"port\"</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"checks\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"http\"</span>: <span class=\"string\">\"http://localhost:9000/health\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"interval\"</span>: <span class=\"string\">\"10s\"</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/13/Consul安装部署/ui_3.png\" alt=\"\"></p>\n<ul>\n<li><code>-config-dir</code>：配置文件目录，里面所有以.json结尾的文件都会被加载</li>\n</ul>\n<h3 id=\"配置共享\"><a href=\"#配置共享\" class=\"headerlink\" title=\"配置共享\"></a>配置共享</h3><p>由与有了 agent client 和 server 模式的提供，配置共享也变得异常的简单。</p>\n<p>在任意节点更新配置数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ consul kv put redis/config 192.168.99.133</span><br><span class=\"line\">Success! Data written to: redis/config</span><br></pre></td></tr></table></figure>\n<p>整个集群均会自动更新，在 s1 节点查看数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ consul kv get redis/config</span><br><span class=\"line\">192.168.99.133</span><br></pre></td></tr></table></figure>\n<h2 id=\"断开连接\"><a href=\"#断开连接\" class=\"headerlink\" title=\"断开连接\"></a>断开连接</h2><p>你可以使用<code>Ctrl-C</code> 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.</p>\n<p>在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.</p>\n<p>此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成<a href=\"https://www.consul.io/docs/internals/consensus.html\" target=\"_blank\" rel=\"noopener\">一致性协议</a>.</p>\n<p>查看<a href=\"https://www.consul.io/docs/internals/consensus.html\" target=\"_blank\" rel=\"noopener\">这里</a>了解添加和移除server.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一个consul agent就是一个独立的程序。一个长时间运行的守护进程，运行在concul集群中的每个节点上。</p>\n<p>启动一个consul agent ，只是启动一个孤立的node，如果想知道集群中的其他节点，应该将consul agent加入到集群中去 cluster。</p>\n<p><strong>agent有两种模式：server与client。</strong></p>\n<ul>\n<li>server模式包含了一致性的工作：保证一致性和可用性（在部分失败的情况下），响应RPC，同步数据到其他节点代理。</li>\n<li>client 模式用于与server进行通信，转发RPC到服务的代理agent，它仅保存自身的少量一些状态，是非常轻量化的东西。本身是相对无状态的。</li>\n</ul>\n<p>agent除去设置server/client模式、数据路径之外，还最好设置node的名称和ip。</p>\n<p><strong>一张经典的consul架构图片：</strong></p>\n<p><img src=\"/2018/07/13/Consul安装部署/consul架构图.png\" alt=\"\"></p>\n<ul>\n<li>LAN gossip pool包含了同一局域网内所有节点，包括server与client。这基本上是位于同一个数据中心DC。</li>\n<li>WAN gossip pool一般仅包含server，将跨越多个DC数据中心，通过互联网或广域网进行通信。</li>\n<li>Leader服务器负责所有的RPC请求，查询并相应。所以其他服务器收到client的RPC请求时，会转发到leader服务器。</li>\n</ul>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://deepzz.com/post/the-consul-of-discovery-and-configure-services.html\" target=\"_blank\" rel=\"noopener\">consul 支持多数据中心的服务发现与配置共享工具</a></p>\n<p><a href=\"https://blog.csdn.net/viewcode/article/details/45915179\" target=\"_blank\" rel=\"noopener\">consul入门</a></p>\n<p><a href=\"http://www.liangxiansen.cn/2017/04/06/consul\" target=\"_blank\" rel=\"noopener\">Consul使用手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是Consul\"><a href=\"#什么是Consul\" class=\"headerlink\" title=\"什么是Consul\"></a>什么是Consul</h1><ul>\n<li>是一个服务管理软件。</li>\n<li>支持多数据中心下，分布式高可用的，服务发现和配置共享。</li>\n<li>consul支持健康检查，允许存储键值对。</li>\n<li>一致性协议采用 Raft 算法,用来保证服务的高可用.</li>\n<li>成员管理和消息广播 采用GOSSIP协议，支持ACL访问控制。</li>\n</ul>\n<p><strong>ACL技术</strong></p>\n<p>在路由器中被广泛采用，它是一种基于包过滤的流控制技术。控制列表通过把源地址、目的地址及端口号作为数据包检查的基本元素，并可以规定符合条件的数据包是否允许通过。</p>\n<p><strong>gossip就是p2p协议。</strong></p>\n<p>他主要要做的事情是，去中心化。<br>这个协议就是模拟人类中传播谣言的行为而来。首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。</p>\n<p><strong>什么是强一致性协议？</strong></p>\n<p>按照某一顺序串行执行存储对象读写操作， 更新存储对象之后， 后续访问总是读到最新值。 假如进程A先更新了存储对象，存储系统保证后续A,B,C进程的读取操作都将返回最新值。强一致性模型有几种常见实现方法， 主从同步复制， 以及quorum复制等。</p>\n<p>Consul is opinionated in its usage while Serf is a more flexible and general purpose tool. In CAP terms, Consul uses a CP architecture, favoring consistency over availability.</p>\n<p><a href=\"https://www.consul.io/intro/vs/serf.html\" target=\"_blank\" rel=\"noopener\">官方文档地址</a></p>\n<p>说明consul是cp的，并不是网上有些文章说的是ca模式</p>\n<p>下面表格对consul 、zookeeper、 etcd、 euerka做了对比</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Consul</th>\n<th>zookeeper</th>\n<th>etcd</th>\n<th>euerka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务健康检查</td>\n<td>服务状态，内存，硬盘等</td>\n<td>(弱)长连接，keepalive</td>\n<td>连接心跳</td>\n<td>可配支持</td>\n</tr>\n<tr>\n<td>多数据中心</td>\n<td>支持</td>\n<td>—</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>kv存储服务</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>—</td>\n</tr>\n<tr>\n<td>一致性</td>\n<td>raft</td>\n<td>paxos</td>\n<td>raft</td>\n<td>—</td>\n</tr>\n<tr>\n<td>cap</td>\n<td>cp</td>\n<td>cp</td>\n<td>cp</td>\n<td>ap</td>\n</tr>\n<tr>\n<td>使用接口(多语言能力)</td>\n<td>支持http和dns</td>\n<td>客户端</td>\n<td>http/grpc</td>\n<td>http（sidecar）</td>\n</tr>\n<tr>\n<td>watch支持</td>\n<td>全量/支持long polling</td>\n<td>支持</td>\n<td>支持 long polling</td>\n<td>支持 long polling/大部分增量</td>\n</tr>\n<tr>\n<td>自身监控</td>\n<td>metrics</td>\n<td>—</td>\n<td>metrics</td>\n<td>metrics</td>\n</tr>\n<tr>\n<td>安全</td>\n<td>acl /https</td>\n<td>acl</td>\n<td>https支持（弱）</td>\n<td>—</td>\n</tr>\n<tr>\n<td>spring cloud集成</td>\n<td>已支持</td>\n<td>已支持</td>\n<td>已支持</td>\n<td>已支持</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Consul安装\"><a href=\"#Consul安装\" class=\"headerlink\" title=\"Consul安装\"></a>Consul安装</h1><p>安装Consul,找到适合你系统的包下载他.Consul打包为一个’Zip’文件.<a href=\"https://www.consul.io/downloads.html\" target=\"_blank\" rel=\"noopener\">前往下载</a></p>\n<p>下载后解开压缩包.拷贝Consul到你的PATH路径中,在Unix系统中<code>/bin</code>和<code>/usr/local/bin</code>是通常的安装目录.根据你是想为单个用户安装还是给整个系统安装来选择.在Windows系统中有可以安装到<code>%PATH%</code>的路径中.</p>\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>完成安装后,通过打开一个新终端窗口检查<code>consul</code>安装是否成功.通过执行 <code>consul</code>你应该看到类似下面的输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z ~]# consul</span><br><span class=\"line\">Usage: consul [--version] [--help] &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Available commands are:</span><br><span class=\"line\">    agent          Runs a Consul agent</span><br><span class=\"line\">    catalog        Interact with the catalog</span><br><span class=\"line\">    connect        Interact with Consul Connect</span><br><span class=\"line\">    event          Fire a new event</span><br><span class=\"line\">    exec           Executes a command on Consul nodes</span><br><span class=\"line\">    force-leave    Forces a member of the cluster to enter the &quot;left&quot; state</span><br><span class=\"line\">    info           Provides debugging information for operators.</span><br><span class=\"line\">    intention      Interact with Connect service intentions</span><br><span class=\"line\">    join           Tell Consul agent to join cluster</span><br><span class=\"line\">    keygen         Generates a new encryption key</span><br><span class=\"line\">    keyring        Manages gossip layer encryption keys</span><br><span class=\"line\">    kv             Interact with the key-value store</span><br><span class=\"line\">    leave          Gracefully leaves the Consul cluster and shuts down</span><br><span class=\"line\">    lock           Execute a command holding a lock</span><br><span class=\"line\">    maint          Controls node or service maintenance mode</span><br><span class=\"line\">    members        Lists the members of a Consul cluster</span><br><span class=\"line\">    monitor        Stream logs from a Consul agent</span><br><span class=\"line\">    operator       Provides cluster-level tools for Consul operators</span><br><span class=\"line\">    reload         Triggers the agent to reload configuration files</span><br><span class=\"line\">    rtt            Estimates network round trip time between nodes</span><br><span class=\"line\">    snapshot       Saves, restores and inspects snapshots of Consul server state</span><br><span class=\"line\">    validate       Validate config files/directories</span><br><span class=\"line\">    version        Prints the Consul version</span><br><span class=\"line\">    watch          Watch for changes in Consul</span><br></pre></td></tr></table></figure>\n<p>如果你得到一个<code>consul not be found</code>的错误,你的<code>PATH</code>可能没有正确设置.请返回检查你的<code>consul</code>的安装路径是否包含在<code>PATH</code>中.</p>\n<h2 id=\"consule参数的介绍\"><a href=\"#consule参数的介绍\" class=\"headerlink\" title=\"consule参数的介绍\"></a>consule参数的介绍</h2><h3 id=\"consul-术语\"><a href=\"#consul-术语\" class=\"headerlink\" title=\"consul 术语\"></a>consul 术语</h3><p>首先介绍下在 consul 中会经常见到的术语：</p>\n<ul>\n<li><code>node</code>：节点，需要 consul 注册发现或配置管理的服务器。在一个集群中必须是唯一的，默认是该节点的主机名</li>\n<li><code>agent</code>：consul 中的核心程序，它将以守护进程的方式在各个节点运行，有 client 和 server 启动模式。每个 agent 维护一套服务和注册发现以及健康信息。</li>\n<li><code>client</code>：agent 以 client 模式启动的节点。在该模式下，该节点会采集相关信息，通过 RPC 的方式向 server 发送。这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</li>\n<li><code>server</code>：agent 以 server 模式启动的节点。一个数据中心中至少包含 1 个 server 节点。不过官方建议使用 3 或 5 个 server 节点组建成集群，以保证高可用且不失效率。server 节点参与 Raft、维护会员信息、注册服务、健康检查等功能。</li>\n<li><code>datacenter</code>：数据中心，私有的，低延迟的和高带宽的网络环境。一般的多个数据中心之间的数据是不会被复制的，但可用过 <a href=\"https://www.consul.io/docs/guides/acl.html#outages-and-acl-replication\" target=\"_blank\" rel=\"noopener\">ACL replication</a> 或使用外部工具 <a href=\"https://github.com/hashicorp/consul-replicate\" target=\"_blank\" rel=\"noopener\">onsul-replicate</a>。</li>\n<li><code>Consensus</code>，<a href=\"https://www.consul.io/docs/internals/consensus.html\" target=\"_blank\" rel=\"noopener\">共识协议</a>，使用它来协商选出 leader。</li>\n<li><code>Gossip</code>：consul 是建立在 <a href=\"https://www.serf.io/\" target=\"_blank\" rel=\"noopener\">Serf</a>，它提供完整的 <a href=\"https://www.consul.io/docs/internals/gossip.html\" target=\"_blank\" rel=\"noopener\">gossip protocol</a>，<a href=\"https://en.wikipedia.org/wiki/Gossip_protocol\" target=\"_blank\" rel=\"noopener\">维基百科</a>。</li>\n<li><code>LAN Gossip</code>，Lan gossip 池，包含位于同一局域网或数据中心上的节点。</li>\n<li><code>WAN Gossip</code>，只包含 server 的 WAN Gossip 池，这些服务器主要位于不同的数据中心，通常通过互联网或广域网进行通信。</li>\n<li><code>members</code>：成员，对 consul 成员的称呼。提供会员资格，故障检测和事件广播。</li>\n<li><code>-bootstrap-expect</code> ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</li>\n<li><code>-bind</code>：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li>\n<li><code>-ui-dir</code>： 提供存放web ui资源的路径，该目录必须是可读的，<strong>1.2中是直接使用-ui参数就可以</strong></li>\n<li><code>-rejoin</code>：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</li>\n<li><code>-config-dir</code>：：配置文件目录，里面所有以.json结尾的文件都会被加载</li>\n</ul>\n<h3 id=\"consul-端口说明\"><a href=\"#consul-端口说明\" class=\"headerlink\" title=\"consul 端口说明\"></a>consul 端口说明</h3><p>consul 内使用了很多端口，理解这些端口的用处对你理解 consul 架构很有帮助：</p>\n<table>\n<thead>\n<tr>\n<th>端口</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP/8300</td>\n<td>8300 端口用于服务器节点。客户端通过该端口 RPC 协议调用服务端节点。服务器节点之间相互调用</td>\n</tr>\n<tr>\n<td>TCP/UDP/8301</td>\n<td>8301 端口用于单个数据中心所有节点之间的互相通信，即对 LAN 池信息的同步。它使得整个数据中心能够自动发现服务器地址，分布式检测节点故障，事件广播（如领导选举事件）。</td>\n</tr>\n<tr>\n<td>TCP/UDP/8302</td>\n<td>8302 端口用于单个或多个数据中心之间的服务器节点的信息同步，即对 WAN 池信息的同步。它针对互联网的高延迟进行了优化，能够实现跨数据中心请求。</td>\n</tr>\n<tr>\n<td>8500</td>\n<td>8500 端口基于 HTTP 协议，用于 API 接口或 WEB UI 访问。</td>\n</tr>\n<tr>\n<td>8600</td>\n<td>8600 端口作为 DNS 服务器，它使得我们可以通过节点名查询节点信息。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Consul运行\"><a href=\"#Consul运行\" class=\"headerlink\" title=\"Consul运行\"></a>Consul运行</h1><h2 id=\"开发模式运行consul\"><a href=\"#开发模式运行consul\" class=\"headerlink\" title=\"开发模式运行consul\"></a>开发模式运行consul</h2><p><img src=\"/2018/07/13/Consul安装部署/consul_dev.png\" alt=\"\"></p>\n<ul>\n<li>查看集群成员</li>\n</ul>\n<p>新开一个终端窗口运行<code>consul members</code>, 你可以看到Consul集群的成员.</p>\n<p><img src=\"/2018/07/13/Consul安装部署/member_dev.png\" alt=\"\"></p>\n<ul>\n<li><p>浏览器查看webUI界面</p>\n<p>浏览器中输出serverip:8500,会出现consul的管理webUI<br><img src=\"/home/zhaohq/blog/hexo/source/_posts/image/Consul安装部署/ui_dev.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"生产环境运行consul\"><a href=\"#生产环境运行consul\" class=\"headerlink\" title=\"生产环境运行consul\"></a>生产环境运行consul</h2><h3 id=\"启动三台server服务器\"><a href=\"#启动三台server服务器\" class=\"headerlink\" title=\"启动三台server服务器\"></a>启动三台server服务器</h3><p> agent可以运行为server或client模式.每个数据中心至少必须拥有一台server . 建议在一个集群中有3或者5个server.部署单一的server,在出现失败时会不可避免的造成数据丢失.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他的agent运行为client模式.一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行.</span><br></pre></td></tr></table></figure>\n<p>这里启动三个agent server，三台机器的地址分别是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.174.96.52    s1 </span><br><span class=\"line\">10.173.224.146  s2</span><br><span class=\"line\">10.173.224.74   s3</span><br></pre></td></tr></table></figure>\n<p>必须有一个初始节点，且手动指定为leader，然后开启其它server节点，让它们加入集群。 最后初始节点下线，重新加入集群，参与选举。</p>\n<p>我们手动指定10.174.96.52为leader,这种方式，<code>-bootstrap-expect 3</code> 期待三个 server 加入才能完成 consul 的引导。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -server -bootstrap-expect 3 -data-dir /tmp/consul -node=s1 -bind=10.174.96.52 -ui -client 0.0.0.0</span><br></pre></td></tr></table></figure>\n<p>继续添加 server2、server3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consul agent -server  -data-dir /tmp/consul -node=s2 -bind=10.173.224.146 -ui -join 10.174.96.52</span><br><span class=\"line\"></span><br><span class=\"line\">consul agent -server  -data-dir /tmp/consul -node=s3 -bind=10.173.224.74 -ui  -join 10.174.96.52</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-data-dir</code>：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</li>\n<li><code>-join</code>：将agent加入到集群</li>\n</ul>\n<p><strong>此时10.174.96.52显示的信息是，当146主机和74主机加入到集群后，s1就被选举为leader</strong><br><img src=\"/2018/07/13/Consul安装部署/leader_52.png\" alt=\"\"></p>\n<p><strong>10.173.224.146加入到集群中后显示的信息</strong>：<br><img src=\"/2018/07/13/Consul安装部署/candidate_146.png\" alt=\"\"></p>\n<p><strong>查看webUI</strong><br><img src=\"/2018/07/13/Consul安装部署/ui_1.png\" alt=\"\"></p>\n<p>查看三个server的名称<br><img src=\"/2018/07/13/Consul安装部署/ui_2.png\" alt=\"\"></p>\n<h3 id=\"将新服务服务注册到consul\"><a href=\"#将新服务服务注册到consul\" class=\"headerlink\" title=\"将新服务服务注册到consul\"></a>将新服务服务注册到consul</h3><p>consul 支持两种服务发现的方式：</p>\n<ol>\n<li>通过 HTTP API 方式，这种方式需要额外编程，适用于不安装 consul agent 的情况，<a href=\"https://www.consul.io/api/catalog.html\" target=\"_blank\" rel=\"noopener\">文档地址</a>。</li>\n<li>通过 consul agent 配置的方式，agent 启动的时候会读取一个配置文件目录，通过配置进行服务的发现，<a href=\"https://www.consul.io/docs/agent/services.html\" target=\"_blank\" rel=\"noopener\">文档地址</a>。</li>\n</ol>\n<p>这里介绍第二种方式，通过配置文件来进行服务发现。这里就需要用到我们的 client 服务器啦。</p>\n<p>首先，用 Go 写一个简单的 HTTP 服务器：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleExample</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"hello man\"</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleHealth</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"health check!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/\"</span>, HandleExample)</span><br><span class=\"line\">    http.HandleFunc(<span class=\"string\">\"/health\"</span>, HandleHealth)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"listen on :9000\"</span>)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":9000\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后编辑一个配置文件 <code>/etc/consul.d/web.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"service\"</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"web\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tags\"</span>: [<span class=\"string\">\"primary\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span>: <span class=\"string\">\"10.174.96.52\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"port\"</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"checks\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"http\"</span>: <span class=\"string\">\"http://localhost:9000/health\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"interval\"</span>: <span class=\"string\">\"10s\"</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/07/13/Consul安装部署/ui_3.png\" alt=\"\"></p>\n<ul>\n<li><code>-config-dir</code>：配置文件目录，里面所有以.json结尾的文件都会被加载</li>\n</ul>\n<h3 id=\"配置共享\"><a href=\"#配置共享\" class=\"headerlink\" title=\"配置共享\"></a>配置共享</h3><p>由与有了 agent client 和 server 模式的提供，配置共享也变得异常的简单。</p>\n<p>在任意节点更新配置数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ consul kv put redis/config 192.168.99.133</span><br><span class=\"line\">Success! Data written to: redis/config</span><br></pre></td></tr></table></figure>\n<p>整个集群均会自动更新，在 s1 节点查看数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ consul kv get redis/config</span><br><span class=\"line\">192.168.99.133</span><br></pre></td></tr></table></figure>\n<h2 id=\"断开连接\"><a href=\"#断开连接\" class=\"headerlink\" title=\"断开连接\"></a>断开连接</h2><p>你可以使用<code>Ctrl-C</code> 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.</p>\n<p>在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.</p>\n<p>此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成<a href=\"https://www.consul.io/docs/internals/consensus.html\" target=\"_blank\" rel=\"noopener\">一致性协议</a>.</p>\n<p>查看<a href=\"https://www.consul.io/docs/internals/consensus.html\" target=\"_blank\" rel=\"noopener\">这里</a>了解添加和移除server.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一个consul agent就是一个独立的程序。一个长时间运行的守护进程，运行在concul集群中的每个节点上。</p>\n<p>启动一个consul agent ，只是启动一个孤立的node，如果想知道集群中的其他节点，应该将consul agent加入到集群中去 cluster。</p>\n<p><strong>agent有两种模式：server与client。</strong></p>\n<ul>\n<li>server模式包含了一致性的工作：保证一致性和可用性（在部分失败的情况下），响应RPC，同步数据到其他节点代理。</li>\n<li>client 模式用于与server进行通信，转发RPC到服务的代理agent，它仅保存自身的少量一些状态，是非常轻量化的东西。本身是相对无状态的。</li>\n</ul>\n<p>agent除去设置server/client模式、数据路径之外，还最好设置node的名称和ip。</p>\n<p><strong>一张经典的consul架构图片：</strong></p>\n<p><img src=\"/2018/07/13/Consul安装部署/consul架构图.png\" alt=\"\"></p>\n<ul>\n<li>LAN gossip pool包含了同一局域网内所有节点，包括server与client。这基本上是位于同一个数据中心DC。</li>\n<li>WAN gossip pool一般仅包含server，将跨越多个DC数据中心，通过互联网或广域网进行通信。</li>\n<li>Leader服务器负责所有的RPC请求，查询并相应。所以其他服务器收到client的RPC请求时，会转发到leader服务器。</li>\n</ul>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://deepzz.com/post/the-consul-of-discovery-and-configure-services.html\" target=\"_blank\" rel=\"noopener\">consul 支持多数据中心的服务发现与配置共享工具</a></p>\n<p><a href=\"https://blog.csdn.net/viewcode/article/details/45915179\" target=\"_blank\" rel=\"noopener\">consul入门</a></p>\n<p><a href=\"http://www.liangxiansen.cn/2017/04/06/consul\" target=\"_blank\" rel=\"noopener\">Consul使用手册</a></p>\n"},{"title":"Go单元测试","date":"2017-06-23T09:33:44.000Z","_content":"\n# 为什么需要单元测试\n\n 开发程序其中很重要的一点是测试，我们如何保证代码的质量，如何保证每个函数是可运行，运行结果是正确的，又如何保证写出来的代码性能是好的，我们知道单元测试的重点在于发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决。对一个包做（单元）测试，需要写一些可以频繁（每次更新后）执行的小块测试单元来检查代码的正确性。于是我们必须写一些 Go 源文件来测试代码。测**试程序必须属于被测试的包**，并且文件名满足这种形式 `*_test.go`，所以测试代码和包中的业务代码是分开的。\n\n Go语言中自带有一个轻量级的测试框架`testing`和自带的`go test`命令来实现单元测试和性能测试，`testing`框架和其他语言中的测试框架类似，你可以基于这个框架写针对相应函数的测试用例。\n\n`_test` 程序不会被普通的 Go 编译器编译，所以当放应用部署到生产环境时它们不会被部署；只有 gotest 会编译所有的程序：普通程序和测试程序。\n\n另外建议安装[gotests](https://github.com/cweill/gotests)插件自动生成测试代码:\n\n```\ngo get -u -v github.com/cweill/gotests/...\n```\n\ngo单元测试的命令是\n\n`go test`\n\ngo test 只会输出错误的信息，想要看详细的信息使用`go test -v`\n\n# Go的自带单元测试的编写\n\n## 1、如何编写测试用例\n\n接下来我们在该目录下面创建两个文件：even.go和oddeven_test.go\n**even.go:**\n\n```\n/*\n用来测试前 100 个整数是否是偶数。这个函数属于 even 包。\n*/\npackage even\nfunc Even(i int) bool {\n\treturn i%2 == 0\n}\nfunc Odd(i int) bool {\n\treturn i%2 != 0\n}\n```\n\n**oddeven_test.go:这是我们的单元测试文件，**\n\n### **1.1测试文件的规则：**\n\n1. 文件名必须是`_test.go`结尾的，这样在执行`go test`的时候才会执行到相应的代码\n2. 你必须import `testing`这个包\n3. 所有的测试用例函数必须是`Test`开头\n4. 测试用例会按照源代码中写的顺序依次执行\n5. 测试函数`TestXxx()`的参数是`testing.T`，我们可以使用该类型来记录错误或者是测试状态\n6. 测试格式：`func TestXxx (t *testing.T)`,`Xxx`部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如`Testintdiv`是错误的函数名。\n7. 函数中通过调用`testing.T`的`Error`, `Errorf`, `FailNow`, `Fatal`, `FatalIf`方法，说明测试不通过，调用`Log`方法用来记录测试的信息。\n\n**oddeven_test.go**\n\n```go\npackage even\nimport \"testing\"\nfunc TestEven(t *testing.T) {\n\tif !Even(10) { //!Even(10)==false,不会向下执行\n\t\tt.Log(\"10 must be even\")\n\t\tt.Fail()\n\t}\n\tif Even(7) {\n\t\tt.Log(\"7 is not even\")\n\t\tt.Fatal()\n\t}\n\tif Even(10) { //Even(10)==true,但是为了测试，让它执行t.Log()和 t.Fail()\n\t\tt.Log(\"Everything OK: 10 is even, just a test to see failed output!\")\n\t\tt.Fail()\n\t}\n}\nfunc TestOdd(t *testing.T) {\n\tif !Odd(11) {\n\t\tt.Log(\" 11 must be odd!\")\n\t\tt.Fail()\n\t}\n\tif Odd(10) {\n\t\tt.Log(\" 10 is not odd!\")\n\t\tt.Fail()\n\t}\n}\n```\n\n**使用go test 运行oddeven_test.go,只会出现错误信息**\n\n> — FAIL: TestEven (0.00s)\n>\n> ```\n> oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!\n> ```\n>\n> FAIL\n> exit status 1\n> FAIL MyStudy/GolangTest/even 0.364s\n\n**使用go test -v，会将详细的信息都打印出来，通过的会有pass标识**\n\n> === RUN TestEven\n> — FAIL: TestEven (0.00s)\n>\n> ```\n> oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!\n> ```\n>\n> === RUN TestOdd\n> — PASS: TestOdd (0.00s)\n> FAIL\n> exit status 1\n> FAIL MyStudy/GolangTest/even 0.397s\n\n### 1.2单元测试的一些通知失败的方法\n\n1）`func (t *T) Fail()`\n\n```\n标记测试函数为失败，然后继续执行（剩下的测试）。\n```\n\n2）`func (t *T) FailNow()`\n\n```\n标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。\n```\n\n3）`func (t *T) Log(args ...interface{})`\n\n```\nargs 被用默认的格式格式化并打印到错误日志中。\n```\n\n4）`func (t *T) Fatal(args ...interface{})`\n\n```\n结合 先执行 3），然后执行 2）的效果。\n```\n\n# GoGonvey框架写单元测试\n\n## 1、GoGonvey框架介绍\n\n Go 语言虽然自带单元测试功能，在 GoConvey 诞生之前也出现了许多第三方辅助库。但没有一个辅助库能够像 GoConvey 这样优雅地书写代码的单元测试，简洁的语法和舒适的界面能够让一个不爱书写单元测试的开发人员从此爱上单元测试。\n\n### 1.1、GoGonvey的优点\n\n1. GoConvey支持Go的本机[`testing`](http://golang.org/pkg/testing/)包。无论是网页界面还是DSL都不需要; 你可以独立使用任何一个。\n2. GoConvey集成后`**go test**`，您可以[在终端中](https://github.com/smartystreets/goconvey/wiki/Execution)继续运行测试[，](https://github.com/smartystreets/goconvey/wiki/Execution)或者使用自动更新Web UI进行测试。\n3. GoConvey还有web UI可以来方便查看代码覆盖率，以及单元测试错误信息\n\n### 1.2、安装GoGonvey\n\n```\ngo get github.com/smartystreets/goconvey\n```\n\n### 1.3、快速开始一个例子\n\n写一个oddeven_goconvey_test.go 文件,将test.go改写成convey形式的\n\n```go\npackage even\n\nimport (\n\t. \"github.com/smartystreets/goconvey/convey\"\n\t\"testing\"\n)\n\nfunc TestEvenConvey(t *testing.T) {\n\tConvey(\"Given some integer with a starting value\", t, func() {\n\t\tConvey(\"When the integer is even\", func() { //第一个Convey需要t参数，以后的不需要了\n\t\t\tConvey(\"10 must be even\", func() {\n\t\t\t\tb := Even(10)\n\t\t\t\tSo(b, ShouldBeTrue)\n\t\t\t})\n\n\t\t\tConvey(\"7 is not even\", func() {\n\t\t\t\tb := Even(7)\n\t\t\t\tSo(b, ShouldBeFalse)\n\t\t\t})\n\n\t\t\tConvey(\"Everything OK: 10 is even, just a test to see failed output!\", func() {\n\t\t\t\tb := Even(10)\n\t\t\t\tSo(b, ShouldBeFalse)\n\t\t\t})\n\n\t\t})\n\t})\n}\n```\n\n 使用 GoConvey 书写单元测试，每个测试用例需要使用Convey函数包裹起来。它接受的第一个参数为 string 类型的描述；第二个参数一般为*testing.T，即本例中的变量 t；第三个参数为不接收任何参数也不返回任何值的函数（习惯以闭包的形式书写）。\n\nConvey语句同样可以无限嵌套，以体现各个测试用例之间的关系，例如TestEvenConvey函数就采用了嵌套的方式体现它们之间的关系。需要注意的是，**只有最外层的Convey需要传入变量 t，内层的嵌套均不需要传入**。\n\n最后，需要使用So语句来对条件进行判断。在本例中，我们只使用了 2 个不同类型的条件判断：ShouldBeTrue和ShouldBeFalse，分别表示值应该为 true、值应该false。\n\n常用的有\n\n1. `ShouldEqual`: 表示值应该想等\n2. `ShouldResemble`: 进行深度相同检查，要有两个值`So(b, ShouldResemble, true)`\n3. `ShouldBeTrue`: 表示值应该为true\n4. `ShouldBeZeroValue`:表示值应该为0\n5. `ShouldNotContainSubstring`:接收2字符串参数并确保第一个不包含第二个字符串。\n6. `ShouldPanic`: 表示值应该panic\n\n有关详细的条件列表，可以参见[官方文档](https://github.com/smartystreets/goconvey/wiki/Assertions)。\n\n### 1.4、运行测试\n\n#### 1.4.1、go test -v运行\n\n现在，可以打开命令行，然后输入`go test -v`来进行测试。由于 GoConvey 兼容 Go 原生的单元测试，因此我们可以直接使用 Go 的命令来执行测试。 \n\n> === RUN TestEvenConvey\n>\n> Given some integer with a starting value\n> When the integer is even\n> 10 must be even .\n> 7 is not even .\n> Everything OK: 10 is even, just a test to see failed output! x\n>\n> Failures: \n>\n> D:/gopath/src/MyStudy/GolangTest/even/oddeven_goconvey_test.go\n>\n> Line 23:\n>\n> ```\n> Expected: false\n> Actual:   true\n> ```\n>\n>  3 total assertions\n>\n> — FAIL: TestEvenConvey (0.00s)\n> FAIL\n> exit status 1\n> FAIL MyStudy/GolangTest/even 0.401s\n\n可以看到给出的信息比go自带的测试包多很多信息\n\n#### 1.4.2、goconvey 运行测试\n\nweb界面查看数据\n\nGoConvey 不仅支持在命令行进行人工调用调试命令，还有非常舒适的 Web 界面提供给开发者来进行自动化的编译测试工作。在项目目录下执行`goconvey` 同时可以打开浏览器查看localhost:8080\n\n![](Go单元测试/带有错误的convey.png)\n\n解析上面图片\n\n### 1.5、GoConvey的一些功能\n\n#### 测试自动运行\n\n 只需保存`.go`![文件或单击图标执行测试](Go单元测试/更新.png)。您的浏览器页面将自动更新。\n\n#### 覆盖报告\n\n可以点击左上角的软件包名称来查看[Go的详细HTML覆盖率报告](http://blog.golang.org/cover#TOC_5.)。\n\n#### 黑暗，光和自定义主题\n\nGoConvey内置了两个主题。（在此页面上[切换主题](javascript:)以尝试！）您还可以使用第三方主题或自己滚动。\n\n#### 暂停，恢复和审查\n\n可以暂停自动测试执行，并查看最近的测试历史，以查看代码在何处，何时以及为什么中断。\n\n在 Web 界面中，您可以设置界面主题，查看完整的测试结果，使用浏览器提醒等实用功能。\n\n#### 其它功能：\n\n1. 自动检测代码变动并编译测试\n2. 半自动化书写测试用例：<http://localhost:8080/composer.html>\n3. 查看测试覆盖率：<http://localhost:8080/reports/>\n4. 临时屏蔽某个包的编译测试","source":"_posts/Go单元测试.md","raw":"---\ntitle: Go单元测试\ndate: 2017-06-23 17:33:44\ntags: golang\ncategories: Golang\n---\n\n# 为什么需要单元测试\n\n 开发程序其中很重要的一点是测试，我们如何保证代码的质量，如何保证每个函数是可运行，运行结果是正确的，又如何保证写出来的代码性能是好的，我们知道单元测试的重点在于发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决。对一个包做（单元）测试，需要写一些可以频繁（每次更新后）执行的小块测试单元来检查代码的正确性。于是我们必须写一些 Go 源文件来测试代码。测**试程序必须属于被测试的包**，并且文件名满足这种形式 `*_test.go`，所以测试代码和包中的业务代码是分开的。\n\n Go语言中自带有一个轻量级的测试框架`testing`和自带的`go test`命令来实现单元测试和性能测试，`testing`框架和其他语言中的测试框架类似，你可以基于这个框架写针对相应函数的测试用例。\n\n`_test` 程序不会被普通的 Go 编译器编译，所以当放应用部署到生产环境时它们不会被部署；只有 gotest 会编译所有的程序：普通程序和测试程序。\n\n另外建议安装[gotests](https://github.com/cweill/gotests)插件自动生成测试代码:\n\n```\ngo get -u -v github.com/cweill/gotests/...\n```\n\ngo单元测试的命令是\n\n`go test`\n\ngo test 只会输出错误的信息，想要看详细的信息使用`go test -v`\n\n# Go的自带单元测试的编写\n\n## 1、如何编写测试用例\n\n接下来我们在该目录下面创建两个文件：even.go和oddeven_test.go\n**even.go:**\n\n```\n/*\n用来测试前 100 个整数是否是偶数。这个函数属于 even 包。\n*/\npackage even\nfunc Even(i int) bool {\n\treturn i%2 == 0\n}\nfunc Odd(i int) bool {\n\treturn i%2 != 0\n}\n```\n\n**oddeven_test.go:这是我们的单元测试文件，**\n\n### **1.1测试文件的规则：**\n\n1. 文件名必须是`_test.go`结尾的，这样在执行`go test`的时候才会执行到相应的代码\n2. 你必须import `testing`这个包\n3. 所有的测试用例函数必须是`Test`开头\n4. 测试用例会按照源代码中写的顺序依次执行\n5. 测试函数`TestXxx()`的参数是`testing.T`，我们可以使用该类型来记录错误或者是测试状态\n6. 测试格式：`func TestXxx (t *testing.T)`,`Xxx`部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如`Testintdiv`是错误的函数名。\n7. 函数中通过调用`testing.T`的`Error`, `Errorf`, `FailNow`, `Fatal`, `FatalIf`方法，说明测试不通过，调用`Log`方法用来记录测试的信息。\n\n**oddeven_test.go**\n\n```go\npackage even\nimport \"testing\"\nfunc TestEven(t *testing.T) {\n\tif !Even(10) { //!Even(10)==false,不会向下执行\n\t\tt.Log(\"10 must be even\")\n\t\tt.Fail()\n\t}\n\tif Even(7) {\n\t\tt.Log(\"7 is not even\")\n\t\tt.Fatal()\n\t}\n\tif Even(10) { //Even(10)==true,但是为了测试，让它执行t.Log()和 t.Fail()\n\t\tt.Log(\"Everything OK: 10 is even, just a test to see failed output!\")\n\t\tt.Fail()\n\t}\n}\nfunc TestOdd(t *testing.T) {\n\tif !Odd(11) {\n\t\tt.Log(\" 11 must be odd!\")\n\t\tt.Fail()\n\t}\n\tif Odd(10) {\n\t\tt.Log(\" 10 is not odd!\")\n\t\tt.Fail()\n\t}\n}\n```\n\n**使用go test 运行oddeven_test.go,只会出现错误信息**\n\n> — FAIL: TestEven (0.00s)\n>\n> ```\n> oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!\n> ```\n>\n> FAIL\n> exit status 1\n> FAIL MyStudy/GolangTest/even 0.364s\n\n**使用go test -v，会将详细的信息都打印出来，通过的会有pass标识**\n\n> === RUN TestEven\n> — FAIL: TestEven (0.00s)\n>\n> ```\n> oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!\n> ```\n>\n> === RUN TestOdd\n> — PASS: TestOdd (0.00s)\n> FAIL\n> exit status 1\n> FAIL MyStudy/GolangTest/even 0.397s\n\n### 1.2单元测试的一些通知失败的方法\n\n1）`func (t *T) Fail()`\n\n```\n标记测试函数为失败，然后继续执行（剩下的测试）。\n```\n\n2）`func (t *T) FailNow()`\n\n```\n标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。\n```\n\n3）`func (t *T) Log(args ...interface{})`\n\n```\nargs 被用默认的格式格式化并打印到错误日志中。\n```\n\n4）`func (t *T) Fatal(args ...interface{})`\n\n```\n结合 先执行 3），然后执行 2）的效果。\n```\n\n# GoGonvey框架写单元测试\n\n## 1、GoGonvey框架介绍\n\n Go 语言虽然自带单元测试功能，在 GoConvey 诞生之前也出现了许多第三方辅助库。但没有一个辅助库能够像 GoConvey 这样优雅地书写代码的单元测试，简洁的语法和舒适的界面能够让一个不爱书写单元测试的开发人员从此爱上单元测试。\n\n### 1.1、GoGonvey的优点\n\n1. GoConvey支持Go的本机[`testing`](http://golang.org/pkg/testing/)包。无论是网页界面还是DSL都不需要; 你可以独立使用任何一个。\n2. GoConvey集成后`**go test**`，您可以[在终端中](https://github.com/smartystreets/goconvey/wiki/Execution)继续运行测试[，](https://github.com/smartystreets/goconvey/wiki/Execution)或者使用自动更新Web UI进行测试。\n3. GoConvey还有web UI可以来方便查看代码覆盖率，以及单元测试错误信息\n\n### 1.2、安装GoGonvey\n\n```\ngo get github.com/smartystreets/goconvey\n```\n\n### 1.3、快速开始一个例子\n\n写一个oddeven_goconvey_test.go 文件,将test.go改写成convey形式的\n\n```go\npackage even\n\nimport (\n\t. \"github.com/smartystreets/goconvey/convey\"\n\t\"testing\"\n)\n\nfunc TestEvenConvey(t *testing.T) {\n\tConvey(\"Given some integer with a starting value\", t, func() {\n\t\tConvey(\"When the integer is even\", func() { //第一个Convey需要t参数，以后的不需要了\n\t\t\tConvey(\"10 must be even\", func() {\n\t\t\t\tb := Even(10)\n\t\t\t\tSo(b, ShouldBeTrue)\n\t\t\t})\n\n\t\t\tConvey(\"7 is not even\", func() {\n\t\t\t\tb := Even(7)\n\t\t\t\tSo(b, ShouldBeFalse)\n\t\t\t})\n\n\t\t\tConvey(\"Everything OK: 10 is even, just a test to see failed output!\", func() {\n\t\t\t\tb := Even(10)\n\t\t\t\tSo(b, ShouldBeFalse)\n\t\t\t})\n\n\t\t})\n\t})\n}\n```\n\n 使用 GoConvey 书写单元测试，每个测试用例需要使用Convey函数包裹起来。它接受的第一个参数为 string 类型的描述；第二个参数一般为*testing.T，即本例中的变量 t；第三个参数为不接收任何参数也不返回任何值的函数（习惯以闭包的形式书写）。\n\nConvey语句同样可以无限嵌套，以体现各个测试用例之间的关系，例如TestEvenConvey函数就采用了嵌套的方式体现它们之间的关系。需要注意的是，**只有最外层的Convey需要传入变量 t，内层的嵌套均不需要传入**。\n\n最后，需要使用So语句来对条件进行判断。在本例中，我们只使用了 2 个不同类型的条件判断：ShouldBeTrue和ShouldBeFalse，分别表示值应该为 true、值应该false。\n\n常用的有\n\n1. `ShouldEqual`: 表示值应该想等\n2. `ShouldResemble`: 进行深度相同检查，要有两个值`So(b, ShouldResemble, true)`\n3. `ShouldBeTrue`: 表示值应该为true\n4. `ShouldBeZeroValue`:表示值应该为0\n5. `ShouldNotContainSubstring`:接收2字符串参数并确保第一个不包含第二个字符串。\n6. `ShouldPanic`: 表示值应该panic\n\n有关详细的条件列表，可以参见[官方文档](https://github.com/smartystreets/goconvey/wiki/Assertions)。\n\n### 1.4、运行测试\n\n#### 1.4.1、go test -v运行\n\n现在，可以打开命令行，然后输入`go test -v`来进行测试。由于 GoConvey 兼容 Go 原生的单元测试，因此我们可以直接使用 Go 的命令来执行测试。 \n\n> === RUN TestEvenConvey\n>\n> Given some integer with a starting value\n> When the integer is even\n> 10 must be even .\n> 7 is not even .\n> Everything OK: 10 is even, just a test to see failed output! x\n>\n> Failures: \n>\n> D:/gopath/src/MyStudy/GolangTest/even/oddeven_goconvey_test.go\n>\n> Line 23:\n>\n> ```\n> Expected: false\n> Actual:   true\n> ```\n>\n>  3 total assertions\n>\n> — FAIL: TestEvenConvey (0.00s)\n> FAIL\n> exit status 1\n> FAIL MyStudy/GolangTest/even 0.401s\n\n可以看到给出的信息比go自带的测试包多很多信息\n\n#### 1.4.2、goconvey 运行测试\n\nweb界面查看数据\n\nGoConvey 不仅支持在命令行进行人工调用调试命令，还有非常舒适的 Web 界面提供给开发者来进行自动化的编译测试工作。在项目目录下执行`goconvey` 同时可以打开浏览器查看localhost:8080\n\n![](Go单元测试/带有错误的convey.png)\n\n解析上面图片\n\n### 1.5、GoConvey的一些功能\n\n#### 测试自动运行\n\n 只需保存`.go`![文件或单击图标执行测试](Go单元测试/更新.png)。您的浏览器页面将自动更新。\n\n#### 覆盖报告\n\n可以点击左上角的软件包名称来查看[Go的详细HTML覆盖率报告](http://blog.golang.org/cover#TOC_5.)。\n\n#### 黑暗，光和自定义主题\n\nGoConvey内置了两个主题。（在此页面上[切换主题](javascript:)以尝试！）您还可以使用第三方主题或自己滚动。\n\n#### 暂停，恢复和审查\n\n可以暂停自动测试执行，并查看最近的测试历史，以查看代码在何处，何时以及为什么中断。\n\n在 Web 界面中，您可以设置界面主题，查看完整的测试结果，使用浏览器提醒等实用功能。\n\n#### 其它功能：\n\n1. 自动检测代码变动并编译测试\n2. 半自动化书写测试用例：<http://localhost:8080/composer.html>\n3. 查看测试覆盖率：<http://localhost:8080/reports/>\n4. 临时屏蔽某个包的编译测试","slug":"Go单元测试","published":1,"updated":"2018-08-10T08:28:01.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3c0002u5n9w0v8r84z","content":"<h1 id=\"为什么需要单元测试\"><a href=\"#为什么需要单元测试\" class=\"headerlink\" title=\"为什么需要单元测试\"></a>为什么需要单元测试</h1><p> 开发程序其中很重要的一点是测试，我们如何保证代码的质量，如何保证每个函数是可运行，运行结果是正确的，又如何保证写出来的代码性能是好的，我们知道单元测试的重点在于发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决。对一个包做（单元）测试，需要写一些可以频繁（每次更新后）执行的小块测试单元来检查代码的正确性。于是我们必须写一些 Go 源文件来测试代码。测<strong>试程序必须属于被测试的包</strong>，并且文件名满足这种形式 <code>*_test.go</code>，所以测试代码和包中的业务代码是分开的。</p>\n<p> Go语言中自带有一个轻量级的测试框架<code>testing</code>和自带的<code>go test</code>命令来实现单元测试和性能测试，<code>testing</code>框架和其他语言中的测试框架类似，你可以基于这个框架写针对相应函数的测试用例。</p>\n<p><code>_test</code> 程序不会被普通的 Go 编译器编译，所以当放应用部署到生产环境时它们不会被部署；只有 gotest 会编译所有的程序：普通程序和测试程序。</p>\n<p>另外建议安装<a href=\"https://github.com/cweill/gotests\" target=\"_blank\" rel=\"noopener\">gotests</a>插件自动生成测试代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/cweill/gotests/...</span><br></pre></td></tr></table></figure>\n<p>go单元测试的命令是</p>\n<p><code>go test</code></p>\n<p>go test 只会输出错误的信息，想要看详细的信息使用<code>go test -v</code></p>\n<h1 id=\"Go的自带单元测试的编写\"><a href=\"#Go的自带单元测试的编写\" class=\"headerlink\" title=\"Go的自带单元测试的编写\"></a>Go的自带单元测试的编写</h1><h2 id=\"1、如何编写测试用例\"><a href=\"#1、如何编写测试用例\" class=\"headerlink\" title=\"1、如何编写测试用例\"></a>1、如何编写测试用例</h2><p>接下来我们在该目录下面创建两个文件：even.go和oddeven_test.go<br><strong>even.go:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">用来测试前 100 个整数是否是偶数。这个函数属于 even 包。</span><br><span class=\"line\">*/</span><br><span class=\"line\">package even</span><br><span class=\"line\">func Even(i int) bool &#123;</span><br><span class=\"line\">\treturn i%2 == 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func Odd(i int) bool &#123;</span><br><span class=\"line\">\treturn i%2 != 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>oddeven_test.go:这是我们的单元测试文件，</strong></p>\n<h3 id=\"1-1测试文件的规则：\"><a href=\"#1-1测试文件的规则：\" class=\"headerlink\" title=\"1.1测试文件的规则：\"></a><strong>1.1测试文件的规则：</strong></h3><ol>\n<li>文件名必须是<code>_test.go</code>结尾的，这样在执行<code>go test</code>的时候才会执行到相应的代码</li>\n<li>你必须import <code>testing</code>这个包</li>\n<li>所有的测试用例函数必须是<code>Test</code>开头</li>\n<li>测试用例会按照源代码中写的顺序依次执行</li>\n<li>测试函数<code>TestXxx()</code>的参数是<code>testing.T</code>，我们可以使用该类型来记录错误或者是测试状态</li>\n<li>测试格式：<code>func TestXxx (t *testing.T)</code>,<code>Xxx</code>部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如<code>Testintdiv</code>是错误的函数名。</li>\n<li>函数中通过调用<code>testing.T</code>的<code>Error</code>, <code>Errorf</code>, <code>FailNow</code>, <code>Fatal</code>, <code>FatalIf</code>方法，说明测试不通过，调用<code>Log</code>方法用来记录测试的信息。</li>\n</ol>\n<p><strong>oddeven_test.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> even</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEven</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !Even(<span class=\"number\">10</span>) &#123; <span class=\"comment\">//!Even(10)==false,不会向下执行</span></span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"10 must be even\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Even(<span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"7 is not even\"</span>)</span><br><span class=\"line\">\t\tt.Fatal()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Even(<span class=\"number\">10</span>) &#123; <span class=\"comment\">//Even(10)==true,但是为了测试，让它执行t.Log()和 t.Fail()</span></span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"Everything OK: 10 is even, just a test to see failed output!\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestOdd</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !Odd(<span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\" 11 must be odd!\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Odd(<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\" 10 is not odd!\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用go test 运行oddeven_test.go,只会出现错误信息</strong></p>\n<blockquote>\n<p>— FAIL: TestEven (0.00s)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.364s</p>\n</blockquote>\n<p><strong>使用go test -v，会将详细的信息都打印出来，通过的会有pass标识</strong></p>\n<blockquote>\n<p>=== RUN TestEven<br>— FAIL: TestEven (0.00s)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>=== RUN TestOdd<br>— PASS: TestOdd (0.00s)<br>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.397s</p>\n</blockquote>\n<h3 id=\"1-2单元测试的一些通知失败的方法\"><a href=\"#1-2单元测试的一些通知失败的方法\" class=\"headerlink\" title=\"1.2单元测试的一些通知失败的方法\"></a>1.2单元测试的一些通知失败的方法</h3><p>1）<code>func (t *T) Fail()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标记测试函数为失败，然后继续执行（剩下的测试）。</span><br></pre></td></tr></table></figure>\n<p>2）<code>func (t *T) FailNow()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。</span><br></pre></td></tr></table></figure>\n<p>3）<code>func (t *T) Log(args ...interface{})</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args 被用默认的格式格式化并打印到错误日志中。</span><br></pre></td></tr></table></figure>\n<p>4）<code>func (t *T) Fatal(args ...interface{})</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结合 先执行 3），然后执行 2）的效果。</span><br></pre></td></tr></table></figure>\n<h1 id=\"GoGonvey框架写单元测试\"><a href=\"#GoGonvey框架写单元测试\" class=\"headerlink\" title=\"GoGonvey框架写单元测试\"></a>GoGonvey框架写单元测试</h1><h2 id=\"1、GoGonvey框架介绍\"><a href=\"#1、GoGonvey框架介绍\" class=\"headerlink\" title=\"1、GoGonvey框架介绍\"></a>1、GoGonvey框架介绍</h2><p> Go 语言虽然自带单元测试功能，在 GoConvey 诞生之前也出现了许多第三方辅助库。但没有一个辅助库能够像 GoConvey 这样优雅地书写代码的单元测试，简洁的语法和舒适的界面能够让一个不爱书写单元测试的开发人员从此爱上单元测试。</p>\n<h3 id=\"1-1、GoGonvey的优点\"><a href=\"#1-1、GoGonvey的优点\" class=\"headerlink\" title=\"1.1、GoGonvey的优点\"></a>1.1、GoGonvey的优点</h3><ol>\n<li>GoConvey支持Go的本机<a href=\"http://golang.org/pkg/testing/\" target=\"_blank\" rel=\"noopener\"><code>testing</code></a>包。无论是网页界面还是DSL都不需要; 你可以独立使用任何一个。</li>\n<li>GoConvey集成后<code>**go test**</code>，您可以<a href=\"https://github.com/smartystreets/goconvey/wiki/Execution\" target=\"_blank\" rel=\"noopener\">在终端中</a>继续运行测试<a href=\"https://github.com/smartystreets/goconvey/wiki/Execution\" target=\"_blank\" rel=\"noopener\">，</a>或者使用自动更新Web UI进行测试。</li>\n<li>GoConvey还有web UI可以来方便查看代码覆盖率，以及单元测试错误信息</li>\n</ol>\n<h3 id=\"1-2、安装GoGonvey\"><a href=\"#1-2、安装GoGonvey\" class=\"headerlink\" title=\"1.2、安装GoGonvey\"></a>1.2、安装GoGonvey</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/smartystreets/goconvey</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3、快速开始一个例子\"><a href=\"#1-3、快速开始一个例子\" class=\"headerlink\" title=\"1.3、快速开始一个例子\"></a>1.3、快速开始一个例子</h3><p>写一个oddeven_goconvey_test.go 文件,将test.go改写成convey形式的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> even</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t. <span class=\"string\">\"github.com/smartystreets/goconvey/convey\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEvenConvey</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tConvey(<span class=\"string\">\"Given some integer with a starting value\"</span>, t, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tConvey(<span class=\"string\">\"When the integer is even\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//第一个Convey需要t参数，以后的不需要了</span></span><br><span class=\"line\">\t\t\tConvey(<span class=\"string\">\"10 must be even\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tb := Even(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t\tSo(b, ShouldBeTrue)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tConvey(<span class=\"string\">\"7 is not even\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tb := Even(<span class=\"number\">7</span>)</span><br><span class=\"line\">\t\t\t\tSo(b, ShouldBeFalse)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tConvey(<span class=\"string\">\"Everything OK: 10 is even, just a test to see failed output!\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tb := Even(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t\tSo(b, ShouldBeFalse)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 使用 GoConvey 书写单元测试，每个测试用例需要使用Convey函数包裹起来。它接受的第一个参数为 string 类型的描述；第二个参数一般为*testing.T，即本例中的变量 t；第三个参数为不接收任何参数也不返回任何值的函数（习惯以闭包的形式书写）。</p>\n<p>Convey语句同样可以无限嵌套，以体现各个测试用例之间的关系，例如TestEvenConvey函数就采用了嵌套的方式体现它们之间的关系。需要注意的是，<strong>只有最外层的Convey需要传入变量 t，内层的嵌套均不需要传入</strong>。</p>\n<p>最后，需要使用So语句来对条件进行判断。在本例中，我们只使用了 2 个不同类型的条件判断：ShouldBeTrue和ShouldBeFalse，分别表示值应该为 true、值应该false。</p>\n<p>常用的有</p>\n<ol>\n<li><code>ShouldEqual</code>: 表示值应该想等</li>\n<li><code>ShouldResemble</code>: 进行深度相同检查，要有两个值<code>So(b, ShouldResemble, true)</code></li>\n<li><code>ShouldBeTrue</code>: 表示值应该为true</li>\n<li><code>ShouldBeZeroValue</code>:表示值应该为0</li>\n<li><code>ShouldNotContainSubstring</code>:接收2字符串参数并确保第一个不包含第二个字符串。</li>\n<li><code>ShouldPanic</code>: 表示值应该panic</li>\n</ol>\n<p>有关详细的条件列表，可以参见<a href=\"https://github.com/smartystreets/goconvey/wiki/Assertions\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h3 id=\"1-4、运行测试\"><a href=\"#1-4、运行测试\" class=\"headerlink\" title=\"1.4、运行测试\"></a>1.4、运行测试</h3><h4 id=\"1-4-1、go-test-v运行\"><a href=\"#1-4-1、go-test-v运行\" class=\"headerlink\" title=\"1.4.1、go test -v运行\"></a>1.4.1、go test -v运行</h4><p>现在，可以打开命令行，然后输入<code>go test -v</code>来进行测试。由于 GoConvey 兼容 Go 原生的单元测试，因此我们可以直接使用 Go 的命令来执行测试。 </p>\n<blockquote>\n<p>=== RUN TestEvenConvey</p>\n<p>Given some integer with a starting value<br>When the integer is even<br>10 must be even .<br>7 is not even .<br>Everything OK: 10 is even, just a test to see failed output! x</p>\n<p>Failures: </p>\n<p>D:/gopath/src/MyStudy/GolangTest/even/oddeven_goconvey_test.go</p>\n<p>Line 23:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Expected: false</span><br><span class=\"line\">&gt; Actual:   true</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p> 3 total assertions</p>\n<p>— FAIL: TestEvenConvey (0.00s)<br>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.401s</p>\n</blockquote>\n<p>可以看到给出的信息比go自带的测试包多很多信息</p>\n<h4 id=\"1-4-2、goconvey-运行测试\"><a href=\"#1-4-2、goconvey-运行测试\" class=\"headerlink\" title=\"1.4.2、goconvey 运行测试\"></a>1.4.2、goconvey 运行测试</h4><p>web界面查看数据</p>\n<p>GoConvey 不仅支持在命令行进行人工调用调试命令，还有非常舒适的 Web 界面提供给开发者来进行自动化的编译测试工作。在项目目录下执行<code>goconvey</code> 同时可以打开浏览器查看localhost:8080</p>\n<p><img src=\"/2017/06/23/Go单元测试/带有错误的convey.png\" alt=\"\"></p>\n<p>解析上面图片</p>\n<h3 id=\"1-5、GoConvey的一些功能\"><a href=\"#1-5、GoConvey的一些功能\" class=\"headerlink\" title=\"1.5、GoConvey的一些功能\"></a>1.5、GoConvey的一些功能</h3><h4 id=\"测试自动运行\"><a href=\"#测试自动运行\" class=\"headerlink\" title=\"测试自动运行\"></a>测试自动运行</h4><p> 只需保存<code>.go</code><img src=\"/2017/06/23/Go单元测试/更新.png\" alt=\"文件或单击图标执行测试\">。您的浏览器页面将自动更新。</p>\n<h4 id=\"覆盖报告\"><a href=\"#覆盖报告\" class=\"headerlink\" title=\"覆盖报告\"></a>覆盖报告</h4><p>可以点击左上角的软件包名称来查看<a href=\"http://blog.golang.org/cover#TOC_5.\" target=\"_blank\" rel=\"noopener\">Go的详细HTML覆盖率报告</a>。</p>\n<h4 id=\"黑暗，光和自定义主题\"><a href=\"#黑暗，光和自定义主题\" class=\"headerlink\" title=\"黑暗，光和自定义主题\"></a>黑暗，光和自定义主题</h4><p>GoConvey内置了两个主题。（在此页面上<a href=\"javascript:\" target=\"_blank\" rel=\"noopener\">切换主题</a>以尝试！）您还可以使用第三方主题或自己滚动。</p>\n<h4 id=\"暂停，恢复和审查\"><a href=\"#暂停，恢复和审查\" class=\"headerlink\" title=\"暂停，恢复和审查\"></a>暂停，恢复和审查</h4><p>可以暂停自动测试执行，并查看最近的测试历史，以查看代码在何处，何时以及为什么中断。</p>\n<p>在 Web 界面中，您可以设置界面主题，查看完整的测试结果，使用浏览器提醒等实用功能。</p>\n<h4 id=\"其它功能：\"><a href=\"#其它功能：\" class=\"headerlink\" title=\"其它功能：\"></a>其它功能：</h4><ol>\n<li>自动检测代码变动并编译测试</li>\n<li>半自动化书写测试用例：<a href=\"http://localhost:8080/composer.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/composer.html</a></li>\n<li>查看测试覆盖率：<a href=\"http://localhost:8080/reports/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/reports/</a></li>\n<li>临时屏蔽某个包的编译测试</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么需要单元测试\"><a href=\"#为什么需要单元测试\" class=\"headerlink\" title=\"为什么需要单元测试\"></a>为什么需要单元测试</h1><p> 开发程序其中很重要的一点是测试，我们如何保证代码的质量，如何保证每个函数是可运行，运行结果是正确的，又如何保证写出来的代码性能是好的，我们知道单元测试的重点在于发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决。对一个包做（单元）测试，需要写一些可以频繁（每次更新后）执行的小块测试单元来检查代码的正确性。于是我们必须写一些 Go 源文件来测试代码。测<strong>试程序必须属于被测试的包</strong>，并且文件名满足这种形式 <code>*_test.go</code>，所以测试代码和包中的业务代码是分开的。</p>\n<p> Go语言中自带有一个轻量级的测试框架<code>testing</code>和自带的<code>go test</code>命令来实现单元测试和性能测试，<code>testing</code>框架和其他语言中的测试框架类似，你可以基于这个框架写针对相应函数的测试用例。</p>\n<p><code>_test</code> 程序不会被普通的 Go 编译器编译，所以当放应用部署到生产环境时它们不会被部署；只有 gotest 会编译所有的程序：普通程序和测试程序。</p>\n<p>另外建议安装<a href=\"https://github.com/cweill/gotests\" target=\"_blank\" rel=\"noopener\">gotests</a>插件自动生成测试代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/cweill/gotests/...</span><br></pre></td></tr></table></figure>\n<p>go单元测试的命令是</p>\n<p><code>go test</code></p>\n<p>go test 只会输出错误的信息，想要看详细的信息使用<code>go test -v</code></p>\n<h1 id=\"Go的自带单元测试的编写\"><a href=\"#Go的自带单元测试的编写\" class=\"headerlink\" title=\"Go的自带单元测试的编写\"></a>Go的自带单元测试的编写</h1><h2 id=\"1、如何编写测试用例\"><a href=\"#1、如何编写测试用例\" class=\"headerlink\" title=\"1、如何编写测试用例\"></a>1、如何编写测试用例</h2><p>接下来我们在该目录下面创建两个文件：even.go和oddeven_test.go<br><strong>even.go:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">用来测试前 100 个整数是否是偶数。这个函数属于 even 包。</span><br><span class=\"line\">*/</span><br><span class=\"line\">package even</span><br><span class=\"line\">func Even(i int) bool &#123;</span><br><span class=\"line\">\treturn i%2 == 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func Odd(i int) bool &#123;</span><br><span class=\"line\">\treturn i%2 != 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>oddeven_test.go:这是我们的单元测试文件，</strong></p>\n<h3 id=\"1-1测试文件的规则：\"><a href=\"#1-1测试文件的规则：\" class=\"headerlink\" title=\"1.1测试文件的规则：\"></a><strong>1.1测试文件的规则：</strong></h3><ol>\n<li>文件名必须是<code>_test.go</code>结尾的，这样在执行<code>go test</code>的时候才会执行到相应的代码</li>\n<li>你必须import <code>testing</code>这个包</li>\n<li>所有的测试用例函数必须是<code>Test</code>开头</li>\n<li>测试用例会按照源代码中写的顺序依次执行</li>\n<li>测试函数<code>TestXxx()</code>的参数是<code>testing.T</code>，我们可以使用该类型来记录错误或者是测试状态</li>\n<li>测试格式：<code>func TestXxx (t *testing.T)</code>,<code>Xxx</code>部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如<code>Testintdiv</code>是错误的函数名。</li>\n<li>函数中通过调用<code>testing.T</code>的<code>Error</code>, <code>Errorf</code>, <code>FailNow</code>, <code>Fatal</code>, <code>FatalIf</code>方法，说明测试不通过，调用<code>Log</code>方法用来记录测试的信息。</li>\n</ol>\n<p><strong>oddeven_test.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> even</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEven</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !Even(<span class=\"number\">10</span>) &#123; <span class=\"comment\">//!Even(10)==false,不会向下执行</span></span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"10 must be even\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Even(<span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"7 is not even\"</span>)</span><br><span class=\"line\">\t\tt.Fatal()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Even(<span class=\"number\">10</span>) &#123; <span class=\"comment\">//Even(10)==true,但是为了测试，让它执行t.Log()和 t.Fail()</span></span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"Everything OK: 10 is even, just a test to see failed output!\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestOdd</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !Odd(<span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\" 11 must be odd!\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Odd(<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\" 10 is not odd!\"</span>)</span><br><span class=\"line\">\t\tt.Fail()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用go test 运行oddeven_test.go,只会出现错误信息</strong></p>\n<blockquote>\n<p>— FAIL: TestEven (0.00s)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.364s</p>\n</blockquote>\n<p><strong>使用go test -v，会将详细的信息都打印出来，通过的会有pass标识</strong></p>\n<blockquote>\n<p>=== RUN TestEven<br>— FAIL: TestEven (0.00s)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; oddeven_test.go:16: Everything OK: 10 is even, just a test to see failed output!</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>=== RUN TestOdd<br>— PASS: TestOdd (0.00s)<br>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.397s</p>\n</blockquote>\n<h3 id=\"1-2单元测试的一些通知失败的方法\"><a href=\"#1-2单元测试的一些通知失败的方法\" class=\"headerlink\" title=\"1.2单元测试的一些通知失败的方法\"></a>1.2单元测试的一些通知失败的方法</h3><p>1）<code>func (t *T) Fail()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标记测试函数为失败，然后继续执行（剩下的测试）。</span><br></pre></td></tr></table></figure>\n<p>2）<code>func (t *T) FailNow()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。</span><br></pre></td></tr></table></figure>\n<p>3）<code>func (t *T) Log(args ...interface{})</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args 被用默认的格式格式化并打印到错误日志中。</span><br></pre></td></tr></table></figure>\n<p>4）<code>func (t *T) Fatal(args ...interface{})</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结合 先执行 3），然后执行 2）的效果。</span><br></pre></td></tr></table></figure>\n<h1 id=\"GoGonvey框架写单元测试\"><a href=\"#GoGonvey框架写单元测试\" class=\"headerlink\" title=\"GoGonvey框架写单元测试\"></a>GoGonvey框架写单元测试</h1><h2 id=\"1、GoGonvey框架介绍\"><a href=\"#1、GoGonvey框架介绍\" class=\"headerlink\" title=\"1、GoGonvey框架介绍\"></a>1、GoGonvey框架介绍</h2><p> Go 语言虽然自带单元测试功能，在 GoConvey 诞生之前也出现了许多第三方辅助库。但没有一个辅助库能够像 GoConvey 这样优雅地书写代码的单元测试，简洁的语法和舒适的界面能够让一个不爱书写单元测试的开发人员从此爱上单元测试。</p>\n<h3 id=\"1-1、GoGonvey的优点\"><a href=\"#1-1、GoGonvey的优点\" class=\"headerlink\" title=\"1.1、GoGonvey的优点\"></a>1.1、GoGonvey的优点</h3><ol>\n<li>GoConvey支持Go的本机<a href=\"http://golang.org/pkg/testing/\" target=\"_blank\" rel=\"noopener\"><code>testing</code></a>包。无论是网页界面还是DSL都不需要; 你可以独立使用任何一个。</li>\n<li>GoConvey集成后<code>**go test**</code>，您可以<a href=\"https://github.com/smartystreets/goconvey/wiki/Execution\" target=\"_blank\" rel=\"noopener\">在终端中</a>继续运行测试<a href=\"https://github.com/smartystreets/goconvey/wiki/Execution\" target=\"_blank\" rel=\"noopener\">，</a>或者使用自动更新Web UI进行测试。</li>\n<li>GoConvey还有web UI可以来方便查看代码覆盖率，以及单元测试错误信息</li>\n</ol>\n<h3 id=\"1-2、安装GoGonvey\"><a href=\"#1-2、安装GoGonvey\" class=\"headerlink\" title=\"1.2、安装GoGonvey\"></a>1.2、安装GoGonvey</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/smartystreets/goconvey</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3、快速开始一个例子\"><a href=\"#1-3、快速开始一个例子\" class=\"headerlink\" title=\"1.3、快速开始一个例子\"></a>1.3、快速开始一个例子</h3><p>写一个oddeven_goconvey_test.go 文件,将test.go改写成convey形式的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> even</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t. <span class=\"string\">\"github.com/smartystreets/goconvey/convey\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEvenConvey</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tConvey(<span class=\"string\">\"Given some integer with a starting value\"</span>, t, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tConvey(<span class=\"string\">\"When the integer is even\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//第一个Convey需要t参数，以后的不需要了</span></span><br><span class=\"line\">\t\t\tConvey(<span class=\"string\">\"10 must be even\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tb := Even(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t\tSo(b, ShouldBeTrue)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tConvey(<span class=\"string\">\"7 is not even\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tb := Even(<span class=\"number\">7</span>)</span><br><span class=\"line\">\t\t\t\tSo(b, ShouldBeFalse)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tConvey(<span class=\"string\">\"Everything OK: 10 is even, just a test to see failed output!\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tb := Even(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t\tSo(b, ShouldBeFalse)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 使用 GoConvey 书写单元测试，每个测试用例需要使用Convey函数包裹起来。它接受的第一个参数为 string 类型的描述；第二个参数一般为*testing.T，即本例中的变量 t；第三个参数为不接收任何参数也不返回任何值的函数（习惯以闭包的形式书写）。</p>\n<p>Convey语句同样可以无限嵌套，以体现各个测试用例之间的关系，例如TestEvenConvey函数就采用了嵌套的方式体现它们之间的关系。需要注意的是，<strong>只有最外层的Convey需要传入变量 t，内层的嵌套均不需要传入</strong>。</p>\n<p>最后，需要使用So语句来对条件进行判断。在本例中，我们只使用了 2 个不同类型的条件判断：ShouldBeTrue和ShouldBeFalse，分别表示值应该为 true、值应该false。</p>\n<p>常用的有</p>\n<ol>\n<li><code>ShouldEqual</code>: 表示值应该想等</li>\n<li><code>ShouldResemble</code>: 进行深度相同检查，要有两个值<code>So(b, ShouldResemble, true)</code></li>\n<li><code>ShouldBeTrue</code>: 表示值应该为true</li>\n<li><code>ShouldBeZeroValue</code>:表示值应该为0</li>\n<li><code>ShouldNotContainSubstring</code>:接收2字符串参数并确保第一个不包含第二个字符串。</li>\n<li><code>ShouldPanic</code>: 表示值应该panic</li>\n</ol>\n<p>有关详细的条件列表，可以参见<a href=\"https://github.com/smartystreets/goconvey/wiki/Assertions\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h3 id=\"1-4、运行测试\"><a href=\"#1-4、运行测试\" class=\"headerlink\" title=\"1.4、运行测试\"></a>1.4、运行测试</h3><h4 id=\"1-4-1、go-test-v运行\"><a href=\"#1-4-1、go-test-v运行\" class=\"headerlink\" title=\"1.4.1、go test -v运行\"></a>1.4.1、go test -v运行</h4><p>现在，可以打开命令行，然后输入<code>go test -v</code>来进行测试。由于 GoConvey 兼容 Go 原生的单元测试，因此我们可以直接使用 Go 的命令来执行测试。 </p>\n<blockquote>\n<p>=== RUN TestEvenConvey</p>\n<p>Given some integer with a starting value<br>When the integer is even<br>10 must be even .<br>7 is not even .<br>Everything OK: 10 is even, just a test to see failed output! x</p>\n<p>Failures: </p>\n<p>D:/gopath/src/MyStudy/GolangTest/even/oddeven_goconvey_test.go</p>\n<p>Line 23:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Expected: false</span><br><span class=\"line\">&gt; Actual:   true</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p> 3 total assertions</p>\n<p>— FAIL: TestEvenConvey (0.00s)<br>FAIL<br>exit status 1<br>FAIL MyStudy/GolangTest/even 0.401s</p>\n</blockquote>\n<p>可以看到给出的信息比go自带的测试包多很多信息</p>\n<h4 id=\"1-4-2、goconvey-运行测试\"><a href=\"#1-4-2、goconvey-运行测试\" class=\"headerlink\" title=\"1.4.2、goconvey 运行测试\"></a>1.4.2、goconvey 运行测试</h4><p>web界面查看数据</p>\n<p>GoConvey 不仅支持在命令行进行人工调用调试命令，还有非常舒适的 Web 界面提供给开发者来进行自动化的编译测试工作。在项目目录下执行<code>goconvey</code> 同时可以打开浏览器查看localhost:8080</p>\n<p><img src=\"/2017/06/23/Go单元测试/带有错误的convey.png\" alt=\"\"></p>\n<p>解析上面图片</p>\n<h3 id=\"1-5、GoConvey的一些功能\"><a href=\"#1-5、GoConvey的一些功能\" class=\"headerlink\" title=\"1.5、GoConvey的一些功能\"></a>1.5、GoConvey的一些功能</h3><h4 id=\"测试自动运行\"><a href=\"#测试自动运行\" class=\"headerlink\" title=\"测试自动运行\"></a>测试自动运行</h4><p> 只需保存<code>.go</code><img src=\"/2017/06/23/Go单元测试/更新.png\" alt=\"文件或单击图标执行测试\">。您的浏览器页面将自动更新。</p>\n<h4 id=\"覆盖报告\"><a href=\"#覆盖报告\" class=\"headerlink\" title=\"覆盖报告\"></a>覆盖报告</h4><p>可以点击左上角的软件包名称来查看<a href=\"http://blog.golang.org/cover#TOC_5.\" target=\"_blank\" rel=\"noopener\">Go的详细HTML覆盖率报告</a>。</p>\n<h4 id=\"黑暗，光和自定义主题\"><a href=\"#黑暗，光和自定义主题\" class=\"headerlink\" title=\"黑暗，光和自定义主题\"></a>黑暗，光和自定义主题</h4><p>GoConvey内置了两个主题。（在此页面上<a href=\"javascript:\" target=\"_blank\" rel=\"noopener\">切换主题</a>以尝试！）您还可以使用第三方主题或自己滚动。</p>\n<h4 id=\"暂停，恢复和审查\"><a href=\"#暂停，恢复和审查\" class=\"headerlink\" title=\"暂停，恢复和审查\"></a>暂停，恢复和审查</h4><p>可以暂停自动测试执行，并查看最近的测试历史，以查看代码在何处，何时以及为什么中断。</p>\n<p>在 Web 界面中，您可以设置界面主题，查看完整的测试结果，使用浏览器提醒等实用功能。</p>\n<h4 id=\"其它功能：\"><a href=\"#其它功能：\" class=\"headerlink\" title=\"其它功能：\"></a>其它功能：</h4><ol>\n<li>自动检测代码变动并编译测试</li>\n<li>半自动化书写测试用例：<a href=\"http://localhost:8080/composer.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/composer.html</a></li>\n<li>查看测试覆盖率：<a href=\"http://localhost:8080/reports/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/reports/</a></li>\n<li>临时屏蔽某个包的编译测试</li>\n</ol>\n"},{"title":"Go里面的堆栈跟踪","date":"2018-07-18T05:54:48.000Z","_content":"转载翻译，原文地址：[Stack Traces In Go](https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html)\n\n# Go里面的堆栈跟踪\n\n在Go语言中有一些调试技巧能帮助我们快速找到问题，有时候你想尽可能多的记录异常但仍觉得不够，搞清楚堆栈的意义有助于定位Bug或者记录更完整的信息。\n\n本文将讨论堆栈跟踪信息以及如何在堆栈中识别函数所传递的参数。\n\n## Functions (函数的情况)\n\n先从这段代码开始：\n\n### 清单1\n\n```go\n package main\n\n func main() {\n    slice := make([]string, 2, 4)\n    Example(slice, \"hello\", 10)\n }\n\n func Example(slice []string, str string, i int) {\n    panic(\"Want stack trace\")\n }\n```\n\n**清单1**显示了一个程序，其中main函数在第05行调用Example函数.Example函数在第08行声明并接受三个参数，1个string类型的slice, 1个string和1个integer, 。 Example执行的唯一代码是调用第09行的内置函数panic，它会立即生成堆栈跟踪：\n\n### 清单2\n\n```\nPanic: Want stack trace\n\ngoroutine 1 [running]:\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n        temp/main.go:9 +0x64\nmain.main()\n        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n        temp/main.go:5 +0x85\n\ngoroutine 2 [runnable]:\nruntime.forcegchelper()\n        /Users/bill/go/src/runtime/proc.go:90\nruntime.goexit()\n        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1\n\ngoroutine 3 [runnable]:\nruntime.bgsweep()\n        /Users/bill/go/src/runtime/mgc0.go:82\nruntime.goexit()\n        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1\n```\n\n**清单2**中的堆栈跟踪显示了panic是存在的所有goroutine,每个程序的状态以及相应goroutine下的调用堆栈。\n\n正在运行的goroutine和导致堆栈跟踪的goroutine将位于顶部。让我们关注报了panic的goroutine.\n\n### 清单3\n\n```\n01 goroutine 1 [running]:\n02 main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:9 +0x64\n03 main.main()\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:5 +0x85\n```\n\n清单三中地 01 行的的堆栈跟踪显示goroutine 1 在panic之前运行，在第 02 行，我们看到panic的代码在package main中的Example函数中。缩进的行显示了次函数所在的代码文件和路径以及正在执行的代码行。在这种情况下，第 09 行的代码正在运行，这是对panic的调用。\n\n第 03 行显示调用Example的函数的名称，这是main包中的主要功能，在函数名称下面，缩进的行显示了对Example进行调用的代码文件的路径和代码行\n\n堆栈工资显示goroutine范围内的函数调用链，直到发生panic发生，现在让我们关注传递给Example函数的每个参数的值：\n\n### 清单4\n\n```\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Call to Example by main.\nslice := make([]string, 2, 4)\nExample(slice, \"hello\", 10)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单4** 这里展示了在main中带参数调用Example函数时的堆栈信息 。 将堆栈跟踪中的值与函数声明进行比较时，它似乎不匹配。 Example函数的声明接受三个参数，但堆栈跟踪显示六个十六进制值。 要理解值如何与参数匹配的关键需要知道每个参数类型的实现。\n\n让我们从第一个参数开始，它是一个1个string类型的slice， slice是Go中的引用类型。 这意味着slice的值是一个标题值，其中包含指向某些基础数据的指针。 在slice的情况下，标头值是三字结构，其包含指向底层阵列的指针，slice的长度和容量。 与切片标头关联的值由堆栈跟踪中的前三个值表示：\n\n### 清单5\n\n```\n// Slice parameter value\nslice := make([]string, 2, 4)\n\n// Slice header values\nPointer:  0x2080c3f50\nLength:   0x2\nCapacity: 0x4\n\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单5** 显示了堆栈跟踪中的前三个值如何与slice参数匹配。 第一个值表示指向底层字符串数组的指针。 用于初始化slice的长度和容量的数字与第二个和第三个值匹配 。这三个值表示切片标头的每个值，即Example函数的第一个参数。\n\n**Figure 1**\n\n![](Go里面的堆栈跟踪/Figure3.png)\n\n现在让我们看一下第二个参数，它是一个string。 string也是引用类型，但此标头值是不可变的。 字符串的标头值被声明为两部分，包含指向底层字节数组的指针和字符串的长度：\n\n### 清单6\n\n```\n// String parameter value\n\"hello\"\n\n// String header values\nPointer: 0x425c0\nLength:  0x5\n\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单6**显示了堆栈跟踪中的第四个和第五个值如何与string参数匹配。 第四个值表示指向底层字节数组的指针，第五个值表示字符串的长度为5。字符串\n\n“hello”\n\n需要5个字节。 这两个值表示字符串标题的每个值，即Example函数的第二个参数。\n\n**Figure 2**\n\n![](Go里面的堆栈跟踪/Figure2.png)\n\n第三个参数是一个整数，它是一个单值：\n\n### 清单7\n\n```\n// Integer parameter value\n10\n\n// Integer value\nBase 16: 0xa\n\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单7**显示了堆栈跟踪中的最后一个值如何与int类型的参数匹配。 trace中的最后一个值是十六进制数0xa，它的值是10.与该参数传递的值相同。 该值代表Example函数中的第三个参数。\n\n**Figure 3**\n\n![](Go里面的堆栈跟踪/Figure3.png)\n\n## Methods(方法的情况)\n\n如果我们将Example作为结构体的方法会怎么样呢?\n\n### 清单8\n\n```go\n01 package main\n02\n03 import \"fmt\"\n04\n05 type trace struct{}\n06\n07 func main() {\n08     slice := make([]string, 2, 4)\n09\n10     var t trace\n11     t.Example(slice, \"hello\", 10)\n12 }\n13\n14 func (t *trace) Example(slice []string, str string, i int) {\n15     fmt.Printf(\"Receiver Address: %p\\n\", t)\n16     panic(\"Want stack trace\")\n17 }\n```\n\n**清单8**通过在第05行声明一个名为trace的新类型，并更改程序，将Example申明为trace类型的方法。通过使用trace类型的指针接收器重新声明该函数来完成转换。 然后在第10行，将变量t申明为trace类型，并且在第11行进行方法调用。\n\n由于该方法是使用指针声明的，因此Go将获取变量t的地址来支持接收者类型，即使方法调用是使用值来完成的。 这次运行程序时，堆栈跟踪有点不同：\n\n### 清单9\n\n```\nReceiver Address: 0x1553a8\npanic: Want stack trace\n\n01 goroutine 1 [running]:\n02 main.(*trace).Example(0x1553a8, 0x2081b7f50, 0x2, 0x4, 0xdc1d0, 0x5, 0xa)\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:16 +0x116\n\n03 main.main()\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:11 +0xae\n```\n\n在**清单9**中你应该注意的第一件事是第02行的堆栈跟踪清楚的显示这是一个使用指针接收器调用的方法。现在函数的名称显示的样子是： 在package名字和方法名之间多出了”*trace”字样 。 需要注意的第二件事是参数列表的第1个参数标明了结构体(t)地址。 我们从堆栈跟踪中看到了这个实现细节。\n\n## Packing（打包）\n\n如果有多个参数可以填充到一个single word, 那么堆栈跟踪中参数的值将打包在一起 ：\n\n### 清单10\n\n```go\n01 package main\n02\n03 func main() {\n04     Example(true, false, true, 25)\n05 }\n06 \n07 func Example(b1, b2, b3 bool, i uint8) {\n08     panic(\"Want stack trace\")\n09 }\n```\n\n这个例子修改Example函数改为接收4个参数：3个bool型和1个八位无符号整型。bool值也是用8个bit表示，所以在32位和64位架构下，4个参数可以合并为一个single word。 当程序运行时，它会产生一个有趣的堆栈跟踪 :\n\n### 清单11\n\n```\n01 goroutine 1 [running]:\n02 main.Example(0x19010001)\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:8 +0x64\n03 main.main()\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:4 +0x32\n```\n\n对于对Example的调用，堆栈跟踪中没有四个值，而是有一个值。所有四个单独的8位值都拼凑成一个单词：\n\n```\n// Parameter values\ntrue, false, true, 25\n\n// Word value\nBits    Binary      Hex   Value\n00-07   0000 0001   01    true\n08-15   0000 0000   00    false\n16-23   0000 0001   01    true\n24-31   0001 1001   19    25\n\n// Declaration\nmain.Example(b1, b2, b3 bool, i uint8)\n\n// Stack trace\nmain.Example(0x19010001)\n```\n\n**清单12**显示了堆栈跟踪中的值是如何与传入的所有四个参数值匹配.true的值是一个8位值，用1表示，false的值是0.二进制25的值是11001，转换为十六进制是19。 现在，我们看到堆栈信息中包括十六进制值，需要知道这些值是如何传递的。\n\n# 结论\n\nGo运行时提供了大量信息来帮助我们调试程序。在这篇文章中，我们专注于堆栈跟踪。分析在整个调用堆栈中传递给每个函数的值的能力是很有用的。它不止一次帮助我很快识别我的错误。既然您已经知道如何读取堆栈跟踪，那么希望您可以在下次发生堆栈跟踪时利用这些知识。\n","source":"_posts/Go里面的堆栈跟踪.md","raw":"---\ntitle: Go里面的堆栈跟踪\ndate: 2018-07-18 13:54:48\ntags: golang\ncategories: Golang\n---\n转载翻译，原文地址：[Stack Traces In Go](https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html)\n\n# Go里面的堆栈跟踪\n\n在Go语言中有一些调试技巧能帮助我们快速找到问题，有时候你想尽可能多的记录异常但仍觉得不够，搞清楚堆栈的意义有助于定位Bug或者记录更完整的信息。\n\n本文将讨论堆栈跟踪信息以及如何在堆栈中识别函数所传递的参数。\n\n## Functions (函数的情况)\n\n先从这段代码开始：\n\n### 清单1\n\n```go\n package main\n\n func main() {\n    slice := make([]string, 2, 4)\n    Example(slice, \"hello\", 10)\n }\n\n func Example(slice []string, str string, i int) {\n    panic(\"Want stack trace\")\n }\n```\n\n**清单1**显示了一个程序，其中main函数在第05行调用Example函数.Example函数在第08行声明并接受三个参数，1个string类型的slice, 1个string和1个integer, 。 Example执行的唯一代码是调用第09行的内置函数panic，它会立即生成堆栈跟踪：\n\n### 清单2\n\n```\nPanic: Want stack trace\n\ngoroutine 1 [running]:\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n        temp/main.go:9 +0x64\nmain.main()\n        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n        temp/main.go:5 +0x85\n\ngoroutine 2 [runnable]:\nruntime.forcegchelper()\n        /Users/bill/go/src/runtime/proc.go:90\nruntime.goexit()\n        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1\n\ngoroutine 3 [runnable]:\nruntime.bgsweep()\n        /Users/bill/go/src/runtime/mgc0.go:82\nruntime.goexit()\n        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1\n```\n\n**清单2**中的堆栈跟踪显示了panic是存在的所有goroutine,每个程序的状态以及相应goroutine下的调用堆栈。\n\n正在运行的goroutine和导致堆栈跟踪的goroutine将位于顶部。让我们关注报了panic的goroutine.\n\n### 清单3\n\n```\n01 goroutine 1 [running]:\n02 main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:9 +0x64\n03 main.main()\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:5 +0x85\n```\n\n清单三中地 01 行的的堆栈跟踪显示goroutine 1 在panic之前运行，在第 02 行，我们看到panic的代码在package main中的Example函数中。缩进的行显示了次函数所在的代码文件和路径以及正在执行的代码行。在这种情况下，第 09 行的代码正在运行，这是对panic的调用。\n\n第 03 行显示调用Example的函数的名称，这是main包中的主要功能，在函数名称下面，缩进的行显示了对Example进行调用的代码文件的路径和代码行\n\n堆栈工资显示goroutine范围内的函数调用链，直到发生panic发生，现在让我们关注传递给Example函数的每个参数的值：\n\n### 清单4\n\n```\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Call to Example by main.\nslice := make([]string, 2, 4)\nExample(slice, \"hello\", 10)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单4** 这里展示了在main中带参数调用Example函数时的堆栈信息 。 将堆栈跟踪中的值与函数声明进行比较时，它似乎不匹配。 Example函数的声明接受三个参数，但堆栈跟踪显示六个十六进制值。 要理解值如何与参数匹配的关键需要知道每个参数类型的实现。\n\n让我们从第一个参数开始，它是一个1个string类型的slice， slice是Go中的引用类型。 这意味着slice的值是一个标题值，其中包含指向某些基础数据的指针。 在slice的情况下，标头值是三字结构，其包含指向底层阵列的指针，slice的长度和容量。 与切片标头关联的值由堆栈跟踪中的前三个值表示：\n\n### 清单5\n\n```\n// Slice parameter value\nslice := make([]string, 2, 4)\n\n// Slice header values\nPointer:  0x2080c3f50\nLength:   0x2\nCapacity: 0x4\n\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单5** 显示了堆栈跟踪中的前三个值如何与slice参数匹配。 第一个值表示指向底层字符串数组的指针。 用于初始化slice的长度和容量的数字与第二个和第三个值匹配 。这三个值表示切片标头的每个值，即Example函数的第一个参数。\n\n**Figure 1**\n\n![](Go里面的堆栈跟踪/Figure3.png)\n\n现在让我们看一下第二个参数，它是一个string。 string也是引用类型，但此标头值是不可变的。 字符串的标头值被声明为两部分，包含指向底层字节数组的指针和字符串的长度：\n\n### 清单6\n\n```\n// String parameter value\n\"hello\"\n\n// String header values\nPointer: 0x425c0\nLength:  0x5\n\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单6**显示了堆栈跟踪中的第四个和第五个值如何与string参数匹配。 第四个值表示指向底层字节数组的指针，第五个值表示字符串的长度为5。字符串\n\n“hello”\n\n需要5个字节。 这两个值表示字符串标题的每个值，即Example函数的第二个参数。\n\n**Figure 2**\n\n![](Go里面的堆栈跟踪/Figure2.png)\n\n第三个参数是一个整数，它是一个单值：\n\n### 清单7\n\n```\n// Integer parameter value\n10\n\n// Integer value\nBase 16: 0xa\n\n// Declaration\nmain.Example(slice []string, str string, i int)\n\n// Stack trace\nmain.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n```\n\n**清单7**显示了堆栈跟踪中的最后一个值如何与int类型的参数匹配。 trace中的最后一个值是十六进制数0xa，它的值是10.与该参数传递的值相同。 该值代表Example函数中的第三个参数。\n\n**Figure 3**\n\n![](Go里面的堆栈跟踪/Figure3.png)\n\n## Methods(方法的情况)\n\n如果我们将Example作为结构体的方法会怎么样呢?\n\n### 清单8\n\n```go\n01 package main\n02\n03 import \"fmt\"\n04\n05 type trace struct{}\n06\n07 func main() {\n08     slice := make([]string, 2, 4)\n09\n10     var t trace\n11     t.Example(slice, \"hello\", 10)\n12 }\n13\n14 func (t *trace) Example(slice []string, str string, i int) {\n15     fmt.Printf(\"Receiver Address: %p\\n\", t)\n16     panic(\"Want stack trace\")\n17 }\n```\n\n**清单8**通过在第05行声明一个名为trace的新类型，并更改程序，将Example申明为trace类型的方法。通过使用trace类型的指针接收器重新声明该函数来完成转换。 然后在第10行，将变量t申明为trace类型，并且在第11行进行方法调用。\n\n由于该方法是使用指针声明的，因此Go将获取变量t的地址来支持接收者类型，即使方法调用是使用值来完成的。 这次运行程序时，堆栈跟踪有点不同：\n\n### 清单9\n\n```\nReceiver Address: 0x1553a8\npanic: Want stack trace\n\n01 goroutine 1 [running]:\n02 main.(*trace).Example(0x1553a8, 0x2081b7f50, 0x2, 0x4, 0xdc1d0, 0x5, 0xa)\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:16 +0x116\n\n03 main.main()\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:11 +0xae\n```\n\n在**清单9**中你应该注意的第一件事是第02行的堆栈跟踪清楚的显示这是一个使用指针接收器调用的方法。现在函数的名称显示的样子是： 在package名字和方法名之间多出了”*trace”字样 。 需要注意的第二件事是参数列表的第1个参数标明了结构体(t)地址。 我们从堆栈跟踪中看到了这个实现细节。\n\n## Packing（打包）\n\n如果有多个参数可以填充到一个single word, 那么堆栈跟踪中参数的值将打包在一起 ：\n\n### 清单10\n\n```go\n01 package main\n02\n03 func main() {\n04     Example(true, false, true, 25)\n05 }\n06 \n07 func Example(b1, b2, b3 bool, i uint8) {\n08     panic(\"Want stack trace\")\n09 }\n```\n\n这个例子修改Example函数改为接收4个参数：3个bool型和1个八位无符号整型。bool值也是用8个bit表示，所以在32位和64位架构下，4个参数可以合并为一个single word。 当程序运行时，它会产生一个有趣的堆栈跟踪 :\n\n### 清单11\n\n```\n01 goroutine 1 [running]:\n02 main.Example(0x19010001)\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:8 +0x64\n03 main.main()\n           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/\n           temp/main.go:4 +0x32\n```\n\n对于对Example的调用，堆栈跟踪中没有四个值，而是有一个值。所有四个单独的8位值都拼凑成一个单词：\n\n```\n// Parameter values\ntrue, false, true, 25\n\n// Word value\nBits    Binary      Hex   Value\n00-07   0000 0001   01    true\n08-15   0000 0000   00    false\n16-23   0000 0001   01    true\n24-31   0001 1001   19    25\n\n// Declaration\nmain.Example(b1, b2, b3 bool, i uint8)\n\n// Stack trace\nmain.Example(0x19010001)\n```\n\n**清单12**显示了堆栈跟踪中的值是如何与传入的所有四个参数值匹配.true的值是一个8位值，用1表示，false的值是0.二进制25的值是11001，转换为十六进制是19。 现在，我们看到堆栈信息中包括十六进制值，需要知道这些值是如何传递的。\n\n# 结论\n\nGo运行时提供了大量信息来帮助我们调试程序。在这篇文章中，我们专注于堆栈跟踪。分析在整个调用堆栈中传递给每个函数的值的能力是很有用的。它不止一次帮助我很快识别我的错误。既然您已经知道如何读取堆栈跟踪，那么希望您可以在下次发生堆栈跟踪时利用这些知识。\n","slug":"Go里面的堆栈跟踪","published":1,"updated":"2018-08-10T08:07:40.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3g0006u5n930kw84r2","content":"<p>转载翻译，原文地址：<a href=\"https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html\" target=\"_blank\" rel=\"noopener\">Stack Traces In Go</a></p>\n<h1 id=\"Go里面的堆栈跟踪\"><a href=\"#Go里面的堆栈跟踪\" class=\"headerlink\" title=\"Go里面的堆栈跟踪\"></a>Go里面的堆栈跟踪</h1><p>在Go语言中有一些调试技巧能帮助我们快速找到问题，有时候你想尽可能多的记录异常但仍觉得不够，搞清楚堆栈的意义有助于定位Bug或者记录更完整的信息。</p>\n<p>本文将讨论堆栈跟踪信息以及如何在堆栈中识别函数所传递的参数。</p>\n<h2 id=\"Functions-函数的情况\"><a href=\"#Functions-函数的情况\" class=\"headerlink\" title=\"Functions (函数的情况)\"></a>Functions (函数的情况)</h2><p>先从这段代码开始：</p>\n<h3 id=\"清单1\"><a href=\"#清单1\" class=\"headerlink\" title=\"清单1\"></a>清单1</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   slice := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">   Example(slice, <span class=\"string\">\"hello\"</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example</span><span class=\"params\">(slice []<span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>, i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">panic</span>(<span class=\"string\">\"Want stack trace\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>清单1</strong>显示了一个程序，其中main函数在第05行调用Example函数.Example函数在第08行声明并接受三个参数，1个string类型的slice, 1个string和1个integer, 。 Example执行的唯一代码是调用第09行的内置函数panic，它会立即生成堆栈跟踪：</p>\n<h3 id=\"清单2\"><a href=\"#清单2\" class=\"headerlink\" title=\"清单2\"></a>清单2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Panic: Want stack trace</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br><span class=\"line\">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">        temp/main.go:9 +0x64</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">        temp/main.go:5 +0x85</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 2 [runnable]:</span><br><span class=\"line\">runtime.forcegchelper()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/proc.go:90</span><br><span class=\"line\">runtime.goexit()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 3 [runnable]:</span><br><span class=\"line\">runtime.bgsweep()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/mgc0.go:82</span><br><span class=\"line\">runtime.goexit()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1</span><br></pre></td></tr></table></figure>\n<p><strong>清单2</strong>中的堆栈跟踪显示了panic是存在的所有goroutine,每个程序的状态以及相应goroutine下的调用堆栈。</p>\n<p>正在运行的goroutine和导致堆栈跟踪的goroutine将位于顶部。让我们关注报了panic的goroutine.</p>\n<h3 id=\"清单3\"><a href=\"#清单3\" class=\"headerlink\" title=\"清单3\"></a>清单3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 goroutine 1 [running]:</span><br><span class=\"line\">02 main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:9 +0x64</span><br><span class=\"line\">03 main.main()</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:5 +0x85</span><br></pre></td></tr></table></figure>\n<p>清单三中地 01 行的的堆栈跟踪显示goroutine 1 在panic之前运行，在第 02 行，我们看到panic的代码在package main中的Example函数中。缩进的行显示了次函数所在的代码文件和路径以及正在执行的代码行。在这种情况下，第 09 行的代码正在运行，这是对panic的调用。</p>\n<p>第 03 行显示调用Example的函数的名称，这是main包中的主要功能，在函数名称下面，缩进的行显示了对Example进行调用的代码文件的路径和代码行</p>\n<p>堆栈工资显示goroutine范围内的函数调用链，直到发生panic发生，现在让我们关注传递给Example函数的每个参数的值：</p>\n<h3 id=\"清单4\"><a href=\"#清单4\" class=\"headerlink\" title=\"清单4\"></a>清单4</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Call to Example by main.</span><br><span class=\"line\">slice := make([]string, 2, 4)</span><br><span class=\"line\">Example(slice, &quot;hello&quot;, 10)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单4</strong> 这里展示了在main中带参数调用Example函数时的堆栈信息 。 将堆栈跟踪中的值与函数声明进行比较时，它似乎不匹配。 Example函数的声明接受三个参数，但堆栈跟踪显示六个十六进制值。 要理解值如何与参数匹配的关键需要知道每个参数类型的实现。</p>\n<p>让我们从第一个参数开始，它是一个1个string类型的slice， slice是Go中的引用类型。 这意味着slice的值是一个标题值，其中包含指向某些基础数据的指针。 在slice的情况下，标头值是三字结构，其包含指向底层阵列的指针，slice的长度和容量。 与切片标头关联的值由堆栈跟踪中的前三个值表示：</p>\n<h3 id=\"清单5\"><a href=\"#清单5\" class=\"headerlink\" title=\"清单5\"></a>清单5</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Slice parameter value</span><br><span class=\"line\">slice := make([]string, 2, 4)</span><br><span class=\"line\"></span><br><span class=\"line\">// Slice header values</span><br><span class=\"line\">Pointer:  0x2080c3f50</span><br><span class=\"line\">Length:   0x2</span><br><span class=\"line\">Capacity: 0x4</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单5</strong> 显示了堆栈跟踪中的前三个值如何与slice参数匹配。 第一个值表示指向底层字符串数组的指针。 用于初始化slice的长度和容量的数字与第二个和第三个值匹配 。这三个值表示切片标头的每个值，即Example函数的第一个参数。</p>\n<p><strong>Figure 1</strong></p>\n<p><img src=\"/2018/07/18/Go里面的堆栈跟踪/Figure3.png\" alt=\"\"></p>\n<p>现在让我们看一下第二个参数，它是一个string。 string也是引用类型，但此标头值是不可变的。 字符串的标头值被声明为两部分，包含指向底层字节数组的指针和字符串的长度：</p>\n<h3 id=\"清单6\"><a href=\"#清单6\" class=\"headerlink\" title=\"清单6\"></a>清单6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// String parameter value</span><br><span class=\"line\">&quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// String header values</span><br><span class=\"line\">Pointer: 0x425c0</span><br><span class=\"line\">Length:  0x5</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单6</strong>显示了堆栈跟踪中的第四个和第五个值如何与string参数匹配。 第四个值表示指向底层字节数组的指针，第五个值表示字符串的长度为5。字符串</p>\n<p>“hello”</p>\n<p>需要5个字节。 这两个值表示字符串标题的每个值，即Example函数的第二个参数。</p>\n<p><strong>Figure 2</strong></p>\n<p><img src=\"/2018/07/18/Go里面的堆栈跟踪/Figure2.png\" alt=\"\"></p>\n<p>第三个参数是一个整数，它是一个单值：</p>\n<h3 id=\"清单7\"><a href=\"#清单7\" class=\"headerlink\" title=\"清单7\"></a>清单7</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Integer parameter value</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\">// Integer value</span><br><span class=\"line\">Base 16: 0xa</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单7</strong>显示了堆栈跟踪中的最后一个值如何与int类型的参数匹配。 trace中的最后一个值是十六进制数0xa，它的值是10.与该参数传递的值相同。 该值代表Example函数中的第三个参数。</p>\n<p><strong>Figure 3</strong></p>\n<p><img src=\"/2018/07/18/Go里面的堆栈跟踪/Figure3.png\" alt=\"\"></p>\n<h2 id=\"Methods-方法的情况\"><a href=\"#Methods-方法的情况\" class=\"headerlink\" title=\"Methods(方法的情况)\"></a>Methods(方法的情况)</h2><p>如果我们将Example作为结构体的方法会怎么样呢?</p>\n<h3 id=\"清单8\"><a href=\"#清单8\" class=\"headerlink\" title=\"清单8\"></a>清单8</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">01</span> <span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"number\">02</span></span><br><span class=\"line\"><span class=\"number\">03</span> <span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"number\">04</span></span><br><span class=\"line\"><span class=\"number\">05</span> <span class=\"keyword\">type</span> trace <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"number\">06</span></span><br><span class=\"line\"><span class=\"number\">07</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">08</span>     slice := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">09</span></span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"keyword\">var</span> t trace</span><br><span class=\"line\"><span class=\"number\">11</span>     t.Example(slice, <span class=\"string\">\"hello\"</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">12</span> &#125;</span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">14</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *trace)</span> <span class=\"title\">Example</span><span class=\"params\">(slice []<span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>, i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">15</span>     fmt.Printf(<span class=\"string\">\"Receiver Address: %p\\n\"</span>, t)</span><br><span class=\"line\"><span class=\"number\">16</span>     <span class=\"built_in\">panic</span>(<span class=\"string\">\"Want stack trace\"</span>)</span><br><span class=\"line\"><span class=\"number\">17</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>清单8</strong>通过在第05行声明一个名为trace的新类型，并更改程序，将Example申明为trace类型的方法。通过使用trace类型的指针接收器重新声明该函数来完成转换。 然后在第10行，将变量t申明为trace类型，并且在第11行进行方法调用。</p>\n<p>由于该方法是使用指针声明的，因此Go将获取变量t的地址来支持接收者类型，即使方法调用是使用值来完成的。 这次运行程序时，堆栈跟踪有点不同：</p>\n<h3 id=\"清单9\"><a href=\"#清单9\" class=\"headerlink\" title=\"清单9\"></a>清单9</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Receiver Address: 0x1553a8</span><br><span class=\"line\">panic: Want stack trace</span><br><span class=\"line\"></span><br><span class=\"line\">01 goroutine 1 [running]:</span><br><span class=\"line\">02 main.(*trace).Example(0x1553a8, 0x2081b7f50, 0x2, 0x4, 0xdc1d0, 0x5, 0xa)</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:16 +0x116</span><br><span class=\"line\"></span><br><span class=\"line\">03 main.main()</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:11 +0xae</span><br></pre></td></tr></table></figure>\n<p>在<strong>清单9</strong>中你应该注意的第一件事是第02行的堆栈跟踪清楚的显示这是一个使用指针接收器调用的方法。现在函数的名称显示的样子是： 在package名字和方法名之间多出了”*trace”字样 。 需要注意的第二件事是参数列表的第1个参数标明了结构体(t)地址。 我们从堆栈跟踪中看到了这个实现细节。</p>\n<h2 id=\"Packing（打包）\"><a href=\"#Packing（打包）\" class=\"headerlink\" title=\"Packing（打包）\"></a>Packing（打包）</h2><p>如果有多个参数可以填充到一个single word, 那么堆栈跟踪中参数的值将打包在一起 ：</p>\n<h3 id=\"清单10\"><a href=\"#清单10\" class=\"headerlink\" title=\"清单10\"></a>清单10</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">01</span> <span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"number\">02</span></span><br><span class=\"line\"><span class=\"number\">03</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">04</span>     Example(<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"><span class=\"number\">05</span> &#125;</span><br><span class=\"line\"><span class=\"number\">06</span> </span><br><span class=\"line\"><span class=\"number\">07</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example</span><span class=\"params\">(b1, b2, b3 <span class=\"keyword\">bool</span>, i <span class=\"keyword\">uint8</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">08</span>     <span class=\"built_in\">panic</span>(<span class=\"string\">\"Want stack trace\"</span>)</span><br><span class=\"line\"><span class=\"number\">09</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>这个例子修改Example函数改为接收4个参数：3个bool型和1个八位无符号整型。bool值也是用8个bit表示，所以在32位和64位架构下，4个参数可以合并为一个single word。 当程序运行时，它会产生一个有趣的堆栈跟踪 :</p>\n<h3 id=\"清单11\"><a href=\"#清单11\" class=\"headerlink\" title=\"清单11\"></a>清单11</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 goroutine 1 [running]:</span><br><span class=\"line\">02 main.Example(0x19010001)</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:8 +0x64</span><br><span class=\"line\">03 main.main()</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:4 +0x32</span><br></pre></td></tr></table></figure>\n<p>对于对Example的调用，堆栈跟踪中没有四个值，而是有一个值。所有四个单独的8位值都拼凑成一个单词：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Parameter values</span><br><span class=\"line\">true, false, true, 25</span><br><span class=\"line\"></span><br><span class=\"line\">// Word value</span><br><span class=\"line\">Bits    Binary      Hex   Value</span><br><span class=\"line\">00-07   0000 0001   01    true</span><br><span class=\"line\">08-15   0000 0000   00    false</span><br><span class=\"line\">16-23   0000 0001   01    true</span><br><span class=\"line\">24-31   0001 1001   19    25</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(b1, b2, b3 bool, i uint8)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x19010001)</span><br></pre></td></tr></table></figure>\n<p><strong>清单12</strong>显示了堆栈跟踪中的值是如何与传入的所有四个参数值匹配.true的值是一个8位值，用1表示，false的值是0.二进制25的值是11001，转换为十六进制是19。 现在，我们看到堆栈信息中包括十六进制值，需要知道这些值是如何传递的。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>Go运行时提供了大量信息来帮助我们调试程序。在这篇文章中，我们专注于堆栈跟踪。分析在整个调用堆栈中传递给每个函数的值的能力是很有用的。它不止一次帮助我很快识别我的错误。既然您已经知道如何读取堆栈跟踪，那么希望您可以在下次发生堆栈跟踪时利用这些知识。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载翻译，原文地址：<a href=\"https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html\" target=\"_blank\" rel=\"noopener\">Stack Traces In Go</a></p>\n<h1 id=\"Go里面的堆栈跟踪\"><a href=\"#Go里面的堆栈跟踪\" class=\"headerlink\" title=\"Go里面的堆栈跟踪\"></a>Go里面的堆栈跟踪</h1><p>在Go语言中有一些调试技巧能帮助我们快速找到问题，有时候你想尽可能多的记录异常但仍觉得不够，搞清楚堆栈的意义有助于定位Bug或者记录更完整的信息。</p>\n<p>本文将讨论堆栈跟踪信息以及如何在堆栈中识别函数所传递的参数。</p>\n<h2 id=\"Functions-函数的情况\"><a href=\"#Functions-函数的情况\" class=\"headerlink\" title=\"Functions (函数的情况)\"></a>Functions (函数的情况)</h2><p>先从这段代码开始：</p>\n<h3 id=\"清单1\"><a href=\"#清单1\" class=\"headerlink\" title=\"清单1\"></a>清单1</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   slice := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">   Example(slice, <span class=\"string\">\"hello\"</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example</span><span class=\"params\">(slice []<span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>, i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">panic</span>(<span class=\"string\">\"Want stack trace\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>清单1</strong>显示了一个程序，其中main函数在第05行调用Example函数.Example函数在第08行声明并接受三个参数，1个string类型的slice, 1个string和1个integer, 。 Example执行的唯一代码是调用第09行的内置函数panic，它会立即生成堆栈跟踪：</p>\n<h3 id=\"清单2\"><a href=\"#清单2\" class=\"headerlink\" title=\"清单2\"></a>清单2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Panic: Want stack trace</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br><span class=\"line\">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">        temp/main.go:9 +0x64</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">        temp/main.go:5 +0x85</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 2 [runnable]:</span><br><span class=\"line\">runtime.forcegchelper()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/proc.go:90</span><br><span class=\"line\">runtime.goexit()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 3 [runnable]:</span><br><span class=\"line\">runtime.bgsweep()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/mgc0.go:82</span><br><span class=\"line\">runtime.goexit()</span><br><span class=\"line\">        /Users/bill/go/src/runtime/asm_amd64.s:2232 +0x1</span><br></pre></td></tr></table></figure>\n<p><strong>清单2</strong>中的堆栈跟踪显示了panic是存在的所有goroutine,每个程序的状态以及相应goroutine下的调用堆栈。</p>\n<p>正在运行的goroutine和导致堆栈跟踪的goroutine将位于顶部。让我们关注报了panic的goroutine.</p>\n<h3 id=\"清单3\"><a href=\"#清单3\" class=\"headerlink\" title=\"清单3\"></a>清单3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 goroutine 1 [running]:</span><br><span class=\"line\">02 main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:9 +0x64</span><br><span class=\"line\">03 main.main()</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:5 +0x85</span><br></pre></td></tr></table></figure>\n<p>清单三中地 01 行的的堆栈跟踪显示goroutine 1 在panic之前运行，在第 02 行，我们看到panic的代码在package main中的Example函数中。缩进的行显示了次函数所在的代码文件和路径以及正在执行的代码行。在这种情况下，第 09 行的代码正在运行，这是对panic的调用。</p>\n<p>第 03 行显示调用Example的函数的名称，这是main包中的主要功能，在函数名称下面，缩进的行显示了对Example进行调用的代码文件的路径和代码行</p>\n<p>堆栈工资显示goroutine范围内的函数调用链，直到发生panic发生，现在让我们关注传递给Example函数的每个参数的值：</p>\n<h3 id=\"清单4\"><a href=\"#清单4\" class=\"headerlink\" title=\"清单4\"></a>清单4</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Call to Example by main.</span><br><span class=\"line\">slice := make([]string, 2, 4)</span><br><span class=\"line\">Example(slice, &quot;hello&quot;, 10)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单4</strong> 这里展示了在main中带参数调用Example函数时的堆栈信息 。 将堆栈跟踪中的值与函数声明进行比较时，它似乎不匹配。 Example函数的声明接受三个参数，但堆栈跟踪显示六个十六进制值。 要理解值如何与参数匹配的关键需要知道每个参数类型的实现。</p>\n<p>让我们从第一个参数开始，它是一个1个string类型的slice， slice是Go中的引用类型。 这意味着slice的值是一个标题值，其中包含指向某些基础数据的指针。 在slice的情况下，标头值是三字结构，其包含指向底层阵列的指针，slice的长度和容量。 与切片标头关联的值由堆栈跟踪中的前三个值表示：</p>\n<h3 id=\"清单5\"><a href=\"#清单5\" class=\"headerlink\" title=\"清单5\"></a>清单5</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Slice parameter value</span><br><span class=\"line\">slice := make([]string, 2, 4)</span><br><span class=\"line\"></span><br><span class=\"line\">// Slice header values</span><br><span class=\"line\">Pointer:  0x2080c3f50</span><br><span class=\"line\">Length:   0x2</span><br><span class=\"line\">Capacity: 0x4</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单5</strong> 显示了堆栈跟踪中的前三个值如何与slice参数匹配。 第一个值表示指向底层字符串数组的指针。 用于初始化slice的长度和容量的数字与第二个和第三个值匹配 。这三个值表示切片标头的每个值，即Example函数的第一个参数。</p>\n<p><strong>Figure 1</strong></p>\n<p><img src=\"/2018/07/18/Go里面的堆栈跟踪/Figure3.png\" alt=\"\"></p>\n<p>现在让我们看一下第二个参数，它是一个string。 string也是引用类型，但此标头值是不可变的。 字符串的标头值被声明为两部分，包含指向底层字节数组的指针和字符串的长度：</p>\n<h3 id=\"清单6\"><a href=\"#清单6\" class=\"headerlink\" title=\"清单6\"></a>清单6</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// String parameter value</span><br><span class=\"line\">&quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// String header values</span><br><span class=\"line\">Pointer: 0x425c0</span><br><span class=\"line\">Length:  0x5</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单6</strong>显示了堆栈跟踪中的第四个和第五个值如何与string参数匹配。 第四个值表示指向底层字节数组的指针，第五个值表示字符串的长度为5。字符串</p>\n<p>“hello”</p>\n<p>需要5个字节。 这两个值表示字符串标题的每个值，即Example函数的第二个参数。</p>\n<p><strong>Figure 2</strong></p>\n<p><img src=\"/2018/07/18/Go里面的堆栈跟踪/Figure2.png\" alt=\"\"></p>\n<p>第三个参数是一个整数，它是一个单值：</p>\n<h3 id=\"清单7\"><a href=\"#清单7\" class=\"headerlink\" title=\"清单7\"></a>清单7</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Integer parameter value</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\">// Integer value</span><br><span class=\"line\">Base 16: 0xa</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(slice []string, str string, i int)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)</span><br></pre></td></tr></table></figure>\n<p><strong>清单7</strong>显示了堆栈跟踪中的最后一个值如何与int类型的参数匹配。 trace中的最后一个值是十六进制数0xa，它的值是10.与该参数传递的值相同。 该值代表Example函数中的第三个参数。</p>\n<p><strong>Figure 3</strong></p>\n<p><img src=\"/2018/07/18/Go里面的堆栈跟踪/Figure3.png\" alt=\"\"></p>\n<h2 id=\"Methods-方法的情况\"><a href=\"#Methods-方法的情况\" class=\"headerlink\" title=\"Methods(方法的情况)\"></a>Methods(方法的情况)</h2><p>如果我们将Example作为结构体的方法会怎么样呢?</p>\n<h3 id=\"清单8\"><a href=\"#清单8\" class=\"headerlink\" title=\"清单8\"></a>清单8</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">01</span> <span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"number\">02</span></span><br><span class=\"line\"><span class=\"number\">03</span> <span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"number\">04</span></span><br><span class=\"line\"><span class=\"number\">05</span> <span class=\"keyword\">type</span> trace <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"number\">06</span></span><br><span class=\"line\"><span class=\"number\">07</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">08</span>     slice := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">09</span></span><br><span class=\"line\"><span class=\"number\">10</span>     <span class=\"keyword\">var</span> t trace</span><br><span class=\"line\"><span class=\"number\">11</span>     t.Example(slice, <span class=\"string\">\"hello\"</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">12</span> &#125;</span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">14</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *trace)</span> <span class=\"title\">Example</span><span class=\"params\">(slice []<span class=\"keyword\">string</span>, str <span class=\"keyword\">string</span>, i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">15</span>     fmt.Printf(<span class=\"string\">\"Receiver Address: %p\\n\"</span>, t)</span><br><span class=\"line\"><span class=\"number\">16</span>     <span class=\"built_in\">panic</span>(<span class=\"string\">\"Want stack trace\"</span>)</span><br><span class=\"line\"><span class=\"number\">17</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>清单8</strong>通过在第05行声明一个名为trace的新类型，并更改程序，将Example申明为trace类型的方法。通过使用trace类型的指针接收器重新声明该函数来完成转换。 然后在第10行，将变量t申明为trace类型，并且在第11行进行方法调用。</p>\n<p>由于该方法是使用指针声明的，因此Go将获取变量t的地址来支持接收者类型，即使方法调用是使用值来完成的。 这次运行程序时，堆栈跟踪有点不同：</p>\n<h3 id=\"清单9\"><a href=\"#清单9\" class=\"headerlink\" title=\"清单9\"></a>清单9</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Receiver Address: 0x1553a8</span><br><span class=\"line\">panic: Want stack trace</span><br><span class=\"line\"></span><br><span class=\"line\">01 goroutine 1 [running]:</span><br><span class=\"line\">02 main.(*trace).Example(0x1553a8, 0x2081b7f50, 0x2, 0x4, 0xdc1d0, 0x5, 0xa)</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:16 +0x116</span><br><span class=\"line\"></span><br><span class=\"line\">03 main.main()</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:11 +0xae</span><br></pre></td></tr></table></figure>\n<p>在<strong>清单9</strong>中你应该注意的第一件事是第02行的堆栈跟踪清楚的显示这是一个使用指针接收器调用的方法。现在函数的名称显示的样子是： 在package名字和方法名之间多出了”*trace”字样 。 需要注意的第二件事是参数列表的第1个参数标明了结构体(t)地址。 我们从堆栈跟踪中看到了这个实现细节。</p>\n<h2 id=\"Packing（打包）\"><a href=\"#Packing（打包）\" class=\"headerlink\" title=\"Packing（打包）\"></a>Packing（打包）</h2><p>如果有多个参数可以填充到一个single word, 那么堆栈跟踪中参数的值将打包在一起 ：</p>\n<h3 id=\"清单10\"><a href=\"#清单10\" class=\"headerlink\" title=\"清单10\"></a>清单10</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">01</span> <span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"number\">02</span></span><br><span class=\"line\"><span class=\"number\">03</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">04</span>     Example(<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"><span class=\"number\">05</span> &#125;</span><br><span class=\"line\"><span class=\"number\">06</span> </span><br><span class=\"line\"><span class=\"number\">07</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example</span><span class=\"params\">(b1, b2, b3 <span class=\"keyword\">bool</span>, i <span class=\"keyword\">uint8</span>)</span></span> &#123;</span><br><span class=\"line\"><span class=\"number\">08</span>     <span class=\"built_in\">panic</span>(<span class=\"string\">\"Want stack trace\"</span>)</span><br><span class=\"line\"><span class=\"number\">09</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>这个例子修改Example函数改为接收4个参数：3个bool型和1个八位无符号整型。bool值也是用8个bit表示，所以在32位和64位架构下，4个参数可以合并为一个single word。 当程序运行时，它会产生一个有趣的堆栈跟踪 :</p>\n<h3 id=\"清单11\"><a href=\"#清单11\" class=\"headerlink\" title=\"清单11\"></a>清单11</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01 goroutine 1 [running]:</span><br><span class=\"line\">02 main.Example(0x19010001)</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:8 +0x64</span><br><span class=\"line\">03 main.main()</span><br><span class=\"line\">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</span><br><span class=\"line\">           temp/main.go:4 +0x32</span><br></pre></td></tr></table></figure>\n<p>对于对Example的调用，堆栈跟踪中没有四个值，而是有一个值。所有四个单独的8位值都拼凑成一个单词：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Parameter values</span><br><span class=\"line\">true, false, true, 25</span><br><span class=\"line\"></span><br><span class=\"line\">// Word value</span><br><span class=\"line\">Bits    Binary      Hex   Value</span><br><span class=\"line\">00-07   0000 0001   01    true</span><br><span class=\"line\">08-15   0000 0000   00    false</span><br><span class=\"line\">16-23   0000 0001   01    true</span><br><span class=\"line\">24-31   0001 1001   19    25</span><br><span class=\"line\"></span><br><span class=\"line\">// Declaration</span><br><span class=\"line\">main.Example(b1, b2, b3 bool, i uint8)</span><br><span class=\"line\"></span><br><span class=\"line\">// Stack trace</span><br><span class=\"line\">main.Example(0x19010001)</span><br></pre></td></tr></table></figure>\n<p><strong>清单12</strong>显示了堆栈跟踪中的值是如何与传入的所有四个参数值匹配.true的值是一个8位值，用1表示，false的值是0.二进制25的值是11001，转换为十六进制是19。 现在，我们看到堆栈信息中包括十六进制值，需要知道这些值是如何传递的。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>Go运行时提供了大量信息来帮助我们调试程序。在这篇文章中，我们专注于堆栈跟踪。分析在整个调用堆栈中传递给每个函数的值的能力是很有用的。它不止一次帮助我很快识别我的错误。既然您已经知道如何读取堆栈跟踪，那么希望您可以在下次发生堆栈跟踪时利用这些知识。</p>\n"},{"title":"defer和追踪","date":"2017-06-15T07:46:28.000Z","_content":"## defer关键字\n\n关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 `return` 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 `return` 语句同样可以包含一些操作，而不是单纯地返回某个值）。\n\n关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 `finally` 语句块，它一般用于释放某些已分配的资源。\n\n### 示例 6.8 [defer.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go)：\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n\tfunction1()\n}\n\nfunc function1() {\n\tfmt.Printf(\"In function1 at the top\\n\")\n\tdefer function2()\n\tfmt.Printf(\"In function1 at the bottom!\\n\")\n}\n\nfunc function2() {\n\tfmt.Printf(\"function2: Deferred until the end of the calling function!\")\n}\n```\n\n输出：\n\n```\nIn Function1 at the top\nIn Function1 at the bottom!\nFunction2: Deferred until the end of the calling function!\n```\n\n请将 defer 关键字去掉并对比输出结果。\n\n使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 `0`：\n\n```go\nfunc a() {\n\ti := 0\n\tdefer fmt.Println(i)\n\ti++\n\treturn\n}\n```\n\n当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：\n\n```go\nfunc f() {\n\tfor i := 0; i < 5; i++ {\n\t\tdefer fmt.Printf(\"%d \", i)\n\t}\n}\n```\n\n上面的代码将会输出：`4 3 2 1 0`。\n\n### 关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\n\n例如：\n\n1. 关闭文件流：\n\n   // open a file\n   defer file.Close() （详见第 12.2 节）\n\n2. 解锁一个加锁的资源\n\n   mu.Lock()\n   defer mu.Unlock() （详见第 9.3 节）\n\n3. 打印最终报告\n\n   printHeader()\n   defer printFooter()\n\n4. 关闭数据库链接\n\n   // open a database connection\n   defer disconnectFromDB()\n\n合理使用 defer 语句能够使得代码更加简洁。\n\n以下代码模拟了上面描述的第 4 种情况：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdoDBOperations()\n}\n\nfunc connectToDB() {\n\tfmt.Println(\"ok, connected to db\")\n}\n\nfunc disconnectFromDB() {\n\tfmt.Println(\"ok, disconnected from db\")\n}\n\nfunc doDBOperations() {\n\tconnectToDB()\n\tfmt.Println(\"Defering the database disconnect.\")\n\tdefer disconnectFromDB() //function called here with defer\n\tfmt.Println(\"Doing some DB operations ...\")\n\tfmt.Println(\"Oops! some crash or network error ...\")\n\tfmt.Println(\"Returning from function here!\")\n\treturn //terminate the program\n\t// deferred function executed here just before actually returning, even if\n\t// there is a return or abnormal termination before\n}\n```\n\n输出：\n\n```\nok, connected to db\nDefering the database disconnect.\nDoing some DB operations ...\nOops! some crash or network error ...\nReturning from function here!\nok, disconnected from db\n```\n\n### 使用 defer 语句实现代码追踪\n\n一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：\n\n```go\nfunc trace(s string) { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n```\n\n以下代码展示了何时调用两个函数：\n\n示例 6.10 [defer_tracing.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go):\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\nfunc a() {\n\ttrace(\"a\")\n\tdefer untrace(\"a\")\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\ttrace(\"b\")\n\tdefer untrace(\"b\")\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n输出：\n\n```\nentering: b\nin b\nentering: a\nin a\nleaving: a\nleaving: b\n```\n\n上面的代码还可以修改为更加简便的版本（示例 6.11 [defer_tracing2.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go)）：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string) string {\n\tfmt.Println(\"entering:\", s)\n\treturn s\n}\n\nfunc un(s string) {\n\tfmt.Println(\"leaving:\", s)\n}\n\nfunc a() {\n\tdefer un(trace(\"a\"))\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\tdefer un(trace(\"b\"))\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n### 使用 defer 语句来记录函数的参数与返回值\n\n下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 [defer_logvalues.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go)）：\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n)\n\nfunc func1(s string) (n int, err error) {\n\tdefer func() {\n\t\tlog.Printf(\"func1(%q) = %d, %v\", s, n, err)\n\t}()\n\treturn 7, io.EOF\n}\n\nfunc main() {\n\tfunc1(\"Go\")\n}\n```\n\n输出：\n\n```\nOutput: 2011/10/04 10:46:11 func1(\"Go\") = 7, EOF\n```","source":"_posts/defer和追踪.md","raw":"---\ntitle: defer和追踪\ndate: 2017-06-15 15:46:28\ntags: golang\ncategories: Golang\n---\n## defer关键字\n\n关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 `return` 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 `return` 语句同样可以包含一些操作，而不是单纯地返回某个值）。\n\n关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 `finally` 语句块，它一般用于释放某些已分配的资源。\n\n### 示例 6.8 [defer.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go)：\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n\tfunction1()\n}\n\nfunc function1() {\n\tfmt.Printf(\"In function1 at the top\\n\")\n\tdefer function2()\n\tfmt.Printf(\"In function1 at the bottom!\\n\")\n}\n\nfunc function2() {\n\tfmt.Printf(\"function2: Deferred until the end of the calling function!\")\n}\n```\n\n输出：\n\n```\nIn Function1 at the top\nIn Function1 at the bottom!\nFunction2: Deferred until the end of the calling function!\n```\n\n请将 defer 关键字去掉并对比输出结果。\n\n使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 `0`：\n\n```go\nfunc a() {\n\ti := 0\n\tdefer fmt.Println(i)\n\ti++\n\treturn\n}\n```\n\n当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：\n\n```go\nfunc f() {\n\tfor i := 0; i < 5; i++ {\n\t\tdefer fmt.Printf(\"%d \", i)\n\t}\n}\n```\n\n上面的代码将会输出：`4 3 2 1 0`。\n\n### 关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\n\n例如：\n\n1. 关闭文件流：\n\n   // open a file\n   defer file.Close() （详见第 12.2 节）\n\n2. 解锁一个加锁的资源\n\n   mu.Lock()\n   defer mu.Unlock() （详见第 9.3 节）\n\n3. 打印最终报告\n\n   printHeader()\n   defer printFooter()\n\n4. 关闭数据库链接\n\n   // open a database connection\n   defer disconnectFromDB()\n\n合理使用 defer 语句能够使得代码更加简洁。\n\n以下代码模拟了上面描述的第 4 种情况：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdoDBOperations()\n}\n\nfunc connectToDB() {\n\tfmt.Println(\"ok, connected to db\")\n}\n\nfunc disconnectFromDB() {\n\tfmt.Println(\"ok, disconnected from db\")\n}\n\nfunc doDBOperations() {\n\tconnectToDB()\n\tfmt.Println(\"Defering the database disconnect.\")\n\tdefer disconnectFromDB() //function called here with defer\n\tfmt.Println(\"Doing some DB operations ...\")\n\tfmt.Println(\"Oops! some crash or network error ...\")\n\tfmt.Println(\"Returning from function here!\")\n\treturn //terminate the program\n\t// deferred function executed here just before actually returning, even if\n\t// there is a return or abnormal termination before\n}\n```\n\n输出：\n\n```\nok, connected to db\nDefering the database disconnect.\nDoing some DB operations ...\nOops! some crash or network error ...\nReturning from function here!\nok, disconnected from db\n```\n\n### 使用 defer 语句实现代码追踪\n\n一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：\n\n```go\nfunc trace(s string) { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n```\n\n以下代码展示了何时调用两个函数：\n\n示例 6.10 [defer_tracing.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go):\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\nfunc a() {\n\ttrace(\"a\")\n\tdefer untrace(\"a\")\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\ttrace(\"b\")\n\tdefer untrace(\"b\")\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n输出：\n\n```\nentering: b\nin b\nentering: a\nin a\nleaving: a\nleaving: b\n```\n\n上面的代码还可以修改为更加简便的版本（示例 6.11 [defer_tracing2.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go)）：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc trace(s string) string {\n\tfmt.Println(\"entering:\", s)\n\treturn s\n}\n\nfunc un(s string) {\n\tfmt.Println(\"leaving:\", s)\n}\n\nfunc a() {\n\tdefer un(trace(\"a\"))\n\tfmt.Println(\"in a\")\n}\n\nfunc b() {\n\tdefer un(trace(\"b\"))\n\tfmt.Println(\"in b\")\n\ta()\n}\n\nfunc main() {\n\tb()\n}\n```\n\n### 使用 defer 语句来记录函数的参数与返回值\n\n下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 [defer_logvalues.go](https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go)）：\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n)\n\nfunc func1(s string) (n int, err error) {\n\tdefer func() {\n\t\tlog.Printf(\"func1(%q) = %d, %v\", s, n, err)\n\t}()\n\treturn 7, io.EOF\n}\n\nfunc main() {\n\tfunc1(\"Go\")\n}\n```\n\n输出：\n\n```\nOutput: 2011/10/04 10:46:11 func1(\"Go\") = 7, EOF\n```","slug":"defer和追踪","published":1,"updated":"2018-08-10T05:53:04.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3i0008u5n9rky4bnfz","content":"<h2 id=\"defer关键字\"><a href=\"#defer关键字\" class=\"headerlink\" title=\"defer关键字\"></a>defer关键字</h2><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p>\n<p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p>\n<h3 id=\"示例-6-8-defer-go：\"><a href=\"#示例-6-8-defer-go：\" class=\"headerlink\" title=\"示例 6.8 defer.go：\"></a>示例 6.8 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go\">defer.go</a>：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunction1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the top\\n\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> function2()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the bottom!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"function2: Deferred until the end of the calling function!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In Function1 at the top</span><br><span class=\"line\">In Function1 at the bottom!</span><br><span class=\"line\">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure>\n<p>请将 defer 关键字去掉并对比输出结果。</p>\n<p>使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 <code>0</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\ti++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">\"%d \"</span>, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将会输出：<code>4 3 2 1 0</code>。</p>\n<h3 id=\"关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\"><a href=\"#关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\" class=\"headerlink\" title=\"关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\"></a>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，</h3><p>例如：</p>\n<ol>\n<li><p>关闭文件流：</p>\n<p>// open a file<br>defer file.Close() （详见第 12.2 节）</p>\n</li>\n<li><p>解锁一个加锁的资源</p>\n<p>mu.Lock()<br>defer mu.Unlock() （详见第 9.3 节）</p>\n</li>\n<li><p>打印最终报告</p>\n<p>printHeader()<br>defer printFooter()</p>\n</li>\n<li><p>关闭数据库链接</p>\n<p>// open a database connection<br>defer disconnectFromDB()</p>\n</li>\n</ol>\n<p>合理使用 defer 语句能够使得代码更加简洁。</p>\n<p>以下代码模拟了上面描述的第 4 种情况：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdoDBOperations()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">connectToDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, connected to db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disconnectFromDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, disconnected from db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doDBOperations</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconnectToDB()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Defering the database disconnect.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> disconnectFromDB() <span class=\"comment\">//function called here with defer</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Doing some DB operations ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Oops! some crash or network error ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Returning from function here!\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"comment\">//terminate the program</span></span><br><span class=\"line\">\t<span class=\"comment\">// deferred function executed here just before actually returning, even if</span></span><br><span class=\"line\">\t<span class=\"comment\">// there is a return or abnormal termination before</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ok, connected to db</span><br><span class=\"line\">Defering the database disconnect.</span><br><span class=\"line\">Doing some DB operations ...</span><br><span class=\"line\">Oops! some crash or network error ...</span><br><span class=\"line\">Returning from function here!</span><br><span class=\"line\">ok, disconnected from db</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句实现代码追踪\"><a href=\"#使用-defer-语句实现代码追踪\" class=\"headerlink\" title=\"使用 defer 语句实现代码追踪\"></a>使用 defer 语句实现代码追踪</h3><p>一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br></pre></td></tr></table></figure>\n<p>以下代码展示了何时调用两个函数：</p>\n<p>示例 6.10 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go\">defer_tracing.go</a>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span>   &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entering: b</span><br><span class=\"line\">in b</span><br><span class=\"line\">entering: a</span><br><span class=\"line\">in a</span><br><span class=\"line\">leaving: a</span><br><span class=\"line\">leaving: b</span><br></pre></td></tr></table></figure>\n<p>上面的代码还可以修改为更加简便的版本（示例 6.11 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go\">defer_tracing2.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"entering:\"</span>, s)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">un</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"leaving:\"</span>, s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句来记录函数的参数与返回值\"><a href=\"#使用-defer-语句来记录函数的参数与返回值\" class=\"headerlink\" title=\"使用 defer 语句来记录函数的参数与返回值\"></a>使用 defer 语句来记录函数的参数与返回值</h3><p>下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go\">defer_logvalues.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">func1</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"func1(%q) = %d, %v\"</span>, s, n, err)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">7</span>, io.EOF</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunc1(<span class=\"string\">\"Go\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"defer关键字\"><a href=\"#defer关键字\" class=\"headerlink\" title=\"defer关键字\"></a>defer关键字</h2><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 <code>return</code> 语句同样可以包含一些操作，而不是单纯地返回某个值）。</p>\n<p>关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 <code>finally</code> 语句块，它一般用于释放某些已分配的资源。</p>\n<h3 id=\"示例-6-8-defer-go：\"><a href=\"#示例-6-8-defer-go：\" class=\"headerlink\" title=\"示例 6.8 defer.go：\"></a>示例 6.8 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer.go\">defer.go</a>：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunction1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the top\\n\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> function2()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"In function1 at the bottom!\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"function2: Deferred until the end of the calling function!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In Function1 at the top</span><br><span class=\"line\">In Function1 at the bottom!</span><br><span class=\"line\">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure>\n<p>请将 defer 关键字去掉并对比输出结果。</p>\n<p>使用 defer 的语句同样可以接受参数，下面这个例子就会在执行 defer 语句时打印 <code>0</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\ti++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Printf(<span class=\"string\">\"%d \"</span>, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码将会输出：<code>4 3 2 1 0</code>。</p>\n<h3 id=\"关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\"><a href=\"#关键字-defer-允许我们进行一些函数执行完成后的收尾工作，\" class=\"headerlink\" title=\"关键字 defer 允许我们进行一些函数执行完成后的收尾工作，\"></a>关键字 defer 允许我们进行一些函数执行完成后的收尾工作，</h3><p>例如：</p>\n<ol>\n<li><p>关闭文件流：</p>\n<p>// open a file<br>defer file.Close() （详见第 12.2 节）</p>\n</li>\n<li><p>解锁一个加锁的资源</p>\n<p>mu.Lock()<br>defer mu.Unlock() （详见第 9.3 节）</p>\n</li>\n<li><p>打印最终报告</p>\n<p>printHeader()<br>defer printFooter()</p>\n</li>\n<li><p>关闭数据库链接</p>\n<p>// open a database connection<br>defer disconnectFromDB()</p>\n</li>\n</ol>\n<p>合理使用 defer 语句能够使得代码更加简洁。</p>\n<p>以下代码模拟了上面描述的第 4 种情况：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdoDBOperations()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">connectToDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, connected to db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">disconnectFromDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"ok, disconnected from db\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doDBOperations</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconnectToDB()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Defering the database disconnect.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> disconnectFromDB() <span class=\"comment\">//function called here with defer</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Doing some DB operations ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Oops! some crash or network error ...\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Returning from function here!\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"comment\">//terminate the program</span></span><br><span class=\"line\">\t<span class=\"comment\">// deferred function executed here just before actually returning, even if</span></span><br><span class=\"line\">\t<span class=\"comment\">// there is a return or abnormal termination before</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ok, connected to db</span><br><span class=\"line\">Defering the database disconnect.</span><br><span class=\"line\">Doing some DB operations ...</span><br><span class=\"line\">Oops! some crash or network error ...</span><br><span class=\"line\">Returning from function here!</span><br><span class=\"line\">ok, disconnected from db</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句实现代码追踪\"><a href=\"#使用-defer-语句实现代码追踪\" class=\"headerlink\" title=\"使用 defer 语句实现代码追踪\"></a>使用 defer 语句实现代码追踪</h3><p>一个基础但十分实用的实现代码执行追踪的方案就是在进入和离开某个函数打印相关的消息，即可以提炼为下面两个函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br></pre></td></tr></table></figure>\n<p>以下代码展示了何时调用两个函数：</p>\n<p>示例 6.10 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing.go\">defer_tracing.go</a>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span>   &#123; fmt.Println(<span class=\"string\">\"entering:\"</span>, s) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">untrace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Println(<span class=\"string\">\"leaving:\"</span>, s) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> untrace(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entering: b</span><br><span class=\"line\">in b</span><br><span class=\"line\">entering: a</span><br><span class=\"line\">in a</span><br><span class=\"line\">leaving: a</span><br><span class=\"line\">leaving: b</span><br></pre></td></tr></table></figure>\n<p>上面的代码还可以修改为更加简便的版本（示例 6.11 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_tracing2.go\">defer_tracing2.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trace</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"entering:\"</span>, s)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">un</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"leaving:\"</span>, s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"a\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in a\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> un(trace(<span class=\"string\">\"b\"</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"in b\"</span>)</span><br><span class=\"line\">\ta()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tb()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-defer-语句来记录函数的参数与返回值\"><a href=\"#使用-defer-语句来记录函数的参数与返回值\" class=\"headerlink\" title=\"使用 defer 语句来记录函数的参数与返回值\"></a>使用 defer 语句来记录函数的参数与返回值</h3><p>下面的代码展示了另一种在调试时使用 defer 语句的手法（示例 6.12 <a href=\"https://zhqqqy.github.io/2017/06/15/my-first-blog/examples/chapter_6/defer_logvalues.go\">defer_logvalues.go</a>）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">func1</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">\"func1(%q) = %d, %v\"</span>, s, n, err)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">7</span>, io.EOF</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunc1(<span class=\"string\">\"Go\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Output: 2011/10/04 10:46:11 func1(&quot;Go&quot;) = 7, EOF</span><br></pre></td></tr></table></figure>"},{"title":"codis安装及配置","date":"2017-12-12T08:21:21.000Z","_content":"\n# codis安装及配置\n\n## 一、环境安装\n\n**系统环境centos**\n\n1. Golang 环境搭建: yum install go\n\n2. codis 下载和编译:\n\n   go get -u -d github.com/CodisLabs/codis\n   cd $GOPATH/src/github.com/CodisLabs/codis\n   make\n   make gotest\n   mkdir -p /usr/local/codis/{logs,conf,scripts}\n   cp –rf bin /usr/local/codis/\n   cp config.ini /usr/local/codis/conf/\n\n   \n\n3. Codis-HA 编译\n   Codis-HA。这是一个通过 Codis 开放的 api 实现自动切换主从的工具。该工具会在检测\n   到 master 挂掉的时候将其下线并选择其中一个 slave 提升为 master 继续提供服务。\n   go get github.com/ngaut/codis-ha\n   cd codis-ha\n   go build\n   codis-ha –codis-config=localhost:18087 –productName=test\n\n4. Zookeeper集群搭建\n\n   首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。\n\n首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。\n\n```\nyum groupinstall \"Development tools\" \"Compatibility libraries\" -y \nyum install openssl-devel openssl -y\nyum install java-1.8.0-openjdk-devel java-1.8.0-openjdk -y\n```\n\n确定Java运行环境正常\n\n```\njava -version\n  openjdk version \"1.8.0101\"\n  OpenJDK Runtime Environment (build 1.8.0101-b13)\n  OpenJDK 64-Bit Server VM (build 25.101-b13, mixed mode)\n```\n\n安装二进制版本的zookeeper\n\n```\ntar xvf zookeeper-3.4.9.tar.gz -C /usr/local/ \nln -s /usr/local/zookeeper-3.4.9/ /usr/local/zookeeper \ncd /usr/local/zookeeper/conf \ncp zoo_sample.cfg zoo.cfg\n```\n\n编译zookeeper配置文件/usr/local/zookeeper/conf/zoo.cfg\n\n```\nmaxClientCnxns=60\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/data/zookeeper/db\ndataLogDir=/data/zookeeper/log\nclientPort=2181\n# cluster configure\nserver.1=10.173.225.60:2888:3888\nserver.2=10.174.33.81:2888:3888\nserver.3=10.173.224.34:2888:3888\n```\n\n```\nmkdir /data/zookeeper/{db,log} -p\n```\n\n其中2888表示zookeeper程序监听端口，3888表示zookeeper选举通信端口。\n\n下面需要生成ID，这里需要注意，myid对应的zoo.cfg的server.ID，比如第二台zookeeper主机对应的myid应该是2，以此类推，三个主机分别为：\n\n```\n10.173.225.60 echo 1 > /data/zookeeper/db/myid\n10.174.33.81 echo 2 > /data/zookeeper/db/myid\n10.173.224.34 echo 3 > /data/zookeeper/db/myid\n```\n\n然后输出环境变量。\n\n```\nexport PATH=$PATH:/usr/local/zookeeper/bin/\nsource /etc/profile\n```\n\n然后就可以启动zookeeper了。\n\n```\nzkServer.sh start\n```\n\n查看各个zookeeper节点的状态（会有一个leader节点，两个follower节点）。\n\n```\n[root@node1 ~]# zkServer.sh status \n\tMode: follower\n[root@node2 ~]# zkServer.sh status \n\tMode: leader\n[root@node3 ~]# zkServer.sh status \n\tMode: follower\n```\n\n客户端连接，可以查看相关信息。\n\n```\nzkCli.sh -server 127.0.0.1:2181\n```\n\n至此，zookeeper已经搞定了。\n\n## 二、启动服务\n\n再编译后的codis文件夹下有启动服务的脚本\n\n### 启动codis-dashboard\n\n使用 `codis-dashboard-admin.sh` 脚本启动 dashboard，并查看 dashboard 日志确认启动是否有异常。\n\ndashboard只需要启动一个\n\n配置文件dashboard.toml\n\n```\n# Set Coordinator, only accept \"zookeeper\" & \"etcd\" & \"filesystem\".\n# for zookeeper/etcd, coorinator_auth accept \"user:password\"\n# Quick Start\ncoordinator_name = \"zookeeper\"\ncoordinator_addr = \"10.173.225.60:2181,10.174.33.81:2181,10.173.224.34:2181\"\n#coordinator_name = \"zookeeper\"\n#coordinator_addr = \"127.0.0.1:2181\"\n#coordinator_auth = \"\"\n\n# Set Codis Product Name/Auth.\nproduct_name = \"codis-demo\"\nproduct_auth = \"\"\n\n# Set bind address for admin(rpc), tcp only.\nadmin_addr = \"0.0.0.0:18080\"\n```\n\n```\n./admin/codis-dashboard-admin.sh start\n tail -100 ./log/codis-dashboard.log.2017-04-08\n```\n\n### 启动codis-fe\n\n```\n./bin/codis-admin --dashboard-list --zookeeper=127.0.0.1:2181 | tee $Gopath/src/github.com/CodisLabs/codis/config/codis.json\n```\n\ncodis.json\n\n```\n[\n{\n    \"name\": \"codis-demo\",\n    \"dashboard\": \"10.174.33.81:18080\"\n }\n ]\n```\n\n启动codis-fe\n\n```\nnohup `which codis-fe` --ncpu=2 --log=/data/codis/log/fe.log --log-level=WARN \n--dashboard-list=$Gopath/src/github.com/CodisLabs/codis/config/codis.json --listen=0.0.0.0:8080 &\n```\n\n### 启动codis-proxy\n\n使用 `codis-proxy-admin.sh` 脚本启动 codis-proxy，并查看 proxy 日志确认启动是否有异常。(代理可以启动一个，也可以启动多个，但是启动的多个代理的配置必须是一样的，是同一个dashboard的地址)\n\n配置文件proxy.toml\n\n> 19 # Set bind address for admin(rpc), tcp only.\n>\n> 20 admin_addr = “10.173.225.60:11080”\n> 21\n> 22 # Set bind address for proxy, proto_type can be “tcp”, “tcp4”, “tcp6”, “unix” or “unixpacket”.\n> 23 proto_type = “tcp4”\n> 24 proxy_addr = “10.173.225.60:19000”\n> 26 # Set jodis address & session timeout\n> 27 # 1. jodis_name is short for jodis_coordinator_name, only accept “zookeeper” & “etcd”.\n> 28 # 2. jodis_addr is short for jodis_coordinator_addr\n> 29 # 3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, “user:password” is accepted.\n> 30 # 4. proxy will be registered as node:\n> 31 # if jodis*compatible = true (not suggested):32 # /zk/codis/db*{PRODUCT_NAME}/proxy-{HASHID} (compatible with Codis2.0)\n> 33 # or else\n> 34 # /jodis/{PRODUCT_NAME}/proxy-{HASHID}\n> 35 jodis_name = “”\n> 3 # jodis_addr不能写地址，不然启动报错，不知道为啥，可能没有安装jodis,\n> 36 jodis_addr = “”\n> 37 jodis_auth = “”\n> 38 jodis_timeout = “20s”\n\n```\n./admin/codis-proxy-admin.sh start\ntail -100 ./log/codis-proxy.log.2017-04-08\n```\n\n要启动多个代理需要修改脚本\n\nvi codis-proxy-admin.sh\n\n```\nCODIS_DASHBOARD_ADDR=\"10.173.225.60:18080\"\n```\n\n### 启动codis-server\n\n使用 `codis-server-admin.sh` 脚本启动 codis-server，并查看 redis 日志确认启动是否有异常。\n\n配置redis.conf 和sentinel.conf\n\n**redis.conf**\n\n> 48 # bind 127.0.0.1 ::1\n> 49 #\n> 50 # WARNING If the computer running Redis is directly exposed to the\n> 51 # internet, binding to all the interfaces is dangerous and will expose the\n> 52 # instance to everybody on the internet. So by default we uncomment the\n> 53 # following bind directive, that will force Redis to listen only into\n> 54 # the IPv4 lookback interface address (this means Redis will be able to\n> 55 # accept connections only from clients running into the same computer it\n> 56 # is running).\n> 57 #\n> 58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n> 59 # JUST COMMENT THE FOLLOWING LINE.\n> 60 # ~~\n> 61 bind 0.0.0.0\n> …….\n> …….\n> 82 # Accept connections on the specified port, default is 6379 (IANA #815344).\n> 83 # If port 0 is specified Redis will not listen on a TCP socket.\n> 84 port 6379\n\n**sentinel.conf**\n\n> 48 # bind 127.0.0.1 ::1\n> 49 #\n> 50 # WARNING If the computer running Redis is directly exposed to the\n> 51 # internet, binding to all the interfaces is dangerous and will expose the\n> 52 # instance to everybody on the internet. So by default we uncomment the\n> 53 # following bind directive, that will force Redis to listen only into\n> 54 # the IPv4 lookback interface address (this means Redis will be able to\n> 55 # accept connections only from clients running into the same computer it\n> 56 # is running).\n> 57 #\n> 58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n> 59 # JUST COMMENT THE FOLLOWING LINE.\n> 60 #~~\n> 61 bind 0.0.0.0\n> …….\n> …….\n> 82 # Accept connections on the specified port, default is 6379 (IANA #815344).\n> 83 # If port 0 is specified Redis will not listen on a TCP socket.\n> 84 port 26379\n\n```\n./admin/codis-server-admin.sh start\ntail -100 /tmp/redis_6379.log\n```\n\nredis.conf 配置中 pidfile、logfile 默认保存在 `/tmp` 目录，若启动失败，请检查当前用户是否有该目录的读写权限。\n\n### 通过fe添加group\n\n通过web浏览器访问集群管理页面(fe地址:127.0.0.1:8080) 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 但是 Group 栏为空，因为我们启动的 codis-server 并未加入到集群 添加 `NEW GROUP`，`NEW GROUP` 行输入 1，再点击 `NEW GROUP` 即可 添加 Codis Server，`Add Server` 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 `Add Server` 按钮即可，如下图所示\n![](codis安装及配置/addgroup.jpg)\n### 通过fe初始化slot\n\n新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 `rebalance all slots` 按钮来做，如下图所示，点击此按钮，我们即快速完成了一个集群的搭建。\n![](codis安装及配置/rebalance_slots.jpg)\n每次增加组之后就需要重新执行**Rebalance All Slots**","source":"_posts/codis安装及配置.md","raw":"---\ntitle: codis安装及配置\ndate: 2017-12-12 16:21:21\ntags: codis\ncategories: redis\n---\n\n# codis安装及配置\n\n## 一、环境安装\n\n**系统环境centos**\n\n1. Golang 环境搭建: yum install go\n\n2. codis 下载和编译:\n\n   go get -u -d github.com/CodisLabs/codis\n   cd $GOPATH/src/github.com/CodisLabs/codis\n   make\n   make gotest\n   mkdir -p /usr/local/codis/{logs,conf,scripts}\n   cp –rf bin /usr/local/codis/\n   cp config.ini /usr/local/codis/conf/\n\n   \n\n3. Codis-HA 编译\n   Codis-HA。这是一个通过 Codis 开放的 api 实现自动切换主从的工具。该工具会在检测\n   到 master 挂掉的时候将其下线并选择其中一个 slave 提升为 master 继续提供服务。\n   go get github.com/ngaut/codis-ha\n   cd codis-ha\n   go build\n   codis-ha –codis-config=localhost:18087 –productName=test\n\n4. Zookeeper集群搭建\n\n   首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。\n\n首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。\n\n```\nyum groupinstall \"Development tools\" \"Compatibility libraries\" -y \nyum install openssl-devel openssl -y\nyum install java-1.8.0-openjdk-devel java-1.8.0-openjdk -y\n```\n\n确定Java运行环境正常\n\n```\njava -version\n  openjdk version \"1.8.0101\"\n  OpenJDK Runtime Environment (build 1.8.0101-b13)\n  OpenJDK 64-Bit Server VM (build 25.101-b13, mixed mode)\n```\n\n安装二进制版本的zookeeper\n\n```\ntar xvf zookeeper-3.4.9.tar.gz -C /usr/local/ \nln -s /usr/local/zookeeper-3.4.9/ /usr/local/zookeeper \ncd /usr/local/zookeeper/conf \ncp zoo_sample.cfg zoo.cfg\n```\n\n编译zookeeper配置文件/usr/local/zookeeper/conf/zoo.cfg\n\n```\nmaxClientCnxns=60\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/data/zookeeper/db\ndataLogDir=/data/zookeeper/log\nclientPort=2181\n# cluster configure\nserver.1=10.173.225.60:2888:3888\nserver.2=10.174.33.81:2888:3888\nserver.3=10.173.224.34:2888:3888\n```\n\n```\nmkdir /data/zookeeper/{db,log} -p\n```\n\n其中2888表示zookeeper程序监听端口，3888表示zookeeper选举通信端口。\n\n下面需要生成ID，这里需要注意，myid对应的zoo.cfg的server.ID，比如第二台zookeeper主机对应的myid应该是2，以此类推，三个主机分别为：\n\n```\n10.173.225.60 echo 1 > /data/zookeeper/db/myid\n10.174.33.81 echo 2 > /data/zookeeper/db/myid\n10.173.224.34 echo 3 > /data/zookeeper/db/myid\n```\n\n然后输出环境变量。\n\n```\nexport PATH=$PATH:/usr/local/zookeeper/bin/\nsource /etc/profile\n```\n\n然后就可以启动zookeeper了。\n\n```\nzkServer.sh start\n```\n\n查看各个zookeeper节点的状态（会有一个leader节点，两个follower节点）。\n\n```\n[root@node1 ~]# zkServer.sh status \n\tMode: follower\n[root@node2 ~]# zkServer.sh status \n\tMode: leader\n[root@node3 ~]# zkServer.sh status \n\tMode: follower\n```\n\n客户端连接，可以查看相关信息。\n\n```\nzkCli.sh -server 127.0.0.1:2181\n```\n\n至此，zookeeper已经搞定了。\n\n## 二、启动服务\n\n再编译后的codis文件夹下有启动服务的脚本\n\n### 启动codis-dashboard\n\n使用 `codis-dashboard-admin.sh` 脚本启动 dashboard，并查看 dashboard 日志确认启动是否有异常。\n\ndashboard只需要启动一个\n\n配置文件dashboard.toml\n\n```\n# Set Coordinator, only accept \"zookeeper\" & \"etcd\" & \"filesystem\".\n# for zookeeper/etcd, coorinator_auth accept \"user:password\"\n# Quick Start\ncoordinator_name = \"zookeeper\"\ncoordinator_addr = \"10.173.225.60:2181,10.174.33.81:2181,10.173.224.34:2181\"\n#coordinator_name = \"zookeeper\"\n#coordinator_addr = \"127.0.0.1:2181\"\n#coordinator_auth = \"\"\n\n# Set Codis Product Name/Auth.\nproduct_name = \"codis-demo\"\nproduct_auth = \"\"\n\n# Set bind address for admin(rpc), tcp only.\nadmin_addr = \"0.0.0.0:18080\"\n```\n\n```\n./admin/codis-dashboard-admin.sh start\n tail -100 ./log/codis-dashboard.log.2017-04-08\n```\n\n### 启动codis-fe\n\n```\n./bin/codis-admin --dashboard-list --zookeeper=127.0.0.1:2181 | tee $Gopath/src/github.com/CodisLabs/codis/config/codis.json\n```\n\ncodis.json\n\n```\n[\n{\n    \"name\": \"codis-demo\",\n    \"dashboard\": \"10.174.33.81:18080\"\n }\n ]\n```\n\n启动codis-fe\n\n```\nnohup `which codis-fe` --ncpu=2 --log=/data/codis/log/fe.log --log-level=WARN \n--dashboard-list=$Gopath/src/github.com/CodisLabs/codis/config/codis.json --listen=0.0.0.0:8080 &\n```\n\n### 启动codis-proxy\n\n使用 `codis-proxy-admin.sh` 脚本启动 codis-proxy，并查看 proxy 日志确认启动是否有异常。(代理可以启动一个，也可以启动多个，但是启动的多个代理的配置必须是一样的，是同一个dashboard的地址)\n\n配置文件proxy.toml\n\n> 19 # Set bind address for admin(rpc), tcp only.\n>\n> 20 admin_addr = “10.173.225.60:11080”\n> 21\n> 22 # Set bind address for proxy, proto_type can be “tcp”, “tcp4”, “tcp6”, “unix” or “unixpacket”.\n> 23 proto_type = “tcp4”\n> 24 proxy_addr = “10.173.225.60:19000”\n> 26 # Set jodis address & session timeout\n> 27 # 1. jodis_name is short for jodis_coordinator_name, only accept “zookeeper” & “etcd”.\n> 28 # 2. jodis_addr is short for jodis_coordinator_addr\n> 29 # 3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, “user:password” is accepted.\n> 30 # 4. proxy will be registered as node:\n> 31 # if jodis*compatible = true (not suggested):32 # /zk/codis/db*{PRODUCT_NAME}/proxy-{HASHID} (compatible with Codis2.0)\n> 33 # or else\n> 34 # /jodis/{PRODUCT_NAME}/proxy-{HASHID}\n> 35 jodis_name = “”\n> 3 # jodis_addr不能写地址，不然启动报错，不知道为啥，可能没有安装jodis,\n> 36 jodis_addr = “”\n> 37 jodis_auth = “”\n> 38 jodis_timeout = “20s”\n\n```\n./admin/codis-proxy-admin.sh start\ntail -100 ./log/codis-proxy.log.2017-04-08\n```\n\n要启动多个代理需要修改脚本\n\nvi codis-proxy-admin.sh\n\n```\nCODIS_DASHBOARD_ADDR=\"10.173.225.60:18080\"\n```\n\n### 启动codis-server\n\n使用 `codis-server-admin.sh` 脚本启动 codis-server，并查看 redis 日志确认启动是否有异常。\n\n配置redis.conf 和sentinel.conf\n\n**redis.conf**\n\n> 48 # bind 127.0.0.1 ::1\n> 49 #\n> 50 # WARNING If the computer running Redis is directly exposed to the\n> 51 # internet, binding to all the interfaces is dangerous and will expose the\n> 52 # instance to everybody on the internet. So by default we uncomment the\n> 53 # following bind directive, that will force Redis to listen only into\n> 54 # the IPv4 lookback interface address (this means Redis will be able to\n> 55 # accept connections only from clients running into the same computer it\n> 56 # is running).\n> 57 #\n> 58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n> 59 # JUST COMMENT THE FOLLOWING LINE.\n> 60 # ~~\n> 61 bind 0.0.0.0\n> …….\n> …….\n> 82 # Accept connections on the specified port, default is 6379 (IANA #815344).\n> 83 # If port 0 is specified Redis will not listen on a TCP socket.\n> 84 port 6379\n\n**sentinel.conf**\n\n> 48 # bind 127.0.0.1 ::1\n> 49 #\n> 50 # WARNING If the computer running Redis is directly exposed to the\n> 51 # internet, binding to all the interfaces is dangerous and will expose the\n> 52 # instance to everybody on the internet. So by default we uncomment the\n> 53 # following bind directive, that will force Redis to listen only into\n> 54 # the IPv4 lookback interface address (this means Redis will be able to\n> 55 # accept connections only from clients running into the same computer it\n> 56 # is running).\n> 57 #\n> 58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n> 59 # JUST COMMENT THE FOLLOWING LINE.\n> 60 #~~\n> 61 bind 0.0.0.0\n> …….\n> …….\n> 82 # Accept connections on the specified port, default is 6379 (IANA #815344).\n> 83 # If port 0 is specified Redis will not listen on a TCP socket.\n> 84 port 26379\n\n```\n./admin/codis-server-admin.sh start\ntail -100 /tmp/redis_6379.log\n```\n\nredis.conf 配置中 pidfile、logfile 默认保存在 `/tmp` 目录，若启动失败，请检查当前用户是否有该目录的读写权限。\n\n### 通过fe添加group\n\n通过web浏览器访问集群管理页面(fe地址:127.0.0.1:8080) 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 但是 Group 栏为空，因为我们启动的 codis-server 并未加入到集群 添加 `NEW GROUP`，`NEW GROUP` 行输入 1，再点击 `NEW GROUP` 即可 添加 Codis Server，`Add Server` 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 `Add Server` 按钮即可，如下图所示\n![](codis安装及配置/addgroup.jpg)\n### 通过fe初始化slot\n\n新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 `rebalance all slots` 按钮来做，如下图所示，点击此按钮，我们即快速完成了一个集群的搭建。\n![](codis安装及配置/rebalance_slots.jpg)\n每次增加组之后就需要重新执行**Rebalance All Slots**","slug":"codis安装及配置","published":1,"updated":"2018-08-10T08:27:07.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3j0009u5n9v962kzvz","content":"<h1 id=\"codis安装及配置\"><a href=\"#codis安装及配置\" class=\"headerlink\" title=\"codis安装及配置\"></a>codis安装及配置</h1><h2 id=\"一、环境安装\"><a href=\"#一、环境安装\" class=\"headerlink\" title=\"一、环境安装\"></a>一、环境安装</h2><p><strong>系统环境centos</strong></p>\n<ol>\n<li><p>Golang 环境搭建: yum install go</p>\n</li>\n<li><p>codis 下载和编译:</p>\n<p>go get -u -d github.com/CodisLabs/codis<br>cd $GOPATH/src/github.com/CodisLabs/codis<br>make<br>make gotest<br>mkdir -p /usr/local/codis/{logs,conf,scripts}<br>cp –rf bin /usr/local/codis/<br>cp config.ini /usr/local/codis/conf/</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Codis-HA 编译<br>Codis-HA。这是一个通过 Codis 开放的 api 实现自动切换主从的工具。该工具会在检测<br>到 master 挂掉的时候将其下线并选择其中一个 slave 提升为 master 继续提供服务。<br>go get github.com/ngaut/codis-ha<br>cd codis-ha<br>go build<br>codis-ha –codis-config=localhost:18087 –productName=test</p>\n</li>\n<li><p>Zookeeper集群搭建</p>\n<p>首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。</p>\n</li>\n</ol>\n<p>首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;Development tools&quot; &quot;Compatibility libraries&quot; -y </span><br><span class=\"line\">yum install openssl-devel openssl -y</span><br><span class=\"line\">yum install java-1.8.0-openjdk-devel java-1.8.0-openjdk -y</span><br></pre></td></tr></table></figure>\n<p>确定Java运行环境正常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">  openjdk version &quot;1.8.0101&quot;</span><br><span class=\"line\">  OpenJDK Runtime Environment (build 1.8.0101-b13)</span><br><span class=\"line\">  OpenJDK 64-Bit Server VM (build 25.101-b13, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>安装二进制版本的zookeeper</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf zookeeper-3.4.9.tar.gz -C /usr/local/ </span><br><span class=\"line\">ln -s /usr/local/zookeeper-3.4.9/ /usr/local/zookeeper </span><br><span class=\"line\">cd /usr/local/zookeeper/conf </span><br><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>\n<p>编译zookeeper配置文件/usr/local/zookeeper/conf/zoo.cfg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=/data/zookeeper/db</span><br><span class=\"line\">dataLogDir=/data/zookeeper/log</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"># cluster configure</span><br><span class=\"line\">server.1=10.173.225.60:2888:3888</span><br><span class=\"line\">server.2=10.174.33.81:2888:3888</span><br><span class=\"line\">server.3=10.173.224.34:2888:3888</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/zookeeper/&#123;db,log&#125; -p</span><br></pre></td></tr></table></figure>\n<p>其中2888表示zookeeper程序监听端口，3888表示zookeeper选举通信端口。</p>\n<p>下面需要生成ID，这里需要注意，myid对应的zoo.cfg的server.ID，比如第二台zookeeper主机对应的myid应该是2，以此类推，三个主机分别为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.173.225.60 echo 1 &gt; /data/zookeeper/db/myid</span><br><span class=\"line\">10.174.33.81 echo 2 &gt; /data/zookeeper/db/myid</span><br><span class=\"line\">10.173.224.34 echo 3 &gt; /data/zookeeper/db/myid</span><br></pre></td></tr></table></figure>\n<p>然后输出环境变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/zookeeper/bin/</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>然后就可以启动zookeeper了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zkServer.sh start</span><br></pre></td></tr></table></figure>\n<p>查看各个zookeeper节点的状态（会有一个leader节点，两个follower节点）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node1 ~]# zkServer.sh status </span><br><span class=\"line\">\tMode: follower</span><br><span class=\"line\">[root@node2 ~]# zkServer.sh status </span><br><span class=\"line\">\tMode: leader</span><br><span class=\"line\">[root@node3 ~]# zkServer.sh status </span><br><span class=\"line\">\tMode: follower</span><br></pre></td></tr></table></figure>\n<p>客户端连接，可以查看相关信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>\n<p>至此，zookeeper已经搞定了。</p>\n<h2 id=\"二、启动服务\"><a href=\"#二、启动服务\" class=\"headerlink\" title=\"二、启动服务\"></a>二、启动服务</h2><p>再编译后的codis文件夹下有启动服务的脚本</p>\n<h3 id=\"启动codis-dashboard\"><a href=\"#启动codis-dashboard\" class=\"headerlink\" title=\"启动codis-dashboard\"></a>启动codis-dashboard</h3><p>使用 <code>codis-dashboard-admin.sh</code> 脚本启动 dashboard，并查看 dashboard 日志确认启动是否有异常。</p>\n<p>dashboard只需要启动一个</p>\n<p>配置文件dashboard.toml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set Coordinator, only accept &quot;zookeeper&quot; &amp; &quot;etcd&quot; &amp; &quot;filesystem&quot;.</span><br><span class=\"line\"># for zookeeper/etcd, coorinator_auth accept &quot;user:password&quot;</span><br><span class=\"line\"># Quick Start</span><br><span class=\"line\">coordinator_name = &quot;zookeeper&quot;</span><br><span class=\"line\">coordinator_addr = &quot;10.173.225.60:2181,10.174.33.81:2181,10.173.224.34:2181&quot;</span><br><span class=\"line\">#coordinator_name = &quot;zookeeper&quot;</span><br><span class=\"line\">#coordinator_addr = &quot;127.0.0.1:2181&quot;</span><br><span class=\"line\">#coordinator_auth = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Set Codis Product Name/Auth.</span><br><span class=\"line\">product_name = &quot;codis-demo&quot;</span><br><span class=\"line\">product_auth = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Set bind address for admin(rpc), tcp only.</span><br><span class=\"line\">admin_addr = &quot;0.0.0.0:18080&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./admin/codis-dashboard-admin.sh start</span><br><span class=\"line\"> tail -100 ./log/codis-dashboard.log.2017-04-08</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动codis-fe\"><a href=\"#启动codis-fe\" class=\"headerlink\" title=\"启动codis-fe\"></a>启动codis-fe</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/codis-admin --dashboard-list --zookeeper=127.0.0.1:2181 | tee $Gopath/src/github.com/CodisLabs/codis/config/codis.json</span><br></pre></td></tr></table></figure>\n<p>codis.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;codis-demo&quot;,</span><br><span class=\"line\">    &quot;dashboard&quot;: &quot;10.174.33.81:18080&quot;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<p>启动codis-fe</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup `which codis-fe` --ncpu=2 --log=/data/codis/log/fe.log --log-level=WARN </span><br><span class=\"line\">--dashboard-list=$Gopath/src/github.com/CodisLabs/codis/config/codis.json --listen=0.0.0.0:8080 &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动codis-proxy\"><a href=\"#启动codis-proxy\" class=\"headerlink\" title=\"启动codis-proxy\"></a>启动codis-proxy</h3><p>使用 <code>codis-proxy-admin.sh</code> 脚本启动 codis-proxy，并查看 proxy 日志确认启动是否有异常。(代理可以启动一个，也可以启动多个，但是启动的多个代理的配置必须是一样的，是同一个dashboard的地址)</p>\n<p>配置文件proxy.toml</p>\n<blockquote>\n<p>19 # Set bind address for admin(rpc), tcp only.</p>\n<p>20 admin_addr = “10.173.225.60:11080”<br>21<br>22 # Set bind address for proxy, proto_type can be “tcp”, “tcp4”, “tcp6”, “unix” or “unixpacket”.<br>23 proto_type = “tcp4”<br>24 proxy_addr = “10.173.225.60:19000”<br>26 # Set jodis address &amp; session timeout<br>27 # 1. jodis_name is short for jodis_coordinator_name, only accept “zookeeper” &amp; “etcd”.<br>28 # 2. jodis_addr is short for jodis_coordinator_addr<br>29 # 3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, “user:password” is accepted.<br>30 # 4. proxy will be registered as node:<br>31 # if jodis<em>compatible = true (not suggested):32 # /zk/codis/db</em>{PRODUCT_NAME}/proxy-{HASHID} (compatible with Codis2.0)<br>33 # or else<br>34 # /jodis/{PRODUCT_NAME}/proxy-{HASHID}<br>35 jodis_name = “”<br>3 # jodis_addr不能写地址，不然启动报错，不知道为啥，可能没有安装jodis,<br>36 jodis_addr = “”<br>37 jodis_auth = “”<br>38 jodis_timeout = “20s”</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./admin/codis-proxy-admin.sh start</span><br><span class=\"line\">tail -100 ./log/codis-proxy.log.2017-04-08</span><br></pre></td></tr></table></figure>\n<p>要启动多个代理需要修改脚本</p>\n<p>vi codis-proxy-admin.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODIS_DASHBOARD_ADDR=&quot;10.173.225.60:18080&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动codis-server\"><a href=\"#启动codis-server\" class=\"headerlink\" title=\"启动codis-server\"></a>启动codis-server</h3><p>使用 <code>codis-server-admin.sh</code> 脚本启动 codis-server，并查看 redis 日志确认启动是否有异常。</p>\n<p>配置redis.conf 和sentinel.conf</p>\n<p><strong>redis.conf</strong></p>\n<blockquote>\n<p>48 # bind 127.0.0.1 ::1<br>49 #<br>50 # WARNING If the computer running Redis is directly exposed to the<br>51 # internet, binding to all the interfaces is dangerous and will expose the<br>52 # instance to everybody on the internet. So by default we uncomment the<br>53 # following bind directive, that will force Redis to listen only into<br>54 # the IPv4 lookback interface address (this means Redis will be able to<br>55 # accept connections only from clients running into the same computer it<br>56 # is running).<br>57 #<br>58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES<br>59 # JUST COMMENT THE FOLLOWING LINE.<br>60 # ~~<br>61 bind 0.0.0.0<br>…….<br>…….<br>82 # Accept connections on the specified port, default is 6379 (IANA #815344).<br>83 # If port 0 is specified Redis will not listen on a TCP socket.<br>84 port 6379</p>\n</blockquote>\n<p><strong>sentinel.conf</strong></p>\n<blockquote>\n<p>48 # bind 127.0.0.1 ::1<br>49 #<br>50 # WARNING If the computer running Redis is directly exposed to the<br>51 # internet, binding to all the interfaces is dangerous and will expose the<br>52 # instance to everybody on the internet. So by default we uncomment the<br>53 # following bind directive, that will force Redis to listen only into<br>54 # the IPv4 lookback interface address (this means Redis will be able to<br>55 # accept connections only from clients running into the same computer it<br>56 # is running).<br>57 #<br>58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES<br>59 # JUST COMMENT THE FOLLOWING LINE.<br>60 #~~<br>61 bind 0.0.0.0<br>…….<br>…….<br>82 # Accept connections on the specified port, default is 6379 (IANA #815344).<br>83 # If port 0 is specified Redis will not listen on a TCP socket.<br>84 port 26379</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./admin/codis-server-admin.sh start</span><br><span class=\"line\">tail -100 /tmp/redis_6379.log</span><br></pre></td></tr></table></figure>\n<p>redis.conf 配置中 pidfile、logfile 默认保存在 <code>/tmp</code> 目录，若启动失败，请检查当前用户是否有该目录的读写权限。</p>\n<h3 id=\"通过fe添加group\"><a href=\"#通过fe添加group\" class=\"headerlink\" title=\"通过fe添加group\"></a>通过fe添加group</h3><p>通过web浏览器访问集群管理页面(fe地址:127.0.0.1:8080) 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 但是 Group 栏为空，因为我们启动的 codis-server 并未加入到集群 添加 <code>NEW GROUP</code>，<code>NEW GROUP</code> 行输入 1，再点击 <code>NEW GROUP</code> 即可 添加 Codis Server，<code>Add Server</code> 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 <code>Add Server</code> 按钮即可，如下图所示<br><img src=\"/2017/12/12/codis安装及配置/addgroup.jpg\" alt=\"\"></p>\n<h3 id=\"通过fe初始化slot\"><a href=\"#通过fe初始化slot\" class=\"headerlink\" title=\"通过fe初始化slot\"></a>通过fe初始化slot</h3><p>新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 <code>rebalance all slots</code> 按钮来做，如下图所示，点击此按钮，我们即快速完成了一个集群的搭建。<br><img src=\"/2017/12/12/codis安装及配置/rebalance_slots.jpg\" alt=\"\"><br>每次增加组之后就需要重新执行<strong>Rebalance All Slots</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"codis安装及配置\"><a href=\"#codis安装及配置\" class=\"headerlink\" title=\"codis安装及配置\"></a>codis安装及配置</h1><h2 id=\"一、环境安装\"><a href=\"#一、环境安装\" class=\"headerlink\" title=\"一、环境安装\"></a>一、环境安装</h2><p><strong>系统环境centos</strong></p>\n<ol>\n<li><p>Golang 环境搭建: yum install go</p>\n</li>\n<li><p>codis 下载和编译:</p>\n<p>go get -u -d github.com/CodisLabs/codis<br>cd $GOPATH/src/github.com/CodisLabs/codis<br>make<br>make gotest<br>mkdir -p /usr/local/codis/{logs,conf,scripts}<br>cp –rf bin /usr/local/codis/<br>cp config.ini /usr/local/codis/conf/</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Codis-HA 编译<br>Codis-HA。这是一个通过 Codis 开放的 api 实现自动切换主从的工具。该工具会在检测<br>到 master 挂掉的时候将其下线并选择其中一个 slave 提升为 master 继续提供服务。<br>go get github.com/ngaut/codis-ha<br>cd codis-ha<br>go build<br>codis-ha –codis-config=localhost:18087 –productName=test</p>\n</li>\n<li><p>Zookeeper集群搭建</p>\n<p>首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。</p>\n</li>\n</ol>\n<p>首先安装开发工具及openjdk，zookeeper是由Java语言开发的，所以需要openjdk环境。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;Development tools&quot; &quot;Compatibility libraries&quot; -y </span><br><span class=\"line\">yum install openssl-devel openssl -y</span><br><span class=\"line\">yum install java-1.8.0-openjdk-devel java-1.8.0-openjdk -y</span><br></pre></td></tr></table></figure>\n<p>确定Java运行环境正常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">  openjdk version &quot;1.8.0101&quot;</span><br><span class=\"line\">  OpenJDK Runtime Environment (build 1.8.0101-b13)</span><br><span class=\"line\">  OpenJDK 64-Bit Server VM (build 25.101-b13, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>安装二进制版本的zookeeper</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf zookeeper-3.4.9.tar.gz -C /usr/local/ </span><br><span class=\"line\">ln -s /usr/local/zookeeper-3.4.9/ /usr/local/zookeeper </span><br><span class=\"line\">cd /usr/local/zookeeper/conf </span><br><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>\n<p>编译zookeeper配置文件/usr/local/zookeeper/conf/zoo.cfg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=/data/zookeeper/db</span><br><span class=\"line\">dataLogDir=/data/zookeeper/log</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\"># cluster configure</span><br><span class=\"line\">server.1=10.173.225.60:2888:3888</span><br><span class=\"line\">server.2=10.174.33.81:2888:3888</span><br><span class=\"line\">server.3=10.173.224.34:2888:3888</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/zookeeper/&#123;db,log&#125; -p</span><br></pre></td></tr></table></figure>\n<p>其中2888表示zookeeper程序监听端口，3888表示zookeeper选举通信端口。</p>\n<p>下面需要生成ID，这里需要注意，myid对应的zoo.cfg的server.ID，比如第二台zookeeper主机对应的myid应该是2，以此类推，三个主机分别为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.173.225.60 echo 1 &gt; /data/zookeeper/db/myid</span><br><span class=\"line\">10.174.33.81 echo 2 &gt; /data/zookeeper/db/myid</span><br><span class=\"line\">10.173.224.34 echo 3 &gt; /data/zookeeper/db/myid</span><br></pre></td></tr></table></figure>\n<p>然后输出环境变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/zookeeper/bin/</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>然后就可以启动zookeeper了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zkServer.sh start</span><br></pre></td></tr></table></figure>\n<p>查看各个zookeeper节点的状态（会有一个leader节点，两个follower节点）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node1 ~]# zkServer.sh status </span><br><span class=\"line\">\tMode: follower</span><br><span class=\"line\">[root@node2 ~]# zkServer.sh status </span><br><span class=\"line\">\tMode: leader</span><br><span class=\"line\">[root@node3 ~]# zkServer.sh status </span><br><span class=\"line\">\tMode: follower</span><br></pre></td></tr></table></figure>\n<p>客户端连接，可以查看相关信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>\n<p>至此，zookeeper已经搞定了。</p>\n<h2 id=\"二、启动服务\"><a href=\"#二、启动服务\" class=\"headerlink\" title=\"二、启动服务\"></a>二、启动服务</h2><p>再编译后的codis文件夹下有启动服务的脚本</p>\n<h3 id=\"启动codis-dashboard\"><a href=\"#启动codis-dashboard\" class=\"headerlink\" title=\"启动codis-dashboard\"></a>启动codis-dashboard</h3><p>使用 <code>codis-dashboard-admin.sh</code> 脚本启动 dashboard，并查看 dashboard 日志确认启动是否有异常。</p>\n<p>dashboard只需要启动一个</p>\n<p>配置文件dashboard.toml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set Coordinator, only accept &quot;zookeeper&quot; &amp; &quot;etcd&quot; &amp; &quot;filesystem&quot;.</span><br><span class=\"line\"># for zookeeper/etcd, coorinator_auth accept &quot;user:password&quot;</span><br><span class=\"line\"># Quick Start</span><br><span class=\"line\">coordinator_name = &quot;zookeeper&quot;</span><br><span class=\"line\">coordinator_addr = &quot;10.173.225.60:2181,10.174.33.81:2181,10.173.224.34:2181&quot;</span><br><span class=\"line\">#coordinator_name = &quot;zookeeper&quot;</span><br><span class=\"line\">#coordinator_addr = &quot;127.0.0.1:2181&quot;</span><br><span class=\"line\">#coordinator_auth = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Set Codis Product Name/Auth.</span><br><span class=\"line\">product_name = &quot;codis-demo&quot;</span><br><span class=\"line\">product_auth = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Set bind address for admin(rpc), tcp only.</span><br><span class=\"line\">admin_addr = &quot;0.0.0.0:18080&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./admin/codis-dashboard-admin.sh start</span><br><span class=\"line\"> tail -100 ./log/codis-dashboard.log.2017-04-08</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动codis-fe\"><a href=\"#启动codis-fe\" class=\"headerlink\" title=\"启动codis-fe\"></a>启动codis-fe</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/codis-admin --dashboard-list --zookeeper=127.0.0.1:2181 | tee $Gopath/src/github.com/CodisLabs/codis/config/codis.json</span><br></pre></td></tr></table></figure>\n<p>codis.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;codis-demo&quot;,</span><br><span class=\"line\">    &quot;dashboard&quot;: &quot;10.174.33.81:18080&quot;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ]</span><br></pre></td></tr></table></figure>\n<p>启动codis-fe</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup `which codis-fe` --ncpu=2 --log=/data/codis/log/fe.log --log-level=WARN </span><br><span class=\"line\">--dashboard-list=$Gopath/src/github.com/CodisLabs/codis/config/codis.json --listen=0.0.0.0:8080 &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动codis-proxy\"><a href=\"#启动codis-proxy\" class=\"headerlink\" title=\"启动codis-proxy\"></a>启动codis-proxy</h3><p>使用 <code>codis-proxy-admin.sh</code> 脚本启动 codis-proxy，并查看 proxy 日志确认启动是否有异常。(代理可以启动一个，也可以启动多个，但是启动的多个代理的配置必须是一样的，是同一个dashboard的地址)</p>\n<p>配置文件proxy.toml</p>\n<blockquote>\n<p>19 # Set bind address for admin(rpc), tcp only.</p>\n<p>20 admin_addr = “10.173.225.60:11080”<br>21<br>22 # Set bind address for proxy, proto_type can be “tcp”, “tcp4”, “tcp6”, “unix” or “unixpacket”.<br>23 proto_type = “tcp4”<br>24 proxy_addr = “10.173.225.60:19000”<br>26 # Set jodis address &amp; session timeout<br>27 # 1. jodis_name is short for jodis_coordinator_name, only accept “zookeeper” &amp; “etcd”.<br>28 # 2. jodis_addr is short for jodis_coordinator_addr<br>29 # 3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, “user:password” is accepted.<br>30 # 4. proxy will be registered as node:<br>31 # if jodis<em>compatible = true (not suggested):32 # /zk/codis/db</em>{PRODUCT_NAME}/proxy-{HASHID} (compatible with Codis2.0)<br>33 # or else<br>34 # /jodis/{PRODUCT_NAME}/proxy-{HASHID}<br>35 jodis_name = “”<br>3 # jodis_addr不能写地址，不然启动报错，不知道为啥，可能没有安装jodis,<br>36 jodis_addr = “”<br>37 jodis_auth = “”<br>38 jodis_timeout = “20s”</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./admin/codis-proxy-admin.sh start</span><br><span class=\"line\">tail -100 ./log/codis-proxy.log.2017-04-08</span><br></pre></td></tr></table></figure>\n<p>要启动多个代理需要修改脚本</p>\n<p>vi codis-proxy-admin.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CODIS_DASHBOARD_ADDR=&quot;10.173.225.60:18080&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动codis-server\"><a href=\"#启动codis-server\" class=\"headerlink\" title=\"启动codis-server\"></a>启动codis-server</h3><p>使用 <code>codis-server-admin.sh</code> 脚本启动 codis-server，并查看 redis 日志确认启动是否有异常。</p>\n<p>配置redis.conf 和sentinel.conf</p>\n<p><strong>redis.conf</strong></p>\n<blockquote>\n<p>48 # bind 127.0.0.1 ::1<br>49 #<br>50 # WARNING If the computer running Redis is directly exposed to the<br>51 # internet, binding to all the interfaces is dangerous and will expose the<br>52 # instance to everybody on the internet. So by default we uncomment the<br>53 # following bind directive, that will force Redis to listen only into<br>54 # the IPv4 lookback interface address (this means Redis will be able to<br>55 # accept connections only from clients running into the same computer it<br>56 # is running).<br>57 #<br>58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES<br>59 # JUST COMMENT THE FOLLOWING LINE.<br>60 # ~~<br>61 bind 0.0.0.0<br>…….<br>…….<br>82 # Accept connections on the specified port, default is 6379 (IANA #815344).<br>83 # If port 0 is specified Redis will not listen on a TCP socket.<br>84 port 6379</p>\n</blockquote>\n<p><strong>sentinel.conf</strong></p>\n<blockquote>\n<p>48 # bind 127.0.0.1 ::1<br>49 #<br>50 # WARNING If the computer running Redis is directly exposed to the<br>51 # internet, binding to all the interfaces is dangerous and will expose the<br>52 # instance to everybody on the internet. So by default we uncomment the<br>53 # following bind directive, that will force Redis to listen only into<br>54 # the IPv4 lookback interface address (this means Redis will be able to<br>55 # accept connections only from clients running into the same computer it<br>56 # is running).<br>57 #<br>58 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES<br>59 # JUST COMMENT THE FOLLOWING LINE.<br>60 #~~<br>61 bind 0.0.0.0<br>…….<br>…….<br>82 # Accept connections on the specified port, default is 6379 (IANA #815344).<br>83 # If port 0 is specified Redis will not listen on a TCP socket.<br>84 port 26379</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./admin/codis-server-admin.sh start</span><br><span class=\"line\">tail -100 /tmp/redis_6379.log</span><br></pre></td></tr></table></figure>\n<p>redis.conf 配置中 pidfile、logfile 默认保存在 <code>/tmp</code> 目录，若启动失败，请检查当前用户是否有该目录的读写权限。</p>\n<h3 id=\"通过fe添加group\"><a href=\"#通过fe添加group\" class=\"headerlink\" title=\"通过fe添加group\"></a>通过fe添加group</h3><p>通过web浏览器访问集群管理页面(fe地址:127.0.0.1:8080) 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 但是 Group 栏为空，因为我们启动的 codis-server 并未加入到集群 添加 <code>NEW GROUP</code>，<code>NEW GROUP</code> 行输入 1，再点击 <code>NEW GROUP</code> 即可 添加 Codis Server，<code>Add Server</code> 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 <code>Add Server</code> 按钮即可，如下图所示<br><img src=\"/2017/12/12/codis安装及配置/addgroup.jpg\" alt=\"\"></p>\n<h3 id=\"通过fe初始化slot\"><a href=\"#通过fe初始化slot\" class=\"headerlink\" title=\"通过fe初始化slot\"></a>通过fe初始化slot</h3><p>新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 <code>rebalance all slots</code> 按钮来做，如下图所示，点击此按钮，我们即快速完成了一个集群的搭建。<br><img src=\"/2017/12/12/codis安装及配置/rebalance_slots.jpg\" alt=\"\"><br>每次增加组之后就需要重新执行<strong>Rebalance All Slots</strong></p>\n"},{"title":"golang-http包","date":"2017-08-16T08:21:21.000Z","_content":"\n# http服务\n\nhttp包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.\n\n## 1. 函数\n\n### 1.1 服务端函数\n\n1. `Handle`将handler按照指定的格式注册到`DefaultServeMux`,`ServeMux`解释了模式匹配规则\n\n   ```go\n   func Handle(pattern string, handler Handler)\n   ```\n\n2. `HandleFunc`同上，主要用来实现动态文件内容的展示，这点与`ServerFile()`不同的地方。\n\n   ```go\n   func HandleFunc(pattern string, handler func(ResponseWriter, *Request))\n   ```\n\n3. `ServeFile`利用指定的文件或者目录的内容来响应相应的请求.\n\n   ```go\n   func ServeFile(w ResponseWriter, r *Request, name string)\n   ```\n\n4. `ListenAndServe`监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux\n\n   ```go\n   func ListenAndServe(addr string, handler Handler) error\n   ```\n\n### 1.2最简单的http服务\n\n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() {\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面\n由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关\n\n由1.1的解析可知，第2个参数是一个 **Hander**\n\n在http包中看到这个 **Hander**接口只有一个方法ServeHTTP\n\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n```\n\n所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用\n\nServeHTTP方法，他需要2个参数，\n\n1. 一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容\n2. 另一个是*http.Request，*http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）\n\n### example\n\n```go\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n)\n\ntype test struct{}\n//结构体a实现了ServeHTTP\nfunc (*test) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n\nfunc main() {\n    http.ListenAndServe(\":8080\", &test{})//第2个参数需要实现Hander的struct，a满足\n}\n```\n\n现在\n访问localhost:8080的话，可以看到“hello world”\n访问localhost:8080/abc的话，可以看到“hello world”\n访问localhost:8080/123的话，可以看到“hello world”\n事实上访问任何路径都是“hello world”\n\n当 http.ListenAndServe(“:8080”, &test{})后，开始等待有访问请求\n\n一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的`http.ResponseWriter, *http.Request`传进去\n\n而test的ServeHTTP这个方法，拿到`*http.ResponseWriter`后，并往里面写东西，客户端的网页就显示出来了\n\n一、从源码可以理解:这里会将Handler赋值给Server\n\n```go\n// ListenAndServe always returns a non-nil error.\nfunc ListenAndServe(addr string, handler Handler) error {\n\tserver := &Server{Addr: addr, Handler: handler}\n\treturn server.ListenAndServe()\n}\n```\n\n二、\n\n这里是server.ListenAndServe()———–>回去调用go c.server(ctx)\n\n其中c是`c := srv.newConn(rw)`\n\n然后`c.server(ctx)`这个函数中会调用`serverHandler{c.server}.ServeHTTP(w, w.req)`这个方法\n\n这里serverHandler组合了Server结构体\n\n这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP\n\n```go\n// serverHandler delegates to either the server's Handler or\n// DefaultServeMux and also handles \"OPTIONS *\" requests.\ntype serverHandler struct {\n\tsrv *Server\n}\n\nfunc (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {\n\thandler := sh.srv.Handler\n\tif handler == nil {\n\t\thandler = DefaultServeMux\n\t}\n\tif req.RequestURI == \"*\" && req.Method == \"OPTIONS\" {\n\t\thandler = globalOptionsHandler{}\n\t}\n\thandler.ServeHTTP(rw, req)\n}\n```\n\n通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的\n\n\\###2.3、ServeMux的作用\n\n先看ServeMux的结构体:\n\n```go\ntype ServeMux struct {\n   mu    sync.RWMutex\n   m     map[string]muxEntry\n   hosts bool // whether any patterns contain hostnames\n}\n\ntype muxEntry struct {\n   explicit bool\n   h        Handler\n   pattern  string\n}\n```\n\n从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法\n\n然后看代码\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\ntype b struct{}\n\nfunc (*b) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello\")\n}\nfunc main() {\n    mux := http.NewServeMux()//新建一个ServeMux。\n    mux.Handle(\"/h\", &b{})//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。\n    http.ListenAndServe(\":8080\", mux)\n}\n```\n\n**mux.Handle内部**\n\n```go\n//Handle registers the handler for the given pattern.\n// If a handler already exists for pattern, Handle panics.\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {\n   mux.mu.Lock()\n   defer mux.mu.Unlock()\n\n   if pattern == \"\" {\n      panic(\"http: invalid pattern \" + pattern)\n   }\n   if handler == nil {\n      panic(\"http: nil handler\")\n   }\n   if mux.m[pattern].explicit {\n      panic(\"http: multiple registrations for \" + pattern)\n   }\n\n   if mux.m == nil {\n      mux.m = make(map[string]muxEntry)\n   }\n  //将路由作为key，然后将handler和路由以及显示调用设置为true\n   mux.m[pattern] = muxEntry{explicit: true, h: handler, pattern: pattern}\n\n   if pattern[0] != '/' {\n      mux.hosts = true\n   }\n   ....\n   }\n```\n\n所以可以看出ServeMux是通过一个map将路由以及函数存起来的。\n\n```go\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {}\n```\n\n这个函数接收的第一个参数是**路由**，第二个参数是一个**Handler**。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。\n\n运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&b{}的ServeHTTP方法）\n\n如果用户访问`/h`的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&b{}的 ServeHTTP方法，从而打印hello\n如果用户访问`/abc`的话，mux因为没有匹配上，从而打印404 page not found\n\n### 2.4、ServeMux的HandleFunc方法\n\nServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP\n\n```go\nfunc (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {\n   mux.Handle(pattern, HandlerFunc(handler))\n}\n```\n\n```go\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(w, r).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n   f(w, r)\n}\n```\n\n所以使用HandlerFunc的时候\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/h\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"hello\")\n    })\n    mux.HandleFunc(\"/bye\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"byebye\")\n    })\n    mux.HandleFunc(\"/hello\", sayhello)\n    http.ListenAndServe(\":8080\", mux)\n}\n\nfunc sayhello(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n```\n\n","source":"_posts/golang-http包.md","raw":"---\ntitle: golang-http包\ndate: 2017-08-16 16:21:21\ntags: golang\ncategories: Golang\n---\n\n# http服务\n\nhttp包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.\n\n## 1. 函数\n\n### 1.1 服务端函数\n\n1. `Handle`将handler按照指定的格式注册到`DefaultServeMux`,`ServeMux`解释了模式匹配规则\n\n   ```go\n   func Handle(pattern string, handler Handler)\n   ```\n\n2. `HandleFunc`同上，主要用来实现动态文件内容的展示，这点与`ServerFile()`不同的地方。\n\n   ```go\n   func HandleFunc(pattern string, handler func(ResponseWriter, *Request))\n   ```\n\n3. `ServeFile`利用指定的文件或者目录的内容来响应相应的请求.\n\n   ```go\n   func ServeFile(w ResponseWriter, r *Request, name string)\n   ```\n\n4. `ListenAndServe`监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux\n\n   ```go\n   func ListenAndServe(addr string, handler Handler) error\n   ```\n\n### 1.2最简单的http服务\n\n```go\npackage main\n\nimport \"net/http\"\n\nfunc main() {\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面\n由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关\n\n由1.1的解析可知，第2个参数是一个 **Hander**\n\n在http包中看到这个 **Hander**接口只有一个方法ServeHTTP\n\n```go\ntype Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n```\n\n所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用\n\nServeHTTP方法，他需要2个参数，\n\n1. 一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容\n2. 另一个是*http.Request，*http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）\n\n### example\n\n```go\npackage main\n\nimport (\n    \"io\"\n    \"net/http\"\n)\n\ntype test struct{}\n//结构体a实现了ServeHTTP\nfunc (*test) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n\nfunc main() {\n    http.ListenAndServe(\":8080\", &test{})//第2个参数需要实现Hander的struct，a满足\n}\n```\n\n现在\n访问localhost:8080的话，可以看到“hello world”\n访问localhost:8080/abc的话，可以看到“hello world”\n访问localhost:8080/123的话，可以看到“hello world”\n事实上访问任何路径都是“hello world”\n\n当 http.ListenAndServe(“:8080”, &test{})后，开始等待有访问请求\n\n一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的`http.ResponseWriter, *http.Request`传进去\n\n而test的ServeHTTP这个方法，拿到`*http.ResponseWriter`后，并往里面写东西，客户端的网页就显示出来了\n\n一、从源码可以理解:这里会将Handler赋值给Server\n\n```go\n// ListenAndServe always returns a non-nil error.\nfunc ListenAndServe(addr string, handler Handler) error {\n\tserver := &Server{Addr: addr, Handler: handler}\n\treturn server.ListenAndServe()\n}\n```\n\n二、\n\n这里是server.ListenAndServe()———–>回去调用go c.server(ctx)\n\n其中c是`c := srv.newConn(rw)`\n\n然后`c.server(ctx)`这个函数中会调用`serverHandler{c.server}.ServeHTTP(w, w.req)`这个方法\n\n这里serverHandler组合了Server结构体\n\n这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP\n\n```go\n// serverHandler delegates to either the server's Handler or\n// DefaultServeMux and also handles \"OPTIONS *\" requests.\ntype serverHandler struct {\n\tsrv *Server\n}\n\nfunc (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {\n\thandler := sh.srv.Handler\n\tif handler == nil {\n\t\thandler = DefaultServeMux\n\t}\n\tif req.RequestURI == \"*\" && req.Method == \"OPTIONS\" {\n\t\thandler = globalOptionsHandler{}\n\t}\n\thandler.ServeHTTP(rw, req)\n}\n```\n\n通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的\n\n\\###2.3、ServeMux的作用\n\n先看ServeMux的结构体:\n\n```go\ntype ServeMux struct {\n   mu    sync.RWMutex\n   m     map[string]muxEntry\n   hosts bool // whether any patterns contain hostnames\n}\n\ntype muxEntry struct {\n   explicit bool\n   h        Handler\n   pattern  string\n}\n```\n\n从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法\n\n然后看代码\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\ntype b struct{}\n\nfunc (*b) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello\")\n}\nfunc main() {\n    mux := http.NewServeMux()//新建一个ServeMux。\n    mux.Handle(\"/h\", &b{})//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。\n    http.ListenAndServe(\":8080\", mux)\n}\n```\n\n**mux.Handle内部**\n\n```go\n//Handle registers the handler for the given pattern.\n// If a handler already exists for pattern, Handle panics.\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {\n   mux.mu.Lock()\n   defer mux.mu.Unlock()\n\n   if pattern == \"\" {\n      panic(\"http: invalid pattern \" + pattern)\n   }\n   if handler == nil {\n      panic(\"http: nil handler\")\n   }\n   if mux.m[pattern].explicit {\n      panic(\"http: multiple registrations for \" + pattern)\n   }\n\n   if mux.m == nil {\n      mux.m = make(map[string]muxEntry)\n   }\n  //将路由作为key，然后将handler和路由以及显示调用设置为true\n   mux.m[pattern] = muxEntry{explicit: true, h: handler, pattern: pattern}\n\n   if pattern[0] != '/' {\n      mux.hosts = true\n   }\n   ....\n   }\n```\n\n所以可以看出ServeMux是通过一个map将路由以及函数存起来的。\n\n```go\nfunc (mux *ServeMux) Handle(pattern string, handler Handler) {}\n```\n\n这个函数接收的第一个参数是**路由**，第二个参数是一个**Handler**。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。\n\n运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&b{}的ServeHTTP方法）\n\n如果用户访问`/h`的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&b{}的 ServeHTTP方法，从而打印hello\n如果用户访问`/abc`的话，mux因为没有匹配上，从而打印404 page not found\n\n### 2.4、ServeMux的HandleFunc方法\n\nServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP\n\n```go\nfunc (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {\n   mux.Handle(pattern, HandlerFunc(handler))\n}\n```\n\n```go\ntype HandlerFunc func(ResponseWriter, *Request)\n\n// ServeHTTP calls f(w, r).\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\n   f(w, r)\n}\n```\n\n所以使用HandlerFunc的时候\n\n```go\npackage main\n\nimport (\n    \"net/http\"\n    \"io\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/h\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"hello\")\n    })\n    mux.HandleFunc(\"/bye\", func(w http.ResponseWriter, r *http.Request) {\n        io.WriteString(w, \"byebye\")\n    })\n    mux.HandleFunc(\"/hello\", sayhello)\n    http.ListenAndServe(\":8080\", mux)\n}\n\nfunc sayhello(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello world\")\n}\n```\n\n","slug":"golang-http包","published":1,"updated":"2018-08-10T03:05:49.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3n000du5n9ftav6ou7","content":"<h1 id=\"http服务\"><a href=\"#http服务\" class=\"headerlink\" title=\"http服务\"></a>http服务</h1><p>http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.</p>\n<h2 id=\"1-函数\"><a href=\"#1-函数\" class=\"headerlink\" title=\"1. 函数\"></a>1. 函数</h2><h3 id=\"1-1-服务端函数\"><a href=\"#1-1-服务端函数\" class=\"headerlink\" title=\"1.1 服务端函数\"></a>1.1 服务端函数</h3><ol>\n<li><p><code>Handle</code>将handler按照指定的格式注册到<code>DefaultServeMux</code>,<code>ServeMux</code>解释了模式匹配规则</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>HandleFunc</code>同上，主要用来实现动态文件内容的展示，这点与<code>ServerFile()</code>不同的地方。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ServeFile</code>利用指定的文件或者目录的内容来响应相应的请求.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ServeFile</span><span class=\"params\">(w ResponseWriter, r *Request, name <span class=\"keyword\">string</span>)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ListenAndServe</code>监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"1-2最简单的http服务\"><a href=\"#1-2最简单的http服务\" class=\"headerlink\" title=\"1.2最简单的http服务\"></a>1.2最简单的http服务</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面<br>由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关</p>\n<p>由1.1的解析可知，第2个参数是一个 <strong>Hander</strong></p>\n<p>在http包中看到这个 <strong>Hander</strong>接口只有一个方法ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用</p>\n<p>ServeHTTP方法，他需要2个参数，</p>\n<ol>\n<li>一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容</li>\n<li>另一个是<em>http.Request，</em>http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）</li>\n</ol>\n<h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体a实现了ServeHTTP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*test)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, &amp;test&#123;&#125;)<span class=\"comment\">//第2个参数需要实现Hander的struct，a满足</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在<br>访问localhost:8080的话，可以看到“hello world”<br>访问localhost:8080/abc的话，可以看到“hello world”<br>访问localhost:8080/123的话，可以看到“hello world”<br>事实上访问任何路径都是“hello world”</p>\n<p>当 http.ListenAndServe(“:8080”, &amp;test{})后，开始等待有访问请求</p>\n<p>一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的<code>http.ResponseWriter, *http.Request</code>传进去</p>\n<p>而test的ServeHTTP这个方法，拿到<code>*http.ResponseWriter</code>后，并往里面写东西，客户端的网页就显示出来了</p>\n<p>一、从源码可以理解:这里会将Handler赋值给Server</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ListenAndServe always returns a non-nil error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> server.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<p>这里是server.ListenAndServe()———–&gt;回去调用go c.server(ctx)</p>\n<p>其中c是<code>c := srv.newConn(rw)</code></p>\n<p>然后<code>c.server(ctx)</code>这个函数中会调用<code>serverHandler{c.server}.ServeHTTP(w, w.req)</code>这个方法</p>\n<p>这里serverHandler组合了Server结构体</p>\n<p>这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// serverHandler delegates to either the server's Handler or</span></span><br><span class=\"line\"><span class=\"comment\">// DefaultServeMux and also handles \"OPTIONS *\" requests.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> serverHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsrv *Server</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sh serverHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(rw ResponseWriter, req *Request)</span></span> &#123;</span><br><span class=\"line\">\thandler := sh.srv.Handler</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\thandler = DefaultServeMux</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> req.RequestURI == <span class=\"string\">\"*\"</span> &amp;&amp; req.Method == <span class=\"string\">\"OPTIONS\"</span> &#123;</span><br><span class=\"line\">\t\thandler = globalOptionsHandler&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandler.ServeHTTP(rw, req)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的</p>\n<p>###2.3、ServeMux的作用</p>\n<p>先看ServeMux的结构体:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServeMux <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   mu    sync.RWMutex</span><br><span class=\"line\">   m     <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry</span><br><span class=\"line\">   hosts <span class=\"keyword\">bool</span> <span class=\"comment\">// whether any patterns contain hostnames</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> muxEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   explicit <span class=\"keyword\">bool</span></span><br><span class=\"line\">   h        Handler</span><br><span class=\"line\">   pattern  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法</p>\n<p>然后看代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> b <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*b)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()<span class=\"comment\">//新建一个ServeMux。</span></span><br><span class=\"line\">    mux.Handle(<span class=\"string\">\"/h\"</span>, &amp;b&#123;&#125;)<span class=\"comment\">//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。</span></span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>mux.Handle内部</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Handle registers the handler for the given pattern.</span></span><br><span class=\"line\"><span class=\"comment\">// If a handler already exists for pattern, Handle panics.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;</span><br><span class=\"line\">   mux.mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> mux.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: invalid pattern \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: nil handler\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m[pattern].explicit &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: multiple registrations for \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      mux.m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将路由作为key，然后将handler和路由以及显示调用设置为true</span></span><br><span class=\"line\">   mux.m[pattern] = muxEntry&#123;explicit: <span class=\"literal\">true</span>, h: handler, pattern: pattern&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern[<span class=\"number\">0</span>] != <span class=\"string\">'/'</span> &#123;</span><br><span class=\"line\">      mux.hosts = <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>所以可以看出ServeMux是通过一个map将路由以及函数存起来的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数接收的第一个参数是<strong>路由</strong>，第二个参数是一个<strong>Handler</strong>。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。</p>\n<p>运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&amp;b{}的ServeHTTP方法）</p>\n<p>如果用户访问<code>/h</code>的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&amp;b{}的 ServeHTTP方法，从而打印hello<br>如果用户访问<code>/abc</code>的话，mux因为没有匹配上，从而打印404 page not found</p>\n<h3 id=\"2-4、ServeMux的HandleFunc方法\"><a href=\"#2-4、ServeMux的HandleFunc方法\" class=\"headerlink\" title=\"2.4、ServeMux的HandleFunc方法\"></a>2.4、ServeMux的HandleFunc方法</h3><p>ServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class=\"line\">   mux.Handle(pattern, HandlerFunc(handler))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ResponseWriter, *Request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ServeHTTP</span> <span class=\"title\">calls</span> <span class=\"title\">f</span><span class=\"params\">(w, r)</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">   f(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以使用HandlerFunc的时候</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/h\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/bye\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"byebye\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/hello\"</span>, sayhello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"http服务\"><a href=\"#http服务\" class=\"headerlink\" title=\"http服务\"></a>http服务</h1><p>http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HTTP或者HTTPS的请求.</p>\n<h2 id=\"1-函数\"><a href=\"#1-函数\" class=\"headerlink\" title=\"1. 函数\"></a>1. 函数</h2><h3 id=\"1-1-服务端函数\"><a href=\"#1-1-服务端函数\" class=\"headerlink\" title=\"1.1 服务端函数\"></a>1.1 服务端函数</h3><ol>\n<li><p><code>Handle</code>将handler按照指定的格式注册到<code>DefaultServeMux</code>,<code>ServeMux</code>解释了模式匹配规则</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>HandleFunc</code>同上，主要用来实现动态文件内容的展示，这点与<code>ServerFile()</code>不同的地方。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ServeFile</code>利用指定的文件或者目录的内容来响应相应的请求.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ServeFile</span><span class=\"params\">(w ResponseWriter, r *Request, name <span class=\"keyword\">string</span>)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ListenAndServe</code>监听TCP网络地址addr然后调用具有handler的Serve去处理连接请求.通常情况下Handler是nil,使用默认的DefaultServeMux</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"1-2最简单的http服务\"><a href=\"#1-2最简单的http服务\" class=\"headerlink\" title=\"1.2最简单的http服务\"></a>1.2最简单的http服务</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问网页后会发现，提示的不是“无法访问”，而是”页面没找到“，说明http已经开始服务了，只是没有找到页面<br>由此可以看出，访问什么路径显示什么网页 这件事情，和ListenAndServe的第2个参数有关</p>\n<p>由1.1的解析可知，第2个参数是一个 <strong>Hander</strong></p>\n<p>在http包中看到这个 <strong>Hander</strong>接口只有一个方法ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tServeHTTP(ResponseWriter, *Request)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以只要实现了ServeHTTP(ResponseWriter, *Request)这个方法的struct,那么就可以将这个struct方法放进去，然后被调用</p>\n<p>ServeHTTP方法，他需要2个参数，</p>\n<ol>\n<li>一个是http.ResponseWriter， 往http.ResponseWriter写入什么内容，浏览器的网页源码就是什么内容</li>\n<li>另一个是<em>http.Request，</em>http.Request里面是封装了浏览器发过来的请求（包含路径、浏览器类型等等）</li>\n</ol>\n<h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体a实现了ServeHTTP</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*test)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, &amp;test&#123;&#125;)<span class=\"comment\">//第2个参数需要实现Hander的struct，a满足</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在<br>访问localhost:8080的话，可以看到“hello world”<br>访问localhost:8080/abc的话，可以看到“hello world”<br>访问localhost:8080/123的话，可以看到“hello world”<br>事实上访问任何路径都是“hello world”</p>\n<p>当 http.ListenAndServe(“:8080”, &amp;test{})后，开始等待有访问请求</p>\n<p>一旦有访问请求过来，http包回去调用test的ServeHTTP这个方法。并把自己已经处理好的<code>http.ResponseWriter, *http.Request</code>传进去</p>\n<p>而test的ServeHTTP这个方法，拿到<code>*http.ResponseWriter</code>后，并往里面写东西，客户端的网页就显示出来了</p>\n<p>一、从源码可以理解:这里会将Handler赋值给Server</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ListenAndServe always returns a non-nil error.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ListenAndServe</span><span class=\"params\">(addr <span class=\"keyword\">string</span>, handler Handler)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> server.ListenAndServe()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<p>这里是server.ListenAndServe()———–&gt;回去调用go c.server(ctx)</p>\n<p>其中c是<code>c := srv.newConn(rw)</code></p>\n<p>然后<code>c.server(ctx)</code>这个函数中会调用<code>serverHandler{c.server}.ServeHTTP(w, w.req)</code>这个方法</p>\n<p>这里serverHandler组合了Server结构体</p>\n<p>这里当handler为空的时候就调用默认的DefaultServeMux，当不为空的时候就会去调用handler.ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// serverHandler delegates to either the server's Handler or</span></span><br><span class=\"line\"><span class=\"comment\">// DefaultServeMux and also handles \"OPTIONS *\" requests.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> serverHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsrv *Server</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sh serverHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(rw ResponseWriter, req *Request)</span></span> &#123;</span><br><span class=\"line\">\thandler := sh.srv.Handler</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\thandler = DefaultServeMux</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> req.RequestURI == <span class=\"string\">\"*\"</span> &amp;&amp; req.Method == <span class=\"string\">\"OPTIONS\"</span> &#123;</span><br><span class=\"line\">\t\thandler = globalOptionsHandler&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thandler.ServeHTTP(rw, req)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的解析就可以知道网页解析是通过调用ServeHTTP方法来的</p>\n<p>###2.3、ServeMux的作用</p>\n<p>先看ServeMux的结构体:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServeMux <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   mu    sync.RWMutex</span><br><span class=\"line\">   m     <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry</span><br><span class=\"line\">   hosts <span class=\"keyword\">bool</span> <span class=\"comment\">// whether any patterns contain hostnames</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> muxEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   explicit <span class=\"keyword\">bool</span></span><br><span class=\"line\">   h        Handler</span><br><span class=\"line\">   pattern  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从结构体中可以看出ServeMux有一个map属性，map属性的value是个muxEntry类型，这个类型中有一个Handler属性，可以推测看看此ServerMux的m属性的key保存的是url，muxEntry是一个Handler方法</p>\n<p>然后看代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> b <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*b)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()<span class=\"comment\">//新建一个ServeMux。</span></span><br><span class=\"line\">    mux.Handle(<span class=\"string\">\"/h\"</span>, &amp;b&#123;&#125;)<span class=\"comment\">//注册路由，把\"/\"注册给b这个实现Handler接口的struct，注册到map表中。</span></span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>mux.Handle内部</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Handle registers the handler for the given pattern.</span></span><br><span class=\"line\"><span class=\"comment\">// If a handler already exists for pattern, Handle panics.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;</span><br><span class=\"line\">   mux.mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> mux.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: invalid pattern \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> handler == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: nil handler\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m[pattern].explicit &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">\"http: multiple registrations for \"</span> + pattern)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> mux.m == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      mux.m = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]muxEntry)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//将路由作为key，然后将handler和路由以及显示调用设置为true</span></span><br><span class=\"line\">   mux.m[pattern] = muxEntry&#123;explicit: <span class=\"literal\">true</span>, h: handler, pattern: pattern&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> pattern[<span class=\"number\">0</span>] != <span class=\"string\">'/'</span> &#123;</span><br><span class=\"line\">      mux.hosts = <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>所以可以看出ServeMux是通过一个map将路由以及函数存起来的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">Handle</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler Handler)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数接收的第一个参数是<strong>路由</strong>，第二个参数是一个<strong>Handler</strong>。这个Handler和上面ListenAndServe的第二个参数是一样的是只有一个ServeHTTP(ResponseWriter, *Request)方法的接口。所以此处的handler需要实现ServeHTTP方法。</p>\n<p>运行时，因为第二个参数是mux，所以http会调用mux的ServeHTTP方法。ServeHTTP方法执行时，会检查map表（表里有一条数据，key是“/h”，value是&amp;b{}的ServeHTTP方法）</p>\n<p>如果用户访问<code>/h</code>的话，mux因为匹配上了，mux的ServeHTTP方法会去调用&amp;b{}的 ServeHTTP方法，从而打印hello<br>如果用户访问<code>/abc</code>的话，mux因为没有匹配上，从而打印404 page not found</p>\n<h3 id=\"2-4、ServeMux的HandleFunc方法\"><a href=\"#2-4、ServeMux的HandleFunc方法\" class=\"headerlink\" title=\"2.4、ServeMux的HandleFunc方法\"></a>2.4、ServeMux的HandleFunc方法</h3><p>ServeMux有一个HandleFunc方法，此方法直接调用handle函数并实现了ServeHTTP</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mux *ServeMux)</span> <span class=\"title\">HandleFunc</span><span class=\"params\">(pattern <span class=\"keyword\">string</span>, handler <span class=\"keyword\">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class=\"line\">   mux.Handle(pattern, HandlerFunc(handler))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ResponseWriter, *Request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ServeHTTP</span> <span class=\"title\">calls</span> <span class=\"title\">f</span><span class=\"params\">(w, r)</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(f HandlerFunc)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class=\"line\">   f(w, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以使用HandlerFunc的时候</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/h\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/bye\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">        io.WriteString(w, <span class=\"string\">\"byebye\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/hello\"</span>, sayhello)</span><br><span class=\"line\">    http.ListenAndServe(<span class=\"string\">\":8080\"</span>, mux)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayhello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    io.WriteString(w, <span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"redis集群安装","date":"2017-12-29T02:00:28.000Z","_content":"\n# redis Cluster 集群安装\n\n## 集群部署\n\n测试部署方式，一台测试机多实例启动部署。\n\n安装redis\n\n```\n$ wget http://download.redis.io/releases/redis-3.2.8.tar.gz\n$ tar xzf redis-3.2.8.tar.gz\n$ cd redis-3.2.8\n$ yum groupinstall -y \"Development Tools\"\n$ make && make install\n```\n\n修改配置文件 redis.conf\n\n```yaml\n#redis.conf默认配置\ndaemonize yes   #后台运行开启\npidfile /var/run/redis/redis.pid  #多实例情况下需修改，指定pid文件的路径 通过绝对路径指明文件存放的位置 自行创建相关的文件目录 例如redis_6380.pid\nport 6379　　　　　　　　#多实例情况下需要修改,修改端口号 例如6380\ntcp-backlog 511\nbind 0.0.0.0　　　　　　\ntimeout 0\ntcp-keepalive 0\nloglevel notice\nlogfile /var/log/redis/redis.log　　　　　　#多实例情况下需要修改，例如6380.log\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb　　#多实例情况下需要修改，修改dump日志文件路径 果不修改dump文件那么每次的日志文件都是公用的 例如dump.6380.rdb\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly yes  #启用二进制日志\nappendfilename \"appendonly.aof\"　　#多实例情况下需要修改,例如 appendonly_6380.aof\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\n\n#################自定义配置\n#系统配置\n#vim /etc/sysctl.conf\n#vm.overcommit_memory = 1\n\naof-rewrite-incremental-fsync yes\nmaxmemory 4096mb\nmaxmemory-policy allkeys-lru\ndir /opt/redis/data　　　　　　#多实例情况下需要修改，例如/data/6380\n\n#集群配置\ncluster-enabled yes   #启用集群\ncluster-config-file /opt/redis/6380/nodes.conf   #多实例情况下需要修改，例如/6380/\ncluster-node-timeout 5000   #集群超时时间\n\n\n#从ping主间隔默认10秒\n#复制超时时间\n#repl-timeout 60\n\n#远距离主从\n#config set client-output-buffer-limit \"slave 536870912 536870912 0\"\n#config set repl-backlog-size 209715200\n```\n\n### 拷贝redis.conf文件到文件夹中\n\ncp redis.conf 7000/redis-7000.conf\n\nmkdir 7000 7001 7002 7003 7004 7005\n\n### 将配置文件分别拷贝到7001-7008中，需要修改端口号即可.\n\n在vim下执行以下命令可以先将文件中的全部7000修改为7001\n\n:%s/7000/7001/g 注：代表将当前文本的所有的7000替换成7001\n\n分别将7002-7008的配置文件进行修改\n\n.创建shell脚本文件启动多个redis服务从7000-7008\n\n```\n#!/bin/sh\nredis-server 7000/redis-7000.conf &\nredis-server 7001/redis-7001.conf &\nredis-server 7002/redis-7002.conf &\nredis-server 7003/redis-7003.conf &\nredis-server 7004/redis-7004.conf &\nredis-server 7005/redis-7005.conf &\nredis-server 7006/redis-7006.conf &\nredis-server 7007/redis-7007.conf &\nredis-server 7008/redis-7008.conf &\n```\n\n## 创建redis-cluster\n\n通过redis-trib.rb来创建redis集群，\n\n1、安装的ruby，通过yum 源下载安装的ruby可能版本过低，导致:\n\n输入命令 “ gem install redis “ 出现 “ ERROR: Error installing redis redis requires Ruby version >= 2.2.2. “\n\n所以要安装ruby的RVM管理工具获取ruby的最新包\n\n使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装，这个时候可能会出现\n\n```\nGPG signature verification failed for ‘/usr/local/rvm/archives/rvm-1.29.3.tgz‘ - ‘https://github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc‘! Try to install GPG v2 and then fetch the public key:\n```\n\n这时候要输入密钥 `gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3`\n\n然后在执行\n\n```\ncurl -L get.rvm.io | bash -s stable\nsource /usr/local/rvm/scripts/rvm\n```\n\n查看rvm中管理的所有ruby版本，\n输入命令 `rvm list known`进行查询，查询出来如下\n\n```\n# MRI Rubies\n[ruby-]1.8.6[-p420]\n[ruby-]1.8.7[-head] # security released on head\n[ruby-]1.9.1[-p431]\n[ruby-]1.9.2[-p330]\n[ruby-]1.9.3[-p551]\n[ruby-]2.0.0[-p648]\n[ruby-]2.1[.10]\n[ruby-]2.2[.7]\n[ruby-]2.3[.4]\n[ruby-]2.4[.1]\nruby-head\n\n# for forks use: rvm install ruby-head-<name> --url https://github.com/github/ruby.git --branch 2.2\n\n# JRuby\njruby-1.6[.8]\njruby-1.7[.27]\njruby[-9.1.13.0]\njruby-head\n\n# Rubinius\nrbx-1[.4.3]\nrbx-2.3[.0]\nrbx-2.4[.1]\nrbx-2[.5.8]\nrbx-3[.84]\nrbx-head\n\n# Opal\nopal\n\n# Minimalistic ruby implementation - ISO 30170:2012\nmruby-1.0.0\nmruby-1.1.0\nmruby-1.2.0\nmruby-1[.3.0]\nmruby[-head]\n\n# Ruby Enterprise Edition\nree-1.8.6\nree[-1.8.7][-2012.02]\n\n# Topaz\ntopaz\n\n# MagLev\nmaglev[-head]\nmaglev-1.0.0\n\n# Mac OS X Snow Leopard Or Newer\nmacruby-0.10\nmacruby-0.11\nmacruby[-0.12]\nmacruby-nightly\n```\n\n选择一个你喜欢的版本进行安装，但首先提醒一下，你所选择的版本不能低于 “ 2.0.0 “ 就可以了，输入命令 “ rvm install 2.3.4 “ 进行安装，如下\n\n```\n[root@VM_0_12_centos ~]# rvm install 2.3.4\nSearching for binary rubies, this might take some time.\nFound remote file https://rvm_io.global.ssl.fastly.net/binaries/centos/7/x86_64/ruby-2.3.4.tar.bz2\nChecking requirements for centos.\nInstalling requirements for centos.\nInstalling required packages: libffi-devel, readline-devel, sqlite-devel, zlib-devel, libyaml-devel, openssl-devel.............\nRequirements installation successful.\nruby-2.3.4 - #configure\nruby-2.3.4 - #download\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 25.2M  100 25.2M    0     0   461k      0  0:00:55  0:00:55 --:--:--  225k\nNo checksum for downloaded archive, recording checksum in user configuration.\nruby-2.3.4 - #validate archive\nruby-2.3.4 - #extract\nruby-2.3.4 - #validate binary\nruby-2.3.4 - #setup\nruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4@global\nruby-2.3.4 - #importing gemset /usr/local/rvm/gemsets/global.gems..............................\nruby-2.3.4 - #generating global wrappers........\nruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4\nruby-2.3.4 - #importing gemsetfile /usr/local/rvm/gemsets/default.gems evaluated to empty gem list\nruby-2.3.4 - #generating default wrappers........\n```\n\nredis-trib.rb命令与redis-cli命令放置在同一个目录中，可全路径执行或者创建别名。\n\nredis-trib.rb create –replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:70005\n\n–replicas 1 表示一主一从，\n\n#### 脚本使用帮助\n\n- 查看脚本帮助\n\n```\n$ ruby redis-trib.rb help\nUsage: redis-trib <command> <options> <arguments ...>\n\n  create          host1:port1 ... hostN:portN\n                  --replicas <arg>\n  check           host:port\n  info            host:port\n  fix             host:port\n                  --timeout <arg>\n  reshard         host:port\n                  --from <arg>\n                  --to <arg>\n                  --slots <arg>\n                  --yes\n                  --timeout <arg>\n                  --pipeline <arg>\n  rebalance       host:port\n                  --weight <arg>\n                  --auto-weights\n                  --use-empty-masters\n                  --timeout <arg>\n                  --simulate\n                  --pipeline <arg>\n                  --threshold <arg>\n  add-node        new_host:new_port existing_host:existing_port\n                  --slave\n                  --master-id <arg>\n  del-node        host:port node_id\n  set-timeout     host:port milliseconds\n  call            host:port command arg arg .. arg\n  import          host:port\n                  --from <arg>\n                  --copy\n                  --replace\n  help            (show this help)\n\nFor check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.\n```\n\n- 各选项详解\n\n```\n1、create：创建集群\n2、check：检查集群\n3、info：查看集群信息\n4、fix：修复集群\n5、reshard：在线迁移slot\n6、rebalance：平衡集群节点slot数量\n7、add-node：将新节点加入集群\n8、del-node：从集群中删除节点\n9、set-timeout：设置集群节点间心跳连接的超时时间\n10、call：在集群全部节点上执行命令\n11、import：将外部redis数据导入集群\n```","source":"_posts/redis集群安装.md","raw":"---\ntitle: redis集群安装\ndate: 2017-12-29 10:00:28\ntags: redis\ncategories: redis\n---\n\n# redis Cluster 集群安装\n\n## 集群部署\n\n测试部署方式，一台测试机多实例启动部署。\n\n安装redis\n\n```\n$ wget http://download.redis.io/releases/redis-3.2.8.tar.gz\n$ tar xzf redis-3.2.8.tar.gz\n$ cd redis-3.2.8\n$ yum groupinstall -y \"Development Tools\"\n$ make && make install\n```\n\n修改配置文件 redis.conf\n\n```yaml\n#redis.conf默认配置\ndaemonize yes   #后台运行开启\npidfile /var/run/redis/redis.pid  #多实例情况下需修改，指定pid文件的路径 通过绝对路径指明文件存放的位置 自行创建相关的文件目录 例如redis_6380.pid\nport 6379　　　　　　　　#多实例情况下需要修改,修改端口号 例如6380\ntcp-backlog 511\nbind 0.0.0.0　　　　　　\ntimeout 0\ntcp-keepalive 0\nloglevel notice\nlogfile /var/log/redis/redis.log　　　　　　#多实例情况下需要修改，例如6380.log\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb　　#多实例情况下需要修改，修改dump日志文件路径 果不修改dump文件那么每次的日志文件都是公用的 例如dump.6380.rdb\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly yes  #启用二进制日志\nappendfilename \"appendonly.aof\"　　#多实例情况下需要修改,例如 appendonly_6380.aof\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\n\n#################自定义配置\n#系统配置\n#vim /etc/sysctl.conf\n#vm.overcommit_memory = 1\n\naof-rewrite-incremental-fsync yes\nmaxmemory 4096mb\nmaxmemory-policy allkeys-lru\ndir /opt/redis/data　　　　　　#多实例情况下需要修改，例如/data/6380\n\n#集群配置\ncluster-enabled yes   #启用集群\ncluster-config-file /opt/redis/6380/nodes.conf   #多实例情况下需要修改，例如/6380/\ncluster-node-timeout 5000   #集群超时时间\n\n\n#从ping主间隔默认10秒\n#复制超时时间\n#repl-timeout 60\n\n#远距离主从\n#config set client-output-buffer-limit \"slave 536870912 536870912 0\"\n#config set repl-backlog-size 209715200\n```\n\n### 拷贝redis.conf文件到文件夹中\n\ncp redis.conf 7000/redis-7000.conf\n\nmkdir 7000 7001 7002 7003 7004 7005\n\n### 将配置文件分别拷贝到7001-7008中，需要修改端口号即可.\n\n在vim下执行以下命令可以先将文件中的全部7000修改为7001\n\n:%s/7000/7001/g 注：代表将当前文本的所有的7000替换成7001\n\n分别将7002-7008的配置文件进行修改\n\n.创建shell脚本文件启动多个redis服务从7000-7008\n\n```\n#!/bin/sh\nredis-server 7000/redis-7000.conf &\nredis-server 7001/redis-7001.conf &\nredis-server 7002/redis-7002.conf &\nredis-server 7003/redis-7003.conf &\nredis-server 7004/redis-7004.conf &\nredis-server 7005/redis-7005.conf &\nredis-server 7006/redis-7006.conf &\nredis-server 7007/redis-7007.conf &\nredis-server 7008/redis-7008.conf &\n```\n\n## 创建redis-cluster\n\n通过redis-trib.rb来创建redis集群，\n\n1、安装的ruby，通过yum 源下载安装的ruby可能版本过低，导致:\n\n输入命令 “ gem install redis “ 出现 “ ERROR: Error installing redis redis requires Ruby version >= 2.2.2. “\n\n所以要安装ruby的RVM管理工具获取ruby的最新包\n\n使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装，这个时候可能会出现\n\n```\nGPG signature verification failed for ‘/usr/local/rvm/archives/rvm-1.29.3.tgz‘ - ‘https://github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc‘! Try to install GPG v2 and then fetch the public key:\n```\n\n这时候要输入密钥 `gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3`\n\n然后在执行\n\n```\ncurl -L get.rvm.io | bash -s stable\nsource /usr/local/rvm/scripts/rvm\n```\n\n查看rvm中管理的所有ruby版本，\n输入命令 `rvm list known`进行查询，查询出来如下\n\n```\n# MRI Rubies\n[ruby-]1.8.6[-p420]\n[ruby-]1.8.7[-head] # security released on head\n[ruby-]1.9.1[-p431]\n[ruby-]1.9.2[-p330]\n[ruby-]1.9.3[-p551]\n[ruby-]2.0.0[-p648]\n[ruby-]2.1[.10]\n[ruby-]2.2[.7]\n[ruby-]2.3[.4]\n[ruby-]2.4[.1]\nruby-head\n\n# for forks use: rvm install ruby-head-<name> --url https://github.com/github/ruby.git --branch 2.2\n\n# JRuby\njruby-1.6[.8]\njruby-1.7[.27]\njruby[-9.1.13.0]\njruby-head\n\n# Rubinius\nrbx-1[.4.3]\nrbx-2.3[.0]\nrbx-2.4[.1]\nrbx-2[.5.8]\nrbx-3[.84]\nrbx-head\n\n# Opal\nopal\n\n# Minimalistic ruby implementation - ISO 30170:2012\nmruby-1.0.0\nmruby-1.1.0\nmruby-1.2.0\nmruby-1[.3.0]\nmruby[-head]\n\n# Ruby Enterprise Edition\nree-1.8.6\nree[-1.8.7][-2012.02]\n\n# Topaz\ntopaz\n\n# MagLev\nmaglev[-head]\nmaglev-1.0.0\n\n# Mac OS X Snow Leopard Or Newer\nmacruby-0.10\nmacruby-0.11\nmacruby[-0.12]\nmacruby-nightly\n```\n\n选择一个你喜欢的版本进行安装，但首先提醒一下，你所选择的版本不能低于 “ 2.0.0 “ 就可以了，输入命令 “ rvm install 2.3.4 “ 进行安装，如下\n\n```\n[root@VM_0_12_centos ~]# rvm install 2.3.4\nSearching for binary rubies, this might take some time.\nFound remote file https://rvm_io.global.ssl.fastly.net/binaries/centos/7/x86_64/ruby-2.3.4.tar.bz2\nChecking requirements for centos.\nInstalling requirements for centos.\nInstalling required packages: libffi-devel, readline-devel, sqlite-devel, zlib-devel, libyaml-devel, openssl-devel.............\nRequirements installation successful.\nruby-2.3.4 - #configure\nruby-2.3.4 - #download\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 25.2M  100 25.2M    0     0   461k      0  0:00:55  0:00:55 --:--:--  225k\nNo checksum for downloaded archive, recording checksum in user configuration.\nruby-2.3.4 - #validate archive\nruby-2.3.4 - #extract\nruby-2.3.4 - #validate binary\nruby-2.3.4 - #setup\nruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4@global\nruby-2.3.4 - #importing gemset /usr/local/rvm/gemsets/global.gems..............................\nruby-2.3.4 - #generating global wrappers........\nruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4\nruby-2.3.4 - #importing gemsetfile /usr/local/rvm/gemsets/default.gems evaluated to empty gem list\nruby-2.3.4 - #generating default wrappers........\n```\n\nredis-trib.rb命令与redis-cli命令放置在同一个目录中，可全路径执行或者创建别名。\n\nredis-trib.rb create –replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:70005\n\n–replicas 1 表示一主一从，\n\n#### 脚本使用帮助\n\n- 查看脚本帮助\n\n```\n$ ruby redis-trib.rb help\nUsage: redis-trib <command> <options> <arguments ...>\n\n  create          host1:port1 ... hostN:portN\n                  --replicas <arg>\n  check           host:port\n  info            host:port\n  fix             host:port\n                  --timeout <arg>\n  reshard         host:port\n                  --from <arg>\n                  --to <arg>\n                  --slots <arg>\n                  --yes\n                  --timeout <arg>\n                  --pipeline <arg>\n  rebalance       host:port\n                  --weight <arg>\n                  --auto-weights\n                  --use-empty-masters\n                  --timeout <arg>\n                  --simulate\n                  --pipeline <arg>\n                  --threshold <arg>\n  add-node        new_host:new_port existing_host:existing_port\n                  --slave\n                  --master-id <arg>\n  del-node        host:port node_id\n  set-timeout     host:port milliseconds\n  call            host:port command arg arg .. arg\n  import          host:port\n                  --from <arg>\n                  --copy\n                  --replace\n  help            (show this help)\n\nFor check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.\n```\n\n- 各选项详解\n\n```\n1、create：创建集群\n2、check：检查集群\n3、info：查看集群信息\n4、fix：修复集群\n5、reshard：在线迁移slot\n6、rebalance：平衡集群节点slot数量\n7、add-node：将新节点加入集群\n8、del-node：从集群中删除节点\n9、set-timeout：设置集群节点间心跳连接的超时时间\n10、call：在集群全部节点上执行命令\n11、import：将外部redis数据导入集群\n```","slug":"redis集群安装","published":1,"updated":"2018-08-10T03:27:16.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3p000eu5n98wp5ryn1","content":"<h1 id=\"redis-Cluster-集群安装\"><a href=\"#redis-Cluster-集群安装\" class=\"headerlink\" title=\"redis Cluster 集群安装\"></a>redis Cluster 集群安装</h1><h2 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h2><p>测试部署方式，一台测试机多实例启动部署。</p>\n<p>安装redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://download.redis.io/releases/redis-3.2.8.tar.gz</span><br><span class=\"line\">$ tar xzf redis-3.2.8.tar.gz</span><br><span class=\"line\">$ cd redis-3.2.8</span><br><span class=\"line\">$ yum groupinstall -y &quot;Development Tools&quot;</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>修改配置文件 redis.conf</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#redis.conf默认配置</span></span><br><span class=\"line\"><span class=\"string\">daemonize</span> <span class=\"literal\">yes</span>   <span class=\"comment\">#后台运行开启</span></span><br><span class=\"line\"><span class=\"string\">pidfile</span> <span class=\"string\">/var/run/redis/redis.pid</span>  <span class=\"comment\">#多实例情况下需修改，指定pid文件的路径 通过绝对路径指明文件存放的位置 自行创建相关的文件目录 例如redis_6380.pid</span></span><br><span class=\"line\"><span class=\"string\">port</span> <span class=\"number\">6379</span>　　　　　　　　<span class=\"comment\">#多实例情况下需要修改,修改端口号 例如6380</span></span><br><span class=\"line\"><span class=\"string\">tcp-backlog</span> <span class=\"number\">511</span></span><br><span class=\"line\"><span class=\"string\">bind</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>　　　　　　</span><br><span class=\"line\"><span class=\"string\">timeout</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">tcp-keepalive</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">loglevel</span> <span class=\"string\">notice</span></span><br><span class=\"line\"><span class=\"string\">logfile</span> <span class=\"string\">/var/log/redis/redis.log</span>　　　　　　<span class=\"comment\">#多实例情况下需要修改，例如6380.log</span></span><br><span class=\"line\"><span class=\"string\">databases</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"string\">save</span> <span class=\"number\">900</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"string\">save</span> <span class=\"number\">300</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"string\">save</span> <span class=\"number\">60</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"string\">stop-writes-on-bgsave-error</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">rdbcompression</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">rdbchecksum</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">dbfilename</span> <span class=\"string\">dump.rdb</span>　　<span class=\"comment\">#多实例情况下需要修改，修改dump日志文件路径 果不修改dump文件那么每次的日志文件都是公用的 例如dump.6380.rdb</span></span><br><span class=\"line\"><span class=\"string\">slave-serve-stale-data</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">slave-read-only</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">repl-diskless-sync</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"string\">repl-diskless-sync-delay</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">repl-disable-tcp-nodelay</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"string\">slave-priority</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">appendonly</span> <span class=\"literal\">yes</span>  <span class=\"comment\">#启用二进制日志</span></span><br><span class=\"line\"><span class=\"string\">appendfilename</span> <span class=\"string\">\"appendonly.aof\"</span>　　<span class=\"comment\">#多实例情况下需要修改,例如 appendonly_6380.aof</span></span><br><span class=\"line\"><span class=\"string\">appendfsync</span> <span class=\"string\">everysec</span></span><br><span class=\"line\"><span class=\"literal\">no</span><span class=\"bullet\">-appendfsync-on-rewrite</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"string\">auto-aof-rewrite-percentage</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">auto-aof-rewrite-min-size</span> <span class=\"number\">64</span><span class=\"string\">mb</span></span><br><span class=\"line\"><span class=\"string\">aof-load-truncated</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">lua-time-limit</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"string\">slowlog-log-slower-than</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"string\">slowlog-max-len</span> <span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"string\">latency-monitor-threshold</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">notify-keyspace-events</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"string\">hash-max-ziplist-entries</span> <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"string\">hash-max-ziplist-value</span> <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"string\">list-max-ziplist-entries</span> <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"string\">list-max-ziplist-value</span> <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"string\">set-max-intset-entries</span> <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"string\">zset-max-ziplist-entries</span> <span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"string\">zset-max-ziplist-value</span> <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"string\">hll-sparse-max-bytes</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"string\">activerehashing</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">client-output-buffer-limit</span> <span class=\"string\">normal</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">client-output-buffer-limit</span> <span class=\"string\">slave</span> <span class=\"number\">256</span><span class=\"string\">mb</span> <span class=\"number\">64</span><span class=\"string\">mb</span> <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"string\">client-output-buffer-limit</span> <span class=\"string\">pubsub</span> <span class=\"number\">32</span><span class=\"string\">mb</span> <span class=\"number\">8</span><span class=\"string\">mb</span> <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"string\">hz</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#################自定义配置</span></span><br><span class=\"line\"><span class=\"comment\">#系统配置</span></span><br><span class=\"line\"><span class=\"comment\">#vim /etc/sysctl.conf</span></span><br><span class=\"line\"><span class=\"comment\">#vm.overcommit_memory = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">aof-rewrite-incremental-fsync</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">maxmemory</span> <span class=\"number\">4096</span><span class=\"string\">mb</span></span><br><span class=\"line\"><span class=\"string\">maxmemory-policy</span> <span class=\"string\">allkeys-lru</span></span><br><span class=\"line\"><span class=\"string\">dir</span> <span class=\"string\">/opt/redis/data</span>　　　　　　<span class=\"comment\">#多实例情况下需要修改，例如/data/6380</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#集群配置</span></span><br><span class=\"line\"><span class=\"string\">cluster-enabled</span> <span class=\"literal\">yes</span>   <span class=\"comment\">#启用集群</span></span><br><span class=\"line\"><span class=\"string\">cluster-config-file</span> <span class=\"string\">/opt/redis/6380/nodes.conf</span>   <span class=\"comment\">#多实例情况下需要修改，例如/6380/</span></span><br><span class=\"line\"><span class=\"string\">cluster-node-timeout</span> <span class=\"number\">5000</span>   <span class=\"comment\">#集群超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从ping主间隔默认10秒</span></span><br><span class=\"line\"><span class=\"comment\">#复制超时时间</span></span><br><span class=\"line\"><span class=\"comment\">#repl-timeout 60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#远距离主从</span></span><br><span class=\"line\"><span class=\"comment\">#config set client-output-buffer-limit \"slave 536870912 536870912 0\"</span></span><br><span class=\"line\"><span class=\"comment\">#config set repl-backlog-size 209715200</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"拷贝redis-conf文件到文件夹中\"><a href=\"#拷贝redis-conf文件到文件夹中\" class=\"headerlink\" title=\"拷贝redis.conf文件到文件夹中\"></a>拷贝redis.conf文件到文件夹中</h3><p>cp redis.conf 7000/redis-7000.conf</p>\n<p>mkdir 7000 7001 7002 7003 7004 7005</p>\n<h3 id=\"将配置文件分别拷贝到7001-7008中，需要修改端口号即可\"><a href=\"#将配置文件分别拷贝到7001-7008中，需要修改端口号即可\" class=\"headerlink\" title=\"将配置文件分别拷贝到7001-7008中，需要修改端口号即可.\"></a>将配置文件分别拷贝到7001-7008中，需要修改端口号即可.</h3><p>在vim下执行以下命令可以先将文件中的全部7000修改为7001</p>\n<p>:%s/7000/7001/g 注：代表将当前文本的所有的7000替换成7001</p>\n<p>分别将7002-7008的配置文件进行修改</p>\n<p>.创建shell脚本文件启动多个redis服务从7000-7008</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">redis-server 7000/redis-7000.conf &amp;</span><br><span class=\"line\">redis-server 7001/redis-7001.conf &amp;</span><br><span class=\"line\">redis-server 7002/redis-7002.conf &amp;</span><br><span class=\"line\">redis-server 7003/redis-7003.conf &amp;</span><br><span class=\"line\">redis-server 7004/redis-7004.conf &amp;</span><br><span class=\"line\">redis-server 7005/redis-7005.conf &amp;</span><br><span class=\"line\">redis-server 7006/redis-7006.conf &amp;</span><br><span class=\"line\">redis-server 7007/redis-7007.conf &amp;</span><br><span class=\"line\">redis-server 7008/redis-7008.conf &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建redis-cluster\"><a href=\"#创建redis-cluster\" class=\"headerlink\" title=\"创建redis-cluster\"></a>创建redis-cluster</h2><p>通过redis-trib.rb来创建redis集群，</p>\n<p>1、安装的ruby，通过yum 源下载安装的ruby可能版本过低，导致:</p>\n<p>输入命令 “ gem install redis “ 出现 “ ERROR: Error installing redis redis requires Ruby version &gt;= 2.2.2. “</p>\n<p>所以要安装ruby的RVM管理工具获取ruby的最新包</p>\n<p>使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装，这个时候可能会出现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GPG signature verification failed for ‘/usr/local/rvm/archives/rvm-1.29.3.tgz‘ - ‘https://github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc‘! Try to install GPG v2 and then fetch the public key:</span><br></pre></td></tr></table></figure>\n<p>这时候要输入密钥 <code>gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</code></p>\n<p>然后在执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L get.rvm.io | bash -s stable</span><br><span class=\"line\">source /usr/local/rvm/scripts/rvm</span><br></pre></td></tr></table></figure>\n<p>查看rvm中管理的所有ruby版本，<br>输入命令 <code>rvm list known</code>进行查询，查询出来如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># MRI Rubies</span><br><span class=\"line\">[ruby-]1.8.6[-p420]</span><br><span class=\"line\">[ruby-]1.8.7[-head] # security released on head</span><br><span class=\"line\">[ruby-]1.9.1[-p431]</span><br><span class=\"line\">[ruby-]1.9.2[-p330]</span><br><span class=\"line\">[ruby-]1.9.3[-p551]</span><br><span class=\"line\">[ruby-]2.0.0[-p648]</span><br><span class=\"line\">[ruby-]2.1[.10]</span><br><span class=\"line\">[ruby-]2.2[.7]</span><br><span class=\"line\">[ruby-]2.3[.4]</span><br><span class=\"line\">[ruby-]2.4[.1]</span><br><span class=\"line\">ruby-head</span><br><span class=\"line\"></span><br><span class=\"line\"># for forks use: rvm install ruby-head-&lt;name&gt; --url https://github.com/github/ruby.git --branch 2.2</span><br><span class=\"line\"></span><br><span class=\"line\"># JRuby</span><br><span class=\"line\">jruby-1.6[.8]</span><br><span class=\"line\">jruby-1.7[.27]</span><br><span class=\"line\">jruby[-9.1.13.0]</span><br><span class=\"line\">jruby-head</span><br><span class=\"line\"></span><br><span class=\"line\"># Rubinius</span><br><span class=\"line\">rbx-1[.4.3]</span><br><span class=\"line\">rbx-2.3[.0]</span><br><span class=\"line\">rbx-2.4[.1]</span><br><span class=\"line\">rbx-2[.5.8]</span><br><span class=\"line\">rbx-3[.84]</span><br><span class=\"line\">rbx-head</span><br><span class=\"line\"></span><br><span class=\"line\"># Opal</span><br><span class=\"line\">opal</span><br><span class=\"line\"></span><br><span class=\"line\"># Minimalistic ruby implementation - ISO 30170:2012</span><br><span class=\"line\">mruby-1.0.0</span><br><span class=\"line\">mruby-1.1.0</span><br><span class=\"line\">mruby-1.2.0</span><br><span class=\"line\">mruby-1[.3.0]</span><br><span class=\"line\">mruby[-head]</span><br><span class=\"line\"></span><br><span class=\"line\"># Ruby Enterprise Edition</span><br><span class=\"line\">ree-1.8.6</span><br><span class=\"line\">ree[-1.8.7][-2012.02]</span><br><span class=\"line\"></span><br><span class=\"line\"># Topaz</span><br><span class=\"line\">topaz</span><br><span class=\"line\"></span><br><span class=\"line\"># MagLev</span><br><span class=\"line\">maglev[-head]</span><br><span class=\"line\">maglev-1.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Mac OS X Snow Leopard Or Newer</span><br><span class=\"line\">macruby-0.10</span><br><span class=\"line\">macruby-0.11</span><br><span class=\"line\">macruby[-0.12]</span><br><span class=\"line\">macruby-nightly</span><br></pre></td></tr></table></figure>\n<p>选择一个你喜欢的版本进行安装，但首先提醒一下，你所选择的版本不能低于 “ 2.0.0 “ 就可以了，输入命令 “ rvm install 2.3.4 “ 进行安装，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_12_centos ~]# rvm install 2.3.4</span><br><span class=\"line\">Searching for binary rubies, this might take some time.</span><br><span class=\"line\">Found remote file https://rvm_io.global.ssl.fastly.net/binaries/centos/7/x86_64/ruby-2.3.4.tar.bz2</span><br><span class=\"line\">Checking requirements for centos.</span><br><span class=\"line\">Installing requirements for centos.</span><br><span class=\"line\">Installing required packages: libffi-devel, readline-devel, sqlite-devel, zlib-devel, libyaml-devel, openssl-devel.............</span><br><span class=\"line\">Requirements installation successful.</span><br><span class=\"line\">ruby-2.3.4 - #configure</span><br><span class=\"line\">ruby-2.3.4 - #download</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100 25.2M  100 25.2M    0     0   461k      0  0:00:55  0:00:55 --:--:--  225k</span><br><span class=\"line\">No checksum for downloaded archive, recording checksum in user configuration.</span><br><span class=\"line\">ruby-2.3.4 - #validate archive</span><br><span class=\"line\">ruby-2.3.4 - #extract</span><br><span class=\"line\">ruby-2.3.4 - #validate binary</span><br><span class=\"line\">ruby-2.3.4 - #setup</span><br><span class=\"line\">ruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4@global</span><br><span class=\"line\">ruby-2.3.4 - #importing gemset /usr/local/rvm/gemsets/global.gems..............................</span><br><span class=\"line\">ruby-2.3.4 - #generating global wrappers........</span><br><span class=\"line\">ruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4</span><br><span class=\"line\">ruby-2.3.4 - #importing gemsetfile /usr/local/rvm/gemsets/default.gems evaluated to empty gem list</span><br><span class=\"line\">ruby-2.3.4 - #generating default wrappers........</span><br></pre></td></tr></table></figure>\n<p>redis-trib.rb命令与redis-cli命令放置在同一个目录中，可全路径执行或者创建别名。</p>\n<p>redis-trib.rb create –replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:70005</p>\n<p>–replicas 1 表示一主一从，</p>\n<h4 id=\"脚本使用帮助\"><a href=\"#脚本使用帮助\" class=\"headerlink\" title=\"脚本使用帮助\"></a>脚本使用帮助</h4><ul>\n<li>查看脚本帮助</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby redis-trib.rb help</span><br><span class=\"line\">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  create          host1:port1 ... hostN:portN</span><br><span class=\"line\">                  --replicas &lt;arg&gt;</span><br><span class=\"line\">  check           host:port</span><br><span class=\"line\">  info            host:port</span><br><span class=\"line\">  fix             host:port</span><br><span class=\"line\">                  --timeout &lt;arg&gt;</span><br><span class=\"line\">  reshard         host:port</span><br><span class=\"line\">                  --from &lt;arg&gt;</span><br><span class=\"line\">                  --to &lt;arg&gt;</span><br><span class=\"line\">                  --slots &lt;arg&gt;</span><br><span class=\"line\">                  --yes</span><br><span class=\"line\">                  --timeout &lt;arg&gt;</span><br><span class=\"line\">                  --pipeline &lt;arg&gt;</span><br><span class=\"line\">  rebalance       host:port</span><br><span class=\"line\">                  --weight &lt;arg&gt;</span><br><span class=\"line\">                  --auto-weights</span><br><span class=\"line\">                  --use-empty-masters</span><br><span class=\"line\">                  --timeout &lt;arg&gt;</span><br><span class=\"line\">                  --simulate</span><br><span class=\"line\">                  --pipeline &lt;arg&gt;</span><br><span class=\"line\">                  --threshold &lt;arg&gt;</span><br><span class=\"line\">  add-node        new_host:new_port existing_host:existing_port</span><br><span class=\"line\">                  --slave</span><br><span class=\"line\">                  --master-id &lt;arg&gt;</span><br><span class=\"line\">  del-node        host:port node_id</span><br><span class=\"line\">  set-timeout     host:port milliseconds</span><br><span class=\"line\">  call            host:port command arg arg .. arg</span><br><span class=\"line\">  import          host:port</span><br><span class=\"line\">                  --from &lt;arg&gt;</span><br><span class=\"line\">                  --copy</span><br><span class=\"line\">                  --replace</span><br><span class=\"line\">  help            (show this help)</span><br><span class=\"line\"></span><br><span class=\"line\">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>各选项详解</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、create：创建集群</span><br><span class=\"line\">2、check：检查集群</span><br><span class=\"line\">3、info：查看集群信息</span><br><span class=\"line\">4、fix：修复集群</span><br><span class=\"line\">5、reshard：在线迁移slot</span><br><span class=\"line\">6、rebalance：平衡集群节点slot数量</span><br><span class=\"line\">7、add-node：将新节点加入集群</span><br><span class=\"line\">8、del-node：从集群中删除节点</span><br><span class=\"line\">9、set-timeout：设置集群节点间心跳连接的超时时间</span><br><span class=\"line\">10、call：在集群全部节点上执行命令</span><br><span class=\"line\">11、import：将外部redis数据导入集群</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redis-Cluster-集群安装\"><a href=\"#redis-Cluster-集群安装\" class=\"headerlink\" title=\"redis Cluster 集群安装\"></a>redis Cluster 集群安装</h1><h2 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h2><p>测试部署方式，一台测试机多实例启动部署。</p>\n<p>安装redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://download.redis.io/releases/redis-3.2.8.tar.gz</span><br><span class=\"line\">$ tar xzf redis-3.2.8.tar.gz</span><br><span class=\"line\">$ cd redis-3.2.8</span><br><span class=\"line\">$ yum groupinstall -y &quot;Development Tools&quot;</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>修改配置文件 redis.conf</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#redis.conf默认配置</span></span><br><span class=\"line\"><span class=\"string\">daemonize</span> <span class=\"literal\">yes</span>   <span class=\"comment\">#后台运行开启</span></span><br><span class=\"line\"><span class=\"string\">pidfile</span> <span class=\"string\">/var/run/redis/redis.pid</span>  <span class=\"comment\">#多实例情况下需修改，指定pid文件的路径 通过绝对路径指明文件存放的位置 自行创建相关的文件目录 例如redis_6380.pid</span></span><br><span class=\"line\"><span class=\"string\">port</span> <span class=\"number\">6379</span>　　　　　　　　<span class=\"comment\">#多实例情况下需要修改,修改端口号 例如6380</span></span><br><span class=\"line\"><span class=\"string\">tcp-backlog</span> <span class=\"number\">511</span></span><br><span class=\"line\"><span class=\"string\">bind</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>　　　　　　</span><br><span class=\"line\"><span class=\"string\">timeout</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">tcp-keepalive</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">loglevel</span> <span class=\"string\">notice</span></span><br><span class=\"line\"><span class=\"string\">logfile</span> <span class=\"string\">/var/log/redis/redis.log</span>　　　　　　<span class=\"comment\">#多实例情况下需要修改，例如6380.log</span></span><br><span class=\"line\"><span class=\"string\">databases</span> <span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"string\">save</span> <span class=\"number\">900</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"string\">save</span> <span class=\"number\">300</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"string\">save</span> <span class=\"number\">60</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"string\">stop-writes-on-bgsave-error</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">rdbcompression</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">rdbchecksum</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">dbfilename</span> <span class=\"string\">dump.rdb</span>　　<span class=\"comment\">#多实例情况下需要修改，修改dump日志文件路径 果不修改dump文件那么每次的日志文件都是公用的 例如dump.6380.rdb</span></span><br><span class=\"line\"><span class=\"string\">slave-serve-stale-data</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">slave-read-only</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">repl-diskless-sync</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"string\">repl-diskless-sync-delay</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">repl-disable-tcp-nodelay</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"string\">slave-priority</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">appendonly</span> <span class=\"literal\">yes</span>  <span class=\"comment\">#启用二进制日志</span></span><br><span class=\"line\"><span class=\"string\">appendfilename</span> <span class=\"string\">\"appendonly.aof\"</span>　　<span class=\"comment\">#多实例情况下需要修改,例如 appendonly_6380.aof</span></span><br><span class=\"line\"><span class=\"string\">appendfsync</span> <span class=\"string\">everysec</span></span><br><span class=\"line\"><span class=\"literal\">no</span><span class=\"bullet\">-appendfsync-on-rewrite</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"string\">auto-aof-rewrite-percentage</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">auto-aof-rewrite-min-size</span> <span class=\"number\">64</span><span class=\"string\">mb</span></span><br><span class=\"line\"><span class=\"string\">aof-load-truncated</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">lua-time-limit</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"string\">slowlog-log-slower-than</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"string\">slowlog-max-len</span> <span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"string\">latency-monitor-threshold</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">notify-keyspace-events</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"string\">hash-max-ziplist-entries</span> <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"string\">hash-max-ziplist-value</span> <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"string\">list-max-ziplist-entries</span> <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"string\">list-max-ziplist-value</span> <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"string\">set-max-intset-entries</span> <span class=\"number\">512</span></span><br><span class=\"line\"><span class=\"string\">zset-max-ziplist-entries</span> <span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"string\">zset-max-ziplist-value</span> <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"string\">hll-sparse-max-bytes</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"string\">activerehashing</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">client-output-buffer-limit</span> <span class=\"string\">normal</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">client-output-buffer-limit</span> <span class=\"string\">slave</span> <span class=\"number\">256</span><span class=\"string\">mb</span> <span class=\"number\">64</span><span class=\"string\">mb</span> <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"string\">client-output-buffer-limit</span> <span class=\"string\">pubsub</span> <span class=\"number\">32</span><span class=\"string\">mb</span> <span class=\"number\">8</span><span class=\"string\">mb</span> <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"string\">hz</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#################自定义配置</span></span><br><span class=\"line\"><span class=\"comment\">#系统配置</span></span><br><span class=\"line\"><span class=\"comment\">#vim /etc/sysctl.conf</span></span><br><span class=\"line\"><span class=\"comment\">#vm.overcommit_memory = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">aof-rewrite-incremental-fsync</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">maxmemory</span> <span class=\"number\">4096</span><span class=\"string\">mb</span></span><br><span class=\"line\"><span class=\"string\">maxmemory-policy</span> <span class=\"string\">allkeys-lru</span></span><br><span class=\"line\"><span class=\"string\">dir</span> <span class=\"string\">/opt/redis/data</span>　　　　　　<span class=\"comment\">#多实例情况下需要修改，例如/data/6380</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#集群配置</span></span><br><span class=\"line\"><span class=\"string\">cluster-enabled</span> <span class=\"literal\">yes</span>   <span class=\"comment\">#启用集群</span></span><br><span class=\"line\"><span class=\"string\">cluster-config-file</span> <span class=\"string\">/opt/redis/6380/nodes.conf</span>   <span class=\"comment\">#多实例情况下需要修改，例如/6380/</span></span><br><span class=\"line\"><span class=\"string\">cluster-node-timeout</span> <span class=\"number\">5000</span>   <span class=\"comment\">#集群超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从ping主间隔默认10秒</span></span><br><span class=\"line\"><span class=\"comment\">#复制超时时间</span></span><br><span class=\"line\"><span class=\"comment\">#repl-timeout 60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#远距离主从</span></span><br><span class=\"line\"><span class=\"comment\">#config set client-output-buffer-limit \"slave 536870912 536870912 0\"</span></span><br><span class=\"line\"><span class=\"comment\">#config set repl-backlog-size 209715200</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"拷贝redis-conf文件到文件夹中\"><a href=\"#拷贝redis-conf文件到文件夹中\" class=\"headerlink\" title=\"拷贝redis.conf文件到文件夹中\"></a>拷贝redis.conf文件到文件夹中</h3><p>cp redis.conf 7000/redis-7000.conf</p>\n<p>mkdir 7000 7001 7002 7003 7004 7005</p>\n<h3 id=\"将配置文件分别拷贝到7001-7008中，需要修改端口号即可\"><a href=\"#将配置文件分别拷贝到7001-7008中，需要修改端口号即可\" class=\"headerlink\" title=\"将配置文件分别拷贝到7001-7008中，需要修改端口号即可.\"></a>将配置文件分别拷贝到7001-7008中，需要修改端口号即可.</h3><p>在vim下执行以下命令可以先将文件中的全部7000修改为7001</p>\n<p>:%s/7000/7001/g 注：代表将当前文本的所有的7000替换成7001</p>\n<p>分别将7002-7008的配置文件进行修改</p>\n<p>.创建shell脚本文件启动多个redis服务从7000-7008</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">redis-server 7000/redis-7000.conf &amp;</span><br><span class=\"line\">redis-server 7001/redis-7001.conf &amp;</span><br><span class=\"line\">redis-server 7002/redis-7002.conf &amp;</span><br><span class=\"line\">redis-server 7003/redis-7003.conf &amp;</span><br><span class=\"line\">redis-server 7004/redis-7004.conf &amp;</span><br><span class=\"line\">redis-server 7005/redis-7005.conf &amp;</span><br><span class=\"line\">redis-server 7006/redis-7006.conf &amp;</span><br><span class=\"line\">redis-server 7007/redis-7007.conf &amp;</span><br><span class=\"line\">redis-server 7008/redis-7008.conf &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建redis-cluster\"><a href=\"#创建redis-cluster\" class=\"headerlink\" title=\"创建redis-cluster\"></a>创建redis-cluster</h2><p>通过redis-trib.rb来创建redis集群，</p>\n<p>1、安装的ruby，通过yum 源下载安装的ruby可能版本过低，导致:</p>\n<p>输入命令 “ gem install redis “ 出现 “ ERROR: Error installing redis redis requires Ruby version &gt;= 2.2.2. “</p>\n<p>所以要安装ruby的RVM管理工具获取ruby的最新包</p>\n<p>使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装，这个时候可能会出现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GPG signature verification failed for ‘/usr/local/rvm/archives/rvm-1.29.3.tgz‘ - ‘https://github.com/rvm/rvm/releases/download/1.29.3/1.29.3.tar.gz.asc‘! Try to install GPG v2 and then fetch the public key:</span><br></pre></td></tr></table></figure>\n<p>这时候要输入密钥 <code>gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</code></p>\n<p>然后在执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L get.rvm.io | bash -s stable</span><br><span class=\"line\">source /usr/local/rvm/scripts/rvm</span><br></pre></td></tr></table></figure>\n<p>查看rvm中管理的所有ruby版本，<br>输入命令 <code>rvm list known</code>进行查询，查询出来如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># MRI Rubies</span><br><span class=\"line\">[ruby-]1.8.6[-p420]</span><br><span class=\"line\">[ruby-]1.8.7[-head] # security released on head</span><br><span class=\"line\">[ruby-]1.9.1[-p431]</span><br><span class=\"line\">[ruby-]1.9.2[-p330]</span><br><span class=\"line\">[ruby-]1.9.3[-p551]</span><br><span class=\"line\">[ruby-]2.0.0[-p648]</span><br><span class=\"line\">[ruby-]2.1[.10]</span><br><span class=\"line\">[ruby-]2.2[.7]</span><br><span class=\"line\">[ruby-]2.3[.4]</span><br><span class=\"line\">[ruby-]2.4[.1]</span><br><span class=\"line\">ruby-head</span><br><span class=\"line\"></span><br><span class=\"line\"># for forks use: rvm install ruby-head-&lt;name&gt; --url https://github.com/github/ruby.git --branch 2.2</span><br><span class=\"line\"></span><br><span class=\"line\"># JRuby</span><br><span class=\"line\">jruby-1.6[.8]</span><br><span class=\"line\">jruby-1.7[.27]</span><br><span class=\"line\">jruby[-9.1.13.0]</span><br><span class=\"line\">jruby-head</span><br><span class=\"line\"></span><br><span class=\"line\"># Rubinius</span><br><span class=\"line\">rbx-1[.4.3]</span><br><span class=\"line\">rbx-2.3[.0]</span><br><span class=\"line\">rbx-2.4[.1]</span><br><span class=\"line\">rbx-2[.5.8]</span><br><span class=\"line\">rbx-3[.84]</span><br><span class=\"line\">rbx-head</span><br><span class=\"line\"></span><br><span class=\"line\"># Opal</span><br><span class=\"line\">opal</span><br><span class=\"line\"></span><br><span class=\"line\"># Minimalistic ruby implementation - ISO 30170:2012</span><br><span class=\"line\">mruby-1.0.0</span><br><span class=\"line\">mruby-1.1.0</span><br><span class=\"line\">mruby-1.2.0</span><br><span class=\"line\">mruby-1[.3.0]</span><br><span class=\"line\">mruby[-head]</span><br><span class=\"line\"></span><br><span class=\"line\"># Ruby Enterprise Edition</span><br><span class=\"line\">ree-1.8.6</span><br><span class=\"line\">ree[-1.8.7][-2012.02]</span><br><span class=\"line\"></span><br><span class=\"line\"># Topaz</span><br><span class=\"line\">topaz</span><br><span class=\"line\"></span><br><span class=\"line\"># MagLev</span><br><span class=\"line\">maglev[-head]</span><br><span class=\"line\">maglev-1.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Mac OS X Snow Leopard Or Newer</span><br><span class=\"line\">macruby-0.10</span><br><span class=\"line\">macruby-0.11</span><br><span class=\"line\">macruby[-0.12]</span><br><span class=\"line\">macruby-nightly</span><br></pre></td></tr></table></figure>\n<p>选择一个你喜欢的版本进行安装，但首先提醒一下，你所选择的版本不能低于 “ 2.0.0 “ 就可以了，输入命令 “ rvm install 2.3.4 “ 进行安装，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_12_centos ~]# rvm install 2.3.4</span><br><span class=\"line\">Searching for binary rubies, this might take some time.</span><br><span class=\"line\">Found remote file https://rvm_io.global.ssl.fastly.net/binaries/centos/7/x86_64/ruby-2.3.4.tar.bz2</span><br><span class=\"line\">Checking requirements for centos.</span><br><span class=\"line\">Installing requirements for centos.</span><br><span class=\"line\">Installing required packages: libffi-devel, readline-devel, sqlite-devel, zlib-devel, libyaml-devel, openssl-devel.............</span><br><span class=\"line\">Requirements installation successful.</span><br><span class=\"line\">ruby-2.3.4 - #configure</span><br><span class=\"line\">ruby-2.3.4 - #download</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100 25.2M  100 25.2M    0     0   461k      0  0:00:55  0:00:55 --:--:--  225k</span><br><span class=\"line\">No checksum for downloaded archive, recording checksum in user configuration.</span><br><span class=\"line\">ruby-2.3.4 - #validate archive</span><br><span class=\"line\">ruby-2.3.4 - #extract</span><br><span class=\"line\">ruby-2.3.4 - #validate binary</span><br><span class=\"line\">ruby-2.3.4 - #setup</span><br><span class=\"line\">ruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4@global</span><br><span class=\"line\">ruby-2.3.4 - #importing gemset /usr/local/rvm/gemsets/global.gems..............................</span><br><span class=\"line\">ruby-2.3.4 - #generating global wrappers........</span><br><span class=\"line\">ruby-2.3.4 - #gemset created /usr/local/rvm/gems/ruby-2.3.4</span><br><span class=\"line\">ruby-2.3.4 - #importing gemsetfile /usr/local/rvm/gemsets/default.gems evaluated to empty gem list</span><br><span class=\"line\">ruby-2.3.4 - #generating default wrappers........</span><br></pre></td></tr></table></figure>\n<p>redis-trib.rb命令与redis-cli命令放置在同一个目录中，可全路径执行或者创建别名。</p>\n<p>redis-trib.rb create –replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:70005</p>\n<p>–replicas 1 表示一主一从，</p>\n<h4 id=\"脚本使用帮助\"><a href=\"#脚本使用帮助\" class=\"headerlink\" title=\"脚本使用帮助\"></a>脚本使用帮助</h4><ul>\n<li>查看脚本帮助</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby redis-trib.rb help</span><br><span class=\"line\">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  create          host1:port1 ... hostN:portN</span><br><span class=\"line\">                  --replicas &lt;arg&gt;</span><br><span class=\"line\">  check           host:port</span><br><span class=\"line\">  info            host:port</span><br><span class=\"line\">  fix             host:port</span><br><span class=\"line\">                  --timeout &lt;arg&gt;</span><br><span class=\"line\">  reshard         host:port</span><br><span class=\"line\">                  --from &lt;arg&gt;</span><br><span class=\"line\">                  --to &lt;arg&gt;</span><br><span class=\"line\">                  --slots &lt;arg&gt;</span><br><span class=\"line\">                  --yes</span><br><span class=\"line\">                  --timeout &lt;arg&gt;</span><br><span class=\"line\">                  --pipeline &lt;arg&gt;</span><br><span class=\"line\">  rebalance       host:port</span><br><span class=\"line\">                  --weight &lt;arg&gt;</span><br><span class=\"line\">                  --auto-weights</span><br><span class=\"line\">                  --use-empty-masters</span><br><span class=\"line\">                  --timeout &lt;arg&gt;</span><br><span class=\"line\">                  --simulate</span><br><span class=\"line\">                  --pipeline &lt;arg&gt;</span><br><span class=\"line\">                  --threshold &lt;arg&gt;</span><br><span class=\"line\">  add-node        new_host:new_port existing_host:existing_port</span><br><span class=\"line\">                  --slave</span><br><span class=\"line\">                  --master-id &lt;arg&gt;</span><br><span class=\"line\">  del-node        host:port node_id</span><br><span class=\"line\">  set-timeout     host:port milliseconds</span><br><span class=\"line\">  call            host:port command arg arg .. arg</span><br><span class=\"line\">  import          host:port</span><br><span class=\"line\">                  --from &lt;arg&gt;</span><br><span class=\"line\">                  --copy</span><br><span class=\"line\">                  --replace</span><br><span class=\"line\">  help            (show this help)</span><br><span class=\"line\"></span><br><span class=\"line\">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>各选项详解</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、create：创建集群</span><br><span class=\"line\">2、check：检查集群</span><br><span class=\"line\">3、info：查看集群信息</span><br><span class=\"line\">4、fix：修复集群</span><br><span class=\"line\">5、reshard：在线迁移slot</span><br><span class=\"line\">6、rebalance：平衡集群节点slot数量</span><br><span class=\"line\">7、add-node：将新节点加入集群</span><br><span class=\"line\">8、del-node：从集群中删除节点</span><br><span class=\"line\">9、set-timeout：设置集群节点间心跳连接的超时时间</span><br><span class=\"line\">10、call：在集群全部节点上执行命令</span><br><span class=\"line\">11、import：将外部redis数据导入集群</span><br></pre></td></tr></table></figure>"},{"title":"微服务初探","date":"2018-07-12T01:58:31.000Z","_content":"\n# 初识为服务\n\n## 什么是微服务\n\n使用一套小服务来开发单个应用的方式，每个服务运行在**独立的进程**里。一般采用**轻量级的通讯**机制互联，并且他们可以通过**自动化**的方式部署。\n\n## 微服务特征\n\n**单一职责**(只把紧密相关的业务放在一起，无关的业务独立出来，比如订单和支付作为一个服务，登录注册作为一个服务，和其他服务不紧密的比如邮件服务，短信服务可以作为一个服务)\n\n**轻量级的通信**：微服务之间的访问和通信 (平台无关和语言无关，http就是轻量级的通信协议)\n\n**隔离线**：每个微服务运行在自己的进程中\n\n**有自己的数据**：微服务倾向都有自己的数据存储系统，这样可以降低数据结构的复杂度\n\n**技术多样性**：微服务可以由开发人员选择最适合的技术，只要提供应有的API就可以了\n\n## 微服务诞生背景\n\n1. 互联网行业的快速发展\n2. 敏捷开发，精益方法深入人心(说白了就是频繁的修改测试上线）\n3. 容器技术的成熟\n\n## 微服务的优势\n\n**独立性**:微服务从构建，部署，扩容，缩容，容错，数据库都是单独管理的，所以每个服务之间都是相互独立的\n\n**敏捷性**：对使用者来说，微服务暴露的接口相对简单，因为功能单一，并且有清晰的api,当有新需求时，也可以快速定位到是在哪个微服务中开发\n\n**技术栈灵活**：理论上每个微服务都可以有自己独立的技术栈，不会受到其他微服务的影响\n\n**高效团队**：微服务开发的人员不多，可以几个人开个小会就把需求定下来\n\n## 微服务的不足\n\n**额外的工作**：服务的拆分，要把我们的服务拆解成微服务。tdd领域驱动设计\n\n**数据一致性**：单体架构只有一个数据库，可以使用事务来实现多表的级联的修改和删除很容易达到数据的一致性，微服务都有自己的数据库，拆分微服务的时候要尽量保证对数据库的连表操作，尽量在同一个微服务里面。但是很难保证意外的情况\n\n**沟通成本**：微服务的api的改变带来的沟通成本，因为可能需要改变的地方并不仅仅只是自己的服务，还涉及到其他服务，则这个时候推动项目的前进的沟通成本很高\n\n# 微服务架构引入的问题和解决方案\n\n## 微服务间如何通信？\n\n### 从通讯模式角度考虑\n\n-  一对一还是一对多？\n   同步还是异步？\n\n|      | 一对一                                        | 一对多                 |\n| ---- | --------------------------------------------- | ---------------------- |\n| 同步 | 请求响应模式，最常见                          | ———–（没有这样的场景） |\n| 异步 | 通知(不需要响应)/请求异步响应(不需要立即响应) | 发布订阅/发布异步响应  |\n\n### 从通讯协议角度考虑\n\n REST API \n\n```\nRPC : dubbo ,grpc, thrift, motan\n```\n\n MQ : 消息队列，发布订阅的模式 \n\n### 如何选择RPC框架\n\nI/O,线程调度模型:\n\n 是同步的IO还是非阻塞的异步IO。是长连接还是短连接。 )\n\n 是单线程还是多线程，线程的调度算法是怎么样的\n\n序列化的方式——->通信的效率\n\n 可读的\n\n 二进制\n\n多语言支持：是否都是一个语言开发\n\n服务治理：服务发现和服务的监控\n\n## 服务发现、部署、更新\n\n不管微服务还是传统服务，绝大多数对外提供访问的方式是ip+port的方式.\n\n**传统服务的 “服务发现”**\n\nclient—>dns服务器—>nginx轮训对应的ip和端口—->服务器\n\n这也不算是服务发现，每次新增服务的时候，需要重新配置。\n\n**微服务的服务发现**\n\n1. 客户端的发现\n\n![](微服务初探/客户端服务发现.png)\n\n最下面有一个注册中心，当微服务启动之后，都会把自己所暴露的ip和port告诉给注册中心，然后客户端通过查询注册中心所注册的服务来得知微服务提供者的ip和port列表，然后通过本地的一些负载均衡等策略来实现对微服务的无差别访问，如果出现一些调用失败的情况，客户端也有自己的重试的规则。\n\ndubbo和motan就是这种模式\n\n服务端的发现\n\n![](微服务初探/服务端服务发现.png)\n\n微服务还是同样的将自己的ip和port注册到注册中心，但是客户端不访问注册中心了，他不需通过注册中心指导微服务的列表，而是通过一个固有的ip去访问一个具有服务发现和负载均衡的服务，再由他将请求转发给后端的具体服务，并且将应答返回给客户端，这个服务在中间起到一个类似代理人的作用，他会从注册中心获取到具体的微服务列表，然后维护到自己的内部，然后当客户端请求一个服务的时候，他会知道客户端应该请求的是这个服务对应的哪些实例在运行，然后通过负载均衡算法去选择一个后端。\n\n## 服务编排\n\n服务编排包括，服务发现，服务更新和服务的扩缩融\n\n流行的服务编排工具：\n\nMesos Docker Swarm kubernetes","source":"_posts/微服务初探.md","raw":"---\ntitle: 微服务初探\ndate: 2018-07-12 09:58:31\ntags: 微服务\ncategories: 微服务\n---\n\n# 初识为服务\n\n## 什么是微服务\n\n使用一套小服务来开发单个应用的方式，每个服务运行在**独立的进程**里。一般采用**轻量级的通讯**机制互联，并且他们可以通过**自动化**的方式部署。\n\n## 微服务特征\n\n**单一职责**(只把紧密相关的业务放在一起，无关的业务独立出来，比如订单和支付作为一个服务，登录注册作为一个服务，和其他服务不紧密的比如邮件服务，短信服务可以作为一个服务)\n\n**轻量级的通信**：微服务之间的访问和通信 (平台无关和语言无关，http就是轻量级的通信协议)\n\n**隔离线**：每个微服务运行在自己的进程中\n\n**有自己的数据**：微服务倾向都有自己的数据存储系统，这样可以降低数据结构的复杂度\n\n**技术多样性**：微服务可以由开发人员选择最适合的技术，只要提供应有的API就可以了\n\n## 微服务诞生背景\n\n1. 互联网行业的快速发展\n2. 敏捷开发，精益方法深入人心(说白了就是频繁的修改测试上线）\n3. 容器技术的成熟\n\n## 微服务的优势\n\n**独立性**:微服务从构建，部署，扩容，缩容，容错，数据库都是单独管理的，所以每个服务之间都是相互独立的\n\n**敏捷性**：对使用者来说，微服务暴露的接口相对简单，因为功能单一，并且有清晰的api,当有新需求时，也可以快速定位到是在哪个微服务中开发\n\n**技术栈灵活**：理论上每个微服务都可以有自己独立的技术栈，不会受到其他微服务的影响\n\n**高效团队**：微服务开发的人员不多，可以几个人开个小会就把需求定下来\n\n## 微服务的不足\n\n**额外的工作**：服务的拆分，要把我们的服务拆解成微服务。tdd领域驱动设计\n\n**数据一致性**：单体架构只有一个数据库，可以使用事务来实现多表的级联的修改和删除很容易达到数据的一致性，微服务都有自己的数据库，拆分微服务的时候要尽量保证对数据库的连表操作，尽量在同一个微服务里面。但是很难保证意外的情况\n\n**沟通成本**：微服务的api的改变带来的沟通成本，因为可能需要改变的地方并不仅仅只是自己的服务，还涉及到其他服务，则这个时候推动项目的前进的沟通成本很高\n\n# 微服务架构引入的问题和解决方案\n\n## 微服务间如何通信？\n\n### 从通讯模式角度考虑\n\n-  一对一还是一对多？\n   同步还是异步？\n\n|      | 一对一                                        | 一对多                 |\n| ---- | --------------------------------------------- | ---------------------- |\n| 同步 | 请求响应模式，最常见                          | ———–（没有这样的场景） |\n| 异步 | 通知(不需要响应)/请求异步响应(不需要立即响应) | 发布订阅/发布异步响应  |\n\n### 从通讯协议角度考虑\n\n REST API \n\n```\nRPC : dubbo ,grpc, thrift, motan\n```\n\n MQ : 消息队列，发布订阅的模式 \n\n### 如何选择RPC框架\n\nI/O,线程调度模型:\n\n 是同步的IO还是非阻塞的异步IO。是长连接还是短连接。 )\n\n 是单线程还是多线程，线程的调度算法是怎么样的\n\n序列化的方式——->通信的效率\n\n 可读的\n\n 二进制\n\n多语言支持：是否都是一个语言开发\n\n服务治理：服务发现和服务的监控\n\n## 服务发现、部署、更新\n\n不管微服务还是传统服务，绝大多数对外提供访问的方式是ip+port的方式.\n\n**传统服务的 “服务发现”**\n\nclient—>dns服务器—>nginx轮训对应的ip和端口—->服务器\n\n这也不算是服务发现，每次新增服务的时候，需要重新配置。\n\n**微服务的服务发现**\n\n1. 客户端的发现\n\n![](微服务初探/客户端服务发现.png)\n\n最下面有一个注册中心，当微服务启动之后，都会把自己所暴露的ip和port告诉给注册中心，然后客户端通过查询注册中心所注册的服务来得知微服务提供者的ip和port列表，然后通过本地的一些负载均衡等策略来实现对微服务的无差别访问，如果出现一些调用失败的情况，客户端也有自己的重试的规则。\n\ndubbo和motan就是这种模式\n\n服务端的发现\n\n![](微服务初探/服务端服务发现.png)\n\n微服务还是同样的将自己的ip和port注册到注册中心，但是客户端不访问注册中心了，他不需通过注册中心指导微服务的列表，而是通过一个固有的ip去访问一个具有服务发现和负载均衡的服务，再由他将请求转发给后端的具体服务，并且将应答返回给客户端，这个服务在中间起到一个类似代理人的作用，他会从注册中心获取到具体的微服务列表，然后维护到自己的内部，然后当客户端请求一个服务的时候，他会知道客户端应该请求的是这个服务对应的哪些实例在运行，然后通过负载均衡算法去选择一个后端。\n\n## 服务编排\n\n服务编排包括，服务发现，服务更新和服务的扩缩融\n\n流行的服务编排工具：\n\nMesos Docker Swarm kubernetes","slug":"微服务初探","published":1,"updated":"2018-08-10T08:34:01.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjknr9x3r000ju5n9tcmv8kan","content":"<h1 id=\"初识为服务\"><a href=\"#初识为服务\" class=\"headerlink\" title=\"初识为服务\"></a>初识为服务</h1><h2 id=\"什么是微服务\"><a href=\"#什么是微服务\" class=\"headerlink\" title=\"什么是微服务\"></a>什么是微服务</h2><p>使用一套小服务来开发单个应用的方式，每个服务运行在<strong>独立的进程</strong>里。一般采用<strong>轻量级的通讯</strong>机制互联，并且他们可以通过<strong>自动化</strong>的方式部署。</p>\n<h2 id=\"微服务特征\"><a href=\"#微服务特征\" class=\"headerlink\" title=\"微服务特征\"></a>微服务特征</h2><p><strong>单一职责</strong>(只把紧密相关的业务放在一起，无关的业务独立出来，比如订单和支付作为一个服务，登录注册作为一个服务，和其他服务不紧密的比如邮件服务，短信服务可以作为一个服务)</p>\n<p><strong>轻量级的通信</strong>：微服务之间的访问和通信 (平台无关和语言无关，http就是轻量级的通信协议)</p>\n<p><strong>隔离线</strong>：每个微服务运行在自己的进程中</p>\n<p><strong>有自己的数据</strong>：微服务倾向都有自己的数据存储系统，这样可以降低数据结构的复杂度</p>\n<p><strong>技术多样性</strong>：微服务可以由开发人员选择最适合的技术，只要提供应有的API就可以了</p>\n<h2 id=\"微服务诞生背景\"><a href=\"#微服务诞生背景\" class=\"headerlink\" title=\"微服务诞生背景\"></a>微服务诞生背景</h2><ol>\n<li>互联网行业的快速发展</li>\n<li>敏捷开发，精益方法深入人心(说白了就是频繁的修改测试上线）</li>\n<li>容器技术的成熟</li>\n</ol>\n<h2 id=\"微服务的优势\"><a href=\"#微服务的优势\" class=\"headerlink\" title=\"微服务的优势\"></a>微服务的优势</h2><p><strong>独立性</strong>:微服务从构建，部署，扩容，缩容，容错，数据库都是单独管理的，所以每个服务之间都是相互独立的</p>\n<p><strong>敏捷性</strong>：对使用者来说，微服务暴露的接口相对简单，因为功能单一，并且有清晰的api,当有新需求时，也可以快速定位到是在哪个微服务中开发</p>\n<p><strong>技术栈灵活</strong>：理论上每个微服务都可以有自己独立的技术栈，不会受到其他微服务的影响</p>\n<p><strong>高效团队</strong>：微服务开发的人员不多，可以几个人开个小会就把需求定下来</p>\n<h2 id=\"微服务的不足\"><a href=\"#微服务的不足\" class=\"headerlink\" title=\"微服务的不足\"></a>微服务的不足</h2><p><strong>额外的工作</strong>：服务的拆分，要把我们的服务拆解成微服务。tdd领域驱动设计</p>\n<p><strong>数据一致性</strong>：单体架构只有一个数据库，可以使用事务来实现多表的级联的修改和删除很容易达到数据的一致性，微服务都有自己的数据库，拆分微服务的时候要尽量保证对数据库的连表操作，尽量在同一个微服务里面。但是很难保证意外的情况</p>\n<p><strong>沟通成本</strong>：微服务的api的改变带来的沟通成本，因为可能需要改变的地方并不仅仅只是自己的服务，还涉及到其他服务，则这个时候推动项目的前进的沟通成本很高</p>\n<h1 id=\"微服务架构引入的问题和解决方案\"><a href=\"#微服务架构引入的问题和解决方案\" class=\"headerlink\" title=\"微服务架构引入的问题和解决方案\"></a>微服务架构引入的问题和解决方案</h1><h2 id=\"微服务间如何通信？\"><a href=\"#微服务间如何通信？\" class=\"headerlink\" title=\"微服务间如何通信？\"></a>微服务间如何通信？</h2><h3 id=\"从通讯模式角度考虑\"><a href=\"#从通讯模式角度考虑\" class=\"headerlink\" title=\"从通讯模式角度考虑\"></a>从通讯模式角度考虑</h3><ul>\n<li>一对一还是一对多？<br>同步还是异步？</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>一对一</th>\n<th>一对多</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步</td>\n<td>请求响应模式，最常见</td>\n<td>———–（没有这样的场景）</td>\n</tr>\n<tr>\n<td>异步</td>\n<td>通知(不需要响应)/请求异步响应(不需要立即响应)</td>\n<td>发布订阅/发布异步响应</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"从通讯协议角度考虑\"><a href=\"#从通讯协议角度考虑\" class=\"headerlink\" title=\"从通讯协议角度考虑\"></a>从通讯协议角度考虑</h3><p> REST API </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPC : dubbo ,grpc, thrift, motan</span><br></pre></td></tr></table></figure>\n<p> MQ : 消息队列，发布订阅的模式 </p>\n<h3 id=\"如何选择RPC框架\"><a href=\"#如何选择RPC框架\" class=\"headerlink\" title=\"如何选择RPC框架\"></a>如何选择RPC框架</h3><p>I/O,线程调度模型:</p>\n<p> 是同步的IO还是非阻塞的异步IO。是长连接还是短连接。 )</p>\n<p> 是单线程还是多线程，线程的调度算法是怎么样的</p>\n<p>序列化的方式——-&gt;通信的效率</p>\n<p> 可读的</p>\n<p> 二进制</p>\n<p>多语言支持：是否都是一个语言开发</p>\n<p>服务治理：服务发现和服务的监控</p>\n<h2 id=\"服务发现、部署、更新\"><a href=\"#服务发现、部署、更新\" class=\"headerlink\" title=\"服务发现、部署、更新\"></a>服务发现、部署、更新</h2><p>不管微服务还是传统服务，绝大多数对外提供访问的方式是ip+port的方式.</p>\n<p><strong>传统服务的 “服务发现”</strong></p>\n<p>client—&gt;dns服务器—&gt;nginx轮训对应的ip和端口—-&gt;服务器</p>\n<p>这也不算是服务发现，每次新增服务的时候，需要重新配置。</p>\n<p><strong>微服务的服务发现</strong></p>\n<ol>\n<li>客户端的发现</li>\n</ol>\n<p><img src=\"/2018/07/12/微服务初探/客户端服务发现.png\" alt=\"\"></p>\n<p>最下面有一个注册中心，当微服务启动之后，都会把自己所暴露的ip和port告诉给注册中心，然后客户端通过查询注册中心所注册的服务来得知微服务提供者的ip和port列表，然后通过本地的一些负载均衡等策略来实现对微服务的无差别访问，如果出现一些调用失败的情况，客户端也有自己的重试的规则。</p>\n<p>dubbo和motan就是这种模式</p>\n<p>服务端的发现</p>\n<p><img src=\"/2018/07/12/微服务初探/服务端服务发现.png\" alt=\"\"></p>\n<p>微服务还是同样的将自己的ip和port注册到注册中心，但是客户端不访问注册中心了，他不需通过注册中心指导微服务的列表，而是通过一个固有的ip去访问一个具有服务发现和负载均衡的服务，再由他将请求转发给后端的具体服务，并且将应答返回给客户端，这个服务在中间起到一个类似代理人的作用，他会从注册中心获取到具体的微服务列表，然后维护到自己的内部，然后当客户端请求一个服务的时候，他会知道客户端应该请求的是这个服务对应的哪些实例在运行，然后通过负载均衡算法去选择一个后端。</p>\n<h2 id=\"服务编排\"><a href=\"#服务编排\" class=\"headerlink\" title=\"服务编排\"></a>服务编排</h2><p>服务编排包括，服务发现，服务更新和服务的扩缩融</p>\n<p>流行的服务编排工具：</p>\n<p>Mesos Docker Swarm kubernetes</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初识为服务\"><a href=\"#初识为服务\" class=\"headerlink\" title=\"初识为服务\"></a>初识为服务</h1><h2 id=\"什么是微服务\"><a href=\"#什么是微服务\" class=\"headerlink\" title=\"什么是微服务\"></a>什么是微服务</h2><p>使用一套小服务来开发单个应用的方式，每个服务运行在<strong>独立的进程</strong>里。一般采用<strong>轻量级的通讯</strong>机制互联，并且他们可以通过<strong>自动化</strong>的方式部署。</p>\n<h2 id=\"微服务特征\"><a href=\"#微服务特征\" class=\"headerlink\" title=\"微服务特征\"></a>微服务特征</h2><p><strong>单一职责</strong>(只把紧密相关的业务放在一起，无关的业务独立出来，比如订单和支付作为一个服务，登录注册作为一个服务，和其他服务不紧密的比如邮件服务，短信服务可以作为一个服务)</p>\n<p><strong>轻量级的通信</strong>：微服务之间的访问和通信 (平台无关和语言无关，http就是轻量级的通信协议)</p>\n<p><strong>隔离线</strong>：每个微服务运行在自己的进程中</p>\n<p><strong>有自己的数据</strong>：微服务倾向都有自己的数据存储系统，这样可以降低数据结构的复杂度</p>\n<p><strong>技术多样性</strong>：微服务可以由开发人员选择最适合的技术，只要提供应有的API就可以了</p>\n<h2 id=\"微服务诞生背景\"><a href=\"#微服务诞生背景\" class=\"headerlink\" title=\"微服务诞生背景\"></a>微服务诞生背景</h2><ol>\n<li>互联网行业的快速发展</li>\n<li>敏捷开发，精益方法深入人心(说白了就是频繁的修改测试上线）</li>\n<li>容器技术的成熟</li>\n</ol>\n<h2 id=\"微服务的优势\"><a href=\"#微服务的优势\" class=\"headerlink\" title=\"微服务的优势\"></a>微服务的优势</h2><p><strong>独立性</strong>:微服务从构建，部署，扩容，缩容，容错，数据库都是单独管理的，所以每个服务之间都是相互独立的</p>\n<p><strong>敏捷性</strong>：对使用者来说，微服务暴露的接口相对简单，因为功能单一，并且有清晰的api,当有新需求时，也可以快速定位到是在哪个微服务中开发</p>\n<p><strong>技术栈灵活</strong>：理论上每个微服务都可以有自己独立的技术栈，不会受到其他微服务的影响</p>\n<p><strong>高效团队</strong>：微服务开发的人员不多，可以几个人开个小会就把需求定下来</p>\n<h2 id=\"微服务的不足\"><a href=\"#微服务的不足\" class=\"headerlink\" title=\"微服务的不足\"></a>微服务的不足</h2><p><strong>额外的工作</strong>：服务的拆分，要把我们的服务拆解成微服务。tdd领域驱动设计</p>\n<p><strong>数据一致性</strong>：单体架构只有一个数据库，可以使用事务来实现多表的级联的修改和删除很容易达到数据的一致性，微服务都有自己的数据库，拆分微服务的时候要尽量保证对数据库的连表操作，尽量在同一个微服务里面。但是很难保证意外的情况</p>\n<p><strong>沟通成本</strong>：微服务的api的改变带来的沟通成本，因为可能需要改变的地方并不仅仅只是自己的服务，还涉及到其他服务，则这个时候推动项目的前进的沟通成本很高</p>\n<h1 id=\"微服务架构引入的问题和解决方案\"><a href=\"#微服务架构引入的问题和解决方案\" class=\"headerlink\" title=\"微服务架构引入的问题和解决方案\"></a>微服务架构引入的问题和解决方案</h1><h2 id=\"微服务间如何通信？\"><a href=\"#微服务间如何通信？\" class=\"headerlink\" title=\"微服务间如何通信？\"></a>微服务间如何通信？</h2><h3 id=\"从通讯模式角度考虑\"><a href=\"#从通讯模式角度考虑\" class=\"headerlink\" title=\"从通讯模式角度考虑\"></a>从通讯模式角度考虑</h3><ul>\n<li>一对一还是一对多？<br>同步还是异步？</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>一对一</th>\n<th>一对多</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步</td>\n<td>请求响应模式，最常见</td>\n<td>———–（没有这样的场景）</td>\n</tr>\n<tr>\n<td>异步</td>\n<td>通知(不需要响应)/请求异步响应(不需要立即响应)</td>\n<td>发布订阅/发布异步响应</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"从通讯协议角度考虑\"><a href=\"#从通讯协议角度考虑\" class=\"headerlink\" title=\"从通讯协议角度考虑\"></a>从通讯协议角度考虑</h3><p> REST API </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPC : dubbo ,grpc, thrift, motan</span><br></pre></td></tr></table></figure>\n<p> MQ : 消息队列，发布订阅的模式 </p>\n<h3 id=\"如何选择RPC框架\"><a href=\"#如何选择RPC框架\" class=\"headerlink\" title=\"如何选择RPC框架\"></a>如何选择RPC框架</h3><p>I/O,线程调度模型:</p>\n<p> 是同步的IO还是非阻塞的异步IO。是长连接还是短连接。 )</p>\n<p> 是单线程还是多线程，线程的调度算法是怎么样的</p>\n<p>序列化的方式——-&gt;通信的效率</p>\n<p> 可读的</p>\n<p> 二进制</p>\n<p>多语言支持：是否都是一个语言开发</p>\n<p>服务治理：服务发现和服务的监控</p>\n<h2 id=\"服务发现、部署、更新\"><a href=\"#服务发现、部署、更新\" class=\"headerlink\" title=\"服务发现、部署、更新\"></a>服务发现、部署、更新</h2><p>不管微服务还是传统服务，绝大多数对外提供访问的方式是ip+port的方式.</p>\n<p><strong>传统服务的 “服务发现”</strong></p>\n<p>client—&gt;dns服务器—&gt;nginx轮训对应的ip和端口—-&gt;服务器</p>\n<p>这也不算是服务发现，每次新增服务的时候，需要重新配置。</p>\n<p><strong>微服务的服务发现</strong></p>\n<ol>\n<li>客户端的发现</li>\n</ol>\n<p><img src=\"/2018/07/12/微服务初探/客户端服务发现.png\" alt=\"\"></p>\n<p>最下面有一个注册中心，当微服务启动之后，都会把自己所暴露的ip和port告诉给注册中心，然后客户端通过查询注册中心所注册的服务来得知微服务提供者的ip和port列表，然后通过本地的一些负载均衡等策略来实现对微服务的无差别访问，如果出现一些调用失败的情况，客户端也有自己的重试的规则。</p>\n<p>dubbo和motan就是这种模式</p>\n<p>服务端的发现</p>\n<p><img src=\"/2018/07/12/微服务初探/服务端服务发现.png\" alt=\"\"></p>\n<p>微服务还是同样的将自己的ip和port注册到注册中心，但是客户端不访问注册中心了，他不需通过注册中心指导微服务的列表，而是通过一个固有的ip去访问一个具有服务发现和负载均衡的服务，再由他将请求转发给后端的具体服务，并且将应答返回给客户端，这个服务在中间起到一个类似代理人的作用，他会从注册中心获取到具体的微服务列表，然后维护到自己的内部，然后当客户端请求一个服务的时候，他会知道客户端应该请求的是这个服务对应的哪些实例在运行，然后通过负载均衡算法去选择一个后端。</p>\n<h2 id=\"服务编排\"><a href=\"#服务编排\" class=\"headerlink\" title=\"服务编排\"></a>服务编排</h2><p>服务编排包括，服务发现，服务更新和服务的扩缩融</p>\n<p>流行的服务编排工具：</p>\n<p>Mesos Docker Swarm kubernetes</p>\n"},{"title":"Go性能分析工具","date":"2017-08-23T09:33:44.000Z","_content":"\n# 为什么需要性能分析\n\n作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。\n\n很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方\n\n# pprof\n\n## 什么是pprof\n\npprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 [runtime/pprof](https://golang.org/pkg/runtime/pprof/)，[net/http/pprof](https://golang.org/pkg/net/http/pprof/) ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。\n\n## pprof文件生成\n\n### runtime/pprof\n\n此包是方便不是提供web服务的后端程序来进行分析性能\n\n```go\nfunc main() {\n\tf, err := os.Create(fmt.Sprintf(\"cpu-%s.pprof\", time.Now().Format(\"20060102\")))\n\tif err != nil {\n\t\tlog.Fatal(\"create CPU profile error: \", err)\n\t}\n\tif err := pprof.StartCPUProfile(f); err != nil {\n\t\tlog.Fatal(\"start CPU profile error: \", err)\n\t}\n\tdefer pprof.StopCPUProfile()\n\n\tgo func() {\n\t\tdoSth()\n\t}()\n\t//优雅退出\n\tsigChan := make(chan os.Signal)\n\texitChan := make(chan struct{})\n\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)\n\tlog.Printf(\"signal received\", <-sigChan)\n\n\tgo func() {\n\t\tif err := server.Stop(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\texitChan <- struct{}{}\n\t}()\n\tselect {\n\tcase <-exitChan:\n\tcase s := <-sigChan:\n\t\tlog.Panicln(\"signal received, stopping immediately\", s)\n\t}\n}\n\nfunc doSth() {\n\tfor {\n\t\trand.Float32()\n\t\ttime.Sleep(500 * time.Millisecond)\n\t}\n}\n```\n\n此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof\n\n然后通过命令执行\n\n```go\n~ go tool pprof .\\cpu-20170823.pprof\nType: cpu\nTime: Jul 19, 2018 at 5:31pm (CST)\nDuration: 58.32s, Total samples = 0\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof)\n```\n\n然后就可以在pprof下使用命令了\n\n可以通过go tool pprof命令查看pprof支持哪些命令。\n\n[runtime/pprof](https://golang.org/pkg/runtime/pprof/)的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件\n\n### net/http/pprof\n\n对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能\n\n要使用`net/http/pprof`包很简单，在main.go文件导入包的时候，通过`_ \"net/http/pprof\"`方式导入，其实看pprof.go的文件就能知道，实现的原理。\n\n```go\nfunc init() {\n\thttp.HandleFunc(\"/debug/pprof/\", Index)\n\thttp.HandleFunc(\"/debug/pprof/cmdline\", Cmdline)\n\thttp.HandleFunc(\"/debug/pprof/profile\", Profile)\n\thttp.HandleFunc(\"/debug/pprof/symbol\", Symbol)\n\thttp.HandleFunc(\"/debug/pprof/trace\", Trace)\n}\n```\n\n#### 通过浏览器分析\n\npprof.go中最开始先申明一个init函数，这里申明了五个`HandleFunc`对应的可以在浏览器中可以打开着五个页面\n\n`/debug/pprof/`页面是首页，可以查看go程序的堆栈、goroutine、线程等信息\n\n![](Go性能分析工具/debug_pprof.png)\n\n一般如果要获取cpu的信息，生成pprof文件，则直接访问`/debug/pprof/profile`，\n\n通过代码:\n\n```go\nfunc Profile(w http.ResponseWriter, r *http.Request) {\nsec, _ := strconv.ParseInt(r.FormValue(\"seconds\"), 10, 64)\n\tif sec == 0 {\n\t\tsec = 30\n\t}\n········\n\tif err := pprof.StartCPUProfile(w); err != nil {\n\t\t// StartCPUProfile failed, so no writes yet.\n\t\t// Can change header back to text content\n\t\t// and send error code.\n\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\t\tw.Header().Set(\"X-Go-Pprof\", \"1\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, \"Could not enable CPU profiling: %s\\n\", err)\n\t\treturn\n\t}\n\tsleep(w, time.Duration(sec)*time.Second)\n\tpprof.StopCPUProfile()\n}\n```\n\n可以看出`Profile`函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.\n\n所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值\n\n比如我要手机1分钟的数据，则只需要`localhost:8080/debug/pprof/profile?seconds=60`.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为`cpu.pprof`，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。\n\n同理内存分析可以通过访问`localhost:8080/debug/pprof/heap`\n\n#### 通过命令行来分析\n\n可以通过命令收集cpu\n\n`go tool pprof http://localhost:8080/debug/pprof/profile`\n\n同样可以进行数据收集，当然，可以后面设置参数(`--seconds 25`表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下\n\n![](Go性能分析工具/client_pprof.png)\n\n也可以通过命令收集内存`go tool pprof http://localhost:8080/debug/pprof/heap`\n\n## pprof文件分析\n\n接下来就是重点，如何分析我们pprof文件：\n\n在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数\n\n![](Go性能分析工具/analyze.png)\n\n这里分析下各个参数的意思\n\n### flat和cum:\n\nFlat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),\n\n函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s\n\nflat表示的是a()函数自己耗费的时间\n\n如果a()函数是这样的\n\n```go\nb() // takes 2s\ndo something directly // takes 3s\nc() // takes 2s\n```\n\n那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）\n\n### sum:\n\n要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。\n\n具体可以参考：\n\n[What is the meaning of “flat” and “cum” in golang pprof output](https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/)\n\n### 图形分析\n\n只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。\n\n安装好之后可以直接使用命令来生成图片\n\n```go\n[root@iZbp14ouog5ocoeakj39q1Z guess]# go tool pprof  cpu.pprof\nEntering interactive mode (type \"help\" for commands)\n(pprof) svg\nGenerating report in profile001.svg\n(pprof)\n```\n\n这样就生成了svg图片`profile001.svg`\n\n![](Go性能分析工具/sum&cum&flat.png)\n\n\n由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是`runtime.memmove` `runtime.memeqbody` `runtimecgocall` `runtime.stdcall`.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化\n\n## 火焰图\n\n上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz\n\ngo-torch是`Uber`公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。\n\ngo-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。\n\n### 安装\n\n1.首先，我们要配置`FlameGraph`的脚本\n\n> FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node\n\n```shell\ngit clone https://github.com/brendangregg/FlameGraph.git\n```\n\n2.检出完成后，把`flamegraph.pl`拷到我们机器环境变量$PATH的路径中去，例如：\n\n```shell\ncp flamegraph.pl /usr/local/bin\n```\n\n3.在终端输入 `flamegraph.pl -h` 是否安装FlameGraph成功\n\n```\n$ flamegraph.pl -h\nOption h is ambiguous (hash, height, help)\nUSAGE: /usr/local/bin/flamegraph.pl [options] infile > outfile.svg\n\n    --title       # change title text\n    --width       # width of image (default 1200)\n    --height      # height of each frame (default 16)\n    --minwidth    # omit smaller functions (default 0.1 pixels)\n    --fonttype    # font type (default \"Verdana\")\n    --fontsize    # font size (default 12)\n    --countname   # count type label (default \"samples\")\n    --nametype    # name type label (default \"Function:\")\n    --colors      # set color palette. choices are: hot (default), mem, io,\n                  # wakeup, chain, java, js, perl, red, green, blue, aqua,\n                  # yellow, purple, orange\n    --hash        # colors are keyed by function name hash\n    --cp          # use consistent palette (palette.map)\n    --reverse     # generate stack-reversed flame graph\n    --inverted    # icicle graph\n    --negate      # switch differential hues (blue<->red)\n    --help        # this message\n\n    eg,\n    /usr/local/bin/flamegraph.pl --title=\"Flame Graph: malloc()\" trace.txt > graph.svg\n```\n\n4.安装go-torch\n\n有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装\n\n```shell\ngo get -v github.com/uber/go-torch\n```\n\n5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图\n\n```\n$ go-torch -b cpu.pprof -f cpu.svg\nINFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof\nINFO[12:38:16] Writing svg to cpu.svg\n```\n\n- **-b：**表示需要被转换成svg的二进制文件\n- **-f：**表示要生成的svg图片名称\n\n此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看\n\n![](Go性能分析工具/fire1.png)\n\n这就是go-torch生成的火焰图，看起来是不是舒服多了。\n\n> - 火焰图的y轴表示cpu调用方法的先后，比如：`bufio.(*Writer).Flush`是由`net/http.(*chunkWriter).write`和`net/http.CheckConnErrorWriter.Writer`两个函数组成的。\n> - x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多\n\n有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。\n\n# 参考：\n\n[Go代码调优利器-火焰图](http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html)\n\n[Golang性能调优(go-torch, go tool pprof)](https://blog.csdn.net/WaltonWang/article/details/54019891)\n","source":"_posts/Go性能分析工具.md","raw":"---\ntitle: Go性能分析工具\ndate: 2017-08-23 17:33:44\ntags: golang\ncategories: Golang\n---\n\n# 为什么需要性能分析\n\n作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。\n\n很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方\n\n# pprof\n\n## 什么是pprof\n\npprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 [runtime/pprof](https://golang.org/pkg/runtime/pprof/)，[net/http/pprof](https://golang.org/pkg/net/http/pprof/) ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。\n\n## pprof文件生成\n\n### runtime/pprof\n\n此包是方便不是提供web服务的后端程序来进行分析性能\n\n```go\nfunc main() {\n\tf, err := os.Create(fmt.Sprintf(\"cpu-%s.pprof\", time.Now().Format(\"20060102\")))\n\tif err != nil {\n\t\tlog.Fatal(\"create CPU profile error: \", err)\n\t}\n\tif err := pprof.StartCPUProfile(f); err != nil {\n\t\tlog.Fatal(\"start CPU profile error: \", err)\n\t}\n\tdefer pprof.StopCPUProfile()\n\n\tgo func() {\n\t\tdoSth()\n\t}()\n\t//优雅退出\n\tsigChan := make(chan os.Signal)\n\texitChan := make(chan struct{})\n\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)\n\tlog.Printf(\"signal received\", <-sigChan)\n\n\tgo func() {\n\t\tif err := server.Stop(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\texitChan <- struct{}{}\n\t}()\n\tselect {\n\tcase <-exitChan:\n\tcase s := <-sigChan:\n\t\tlog.Panicln(\"signal received, stopping immediately\", s)\n\t}\n}\n\nfunc doSth() {\n\tfor {\n\t\trand.Float32()\n\t\ttime.Sleep(500 * time.Millisecond)\n\t}\n}\n```\n\n此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof\n\n然后通过命令执行\n\n```go\n~ go tool pprof .\\cpu-20170823.pprof\nType: cpu\nTime: Jul 19, 2018 at 5:31pm (CST)\nDuration: 58.32s, Total samples = 0\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof)\n```\n\n然后就可以在pprof下使用命令了\n\n可以通过go tool pprof命令查看pprof支持哪些命令。\n\n[runtime/pprof](https://golang.org/pkg/runtime/pprof/)的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件\n\n### net/http/pprof\n\n对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能\n\n要使用`net/http/pprof`包很简单，在main.go文件导入包的时候，通过`_ \"net/http/pprof\"`方式导入，其实看pprof.go的文件就能知道，实现的原理。\n\n```go\nfunc init() {\n\thttp.HandleFunc(\"/debug/pprof/\", Index)\n\thttp.HandleFunc(\"/debug/pprof/cmdline\", Cmdline)\n\thttp.HandleFunc(\"/debug/pprof/profile\", Profile)\n\thttp.HandleFunc(\"/debug/pprof/symbol\", Symbol)\n\thttp.HandleFunc(\"/debug/pprof/trace\", Trace)\n}\n```\n\n#### 通过浏览器分析\n\npprof.go中最开始先申明一个init函数，这里申明了五个`HandleFunc`对应的可以在浏览器中可以打开着五个页面\n\n`/debug/pprof/`页面是首页，可以查看go程序的堆栈、goroutine、线程等信息\n\n![](Go性能分析工具/debug_pprof.png)\n\n一般如果要获取cpu的信息，生成pprof文件，则直接访问`/debug/pprof/profile`，\n\n通过代码:\n\n```go\nfunc Profile(w http.ResponseWriter, r *http.Request) {\nsec, _ := strconv.ParseInt(r.FormValue(\"seconds\"), 10, 64)\n\tif sec == 0 {\n\t\tsec = 30\n\t}\n········\n\tif err := pprof.StartCPUProfile(w); err != nil {\n\t\t// StartCPUProfile failed, so no writes yet.\n\t\t// Can change header back to text content\n\t\t// and send error code.\n\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\t\tw.Header().Set(\"X-Go-Pprof\", \"1\")\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, \"Could not enable CPU profiling: %s\\n\", err)\n\t\treturn\n\t}\n\tsleep(w, time.Duration(sec)*time.Second)\n\tpprof.StopCPUProfile()\n}\n```\n\n可以看出`Profile`函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.\n\n所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值\n\n比如我要手机1分钟的数据，则只需要`localhost:8080/debug/pprof/profile?seconds=60`.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为`cpu.pprof`，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。\n\n同理内存分析可以通过访问`localhost:8080/debug/pprof/heap`\n\n#### 通过命令行来分析\n\n可以通过命令收集cpu\n\n`go tool pprof http://localhost:8080/debug/pprof/profile`\n\n同样可以进行数据收集，当然，可以后面设置参数(`--seconds 25`表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下\n\n![](Go性能分析工具/client_pprof.png)\n\n也可以通过命令收集内存`go tool pprof http://localhost:8080/debug/pprof/heap`\n\n## pprof文件分析\n\n接下来就是重点，如何分析我们pprof文件：\n\n在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数\n\n![](Go性能分析工具/analyze.png)\n\n这里分析下各个参数的意思\n\n### flat和cum:\n\nFlat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),\n\n函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s\n\nflat表示的是a()函数自己耗费的时间\n\n如果a()函数是这样的\n\n```go\nb() // takes 2s\ndo something directly // takes 3s\nc() // takes 2s\n```\n\n那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）\n\n### sum:\n\n要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。\n\n具体可以参考：\n\n[What is the meaning of “flat” and “cum” in golang pprof output](https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/)\n\n### 图形分析\n\n只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。\n\n安装好之后可以直接使用命令来生成图片\n\n```go\n[root@iZbp14ouog5ocoeakj39q1Z guess]# go tool pprof  cpu.pprof\nEntering interactive mode (type \"help\" for commands)\n(pprof) svg\nGenerating report in profile001.svg\n(pprof)\n```\n\n这样就生成了svg图片`profile001.svg`\n\n![](Go性能分析工具/sum&cum&flat.png)\n\n\n由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是`runtime.memmove` `runtime.memeqbody` `runtimecgocall` `runtime.stdcall`.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化\n\n## 火焰图\n\n上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz\n\ngo-torch是`Uber`公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。\n\ngo-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。\n\n### 安装\n\n1.首先，我们要配置`FlameGraph`的脚本\n\n> FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node\n\n```shell\ngit clone https://github.com/brendangregg/FlameGraph.git\n```\n\n2.检出完成后，把`flamegraph.pl`拷到我们机器环境变量$PATH的路径中去，例如：\n\n```shell\ncp flamegraph.pl /usr/local/bin\n```\n\n3.在终端输入 `flamegraph.pl -h` 是否安装FlameGraph成功\n\n```\n$ flamegraph.pl -h\nOption h is ambiguous (hash, height, help)\nUSAGE: /usr/local/bin/flamegraph.pl [options] infile > outfile.svg\n\n    --title       # change title text\n    --width       # width of image (default 1200)\n    --height      # height of each frame (default 16)\n    --minwidth    # omit smaller functions (default 0.1 pixels)\n    --fonttype    # font type (default \"Verdana\")\n    --fontsize    # font size (default 12)\n    --countname   # count type label (default \"samples\")\n    --nametype    # name type label (default \"Function:\")\n    --colors      # set color palette. choices are: hot (default), mem, io,\n                  # wakeup, chain, java, js, perl, red, green, blue, aqua,\n                  # yellow, purple, orange\n    --hash        # colors are keyed by function name hash\n    --cp          # use consistent palette (palette.map)\n    --reverse     # generate stack-reversed flame graph\n    --inverted    # icicle graph\n    --negate      # switch differential hues (blue<->red)\n    --help        # this message\n\n    eg,\n    /usr/local/bin/flamegraph.pl --title=\"Flame Graph: malloc()\" trace.txt > graph.svg\n```\n\n4.安装go-torch\n\n有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装\n\n```shell\ngo get -v github.com/uber/go-torch\n```\n\n5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图\n\n```\n$ go-torch -b cpu.pprof -f cpu.svg\nINFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof\nINFO[12:38:16] Writing svg to cpu.svg\n```\n\n- **-b：**表示需要被转换成svg的二进制文件\n- **-f：**表示要生成的svg图片名称\n\n此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看\n\n![](Go性能分析工具/fire1.png)\n\n这就是go-torch生成的火焰图，看起来是不是舒服多了。\n\n> - 火焰图的y轴表示cpu调用方法的先后，比如：`bufio.(*Writer).Flush`是由`net/http.(*chunkWriter).write`和`net/http.CheckConnErrorWriter.Writer`两个函数组成的。\n> - x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多\n\n有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。\n\n# 参考：\n\n[Go代码调优利器-火焰图](http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html)\n\n[Golang性能调优(go-torch, go tool pprof)](https://blog.csdn.net/WaltonWang/article/details/54019891)\n","slug":"Go性能分析工具","published":1,"updated":"2018-08-10T08:56:20.542Z","_id":"cjknrbqdz0000ufn9d7vmo1jd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为什么需要性能分析\"><a href=\"#为什么需要性能分析\" class=\"headerlink\" title=\"为什么需要性能分析\"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p>\n<p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p>\n<h1 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h1><h2 id=\"什么是pprof\"><a href=\"#什么是pprof\" class=\"headerlink\" title=\"什么是pprof\"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"noopener\">runtime/pprof</a>，<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"noopener\">net/http/pprof</a> ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。</p>\n<h2 id=\"pprof文件生成\"><a href=\"#pprof文件生成\" class=\"headerlink\" title=\"pprof文件生成\"></a>pprof文件生成</h2><h3 id=\"runtime-pprof\"><a href=\"#runtime-pprof\" class=\"headerlink\" title=\"runtime/pprof\"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf, err := os.Create(fmt.Sprintf(<span class=\"string\">\"cpu-%s.pprof\"</span>, time.Now().Format(<span class=\"string\">\"20060102\"</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"create CPU profile error: \"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(f); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"start CPU profile error: \"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> pprof.StopCPUProfile()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tdoSth()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">//优雅退出</span></span><br><span class=\"line\">\tsigChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</span><br><span class=\"line\">\texitChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"signal received\"</span>, &lt;-sigChan)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := server.Stop(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texitChan &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-exitChan:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> s := &lt;-sigChan:</span><br><span class=\"line\">\t\tlog.Panicln(<span class=\"string\">\"signal received, stopping immediately\"</span>, s)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\trand.Float32()</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">500</span> * time.Millisecond)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p>\n<p>然后通过命令执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ <span class=\"keyword\">go</span> tool pprof .\\cpu<span class=\"number\">-20170823.</span>pprof</span><br><span class=\"line\">Type: cpu</span><br><span class=\"line\">Time: Jul <span class=\"number\">19</span>, <span class=\"number\">2018</span> at <span class=\"number\">5</span>:<span class=\"number\">31</span>pm (CST)</span><br><span class=\"line\">Duration: <span class=\"number\">58.32s</span>, Total samples = <span class=\"number\">0</span></span><br><span class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</span><br><span class=\"line\">(pprof)</span><br></pre></td></tr></table></figure>\n<p>然后就可以在pprof下使用命令了</p>\n<p>可以通过go tool pprof命令查看pprof支持哪些命令。</p>\n<p><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"noopener\">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p>\n<h3 id=\"net-http-pprof\"><a href=\"#net-http-pprof\" class=\"headerlink\" title=\"net/http/pprof\"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p>\n<p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, Index)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, Cmdline)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, Profile)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, Symbol)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, Trace)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过浏览器分析\"><a href=\"#通过浏览器分析\" class=\"headerlink\" title=\"通过浏览器分析\"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p>\n<p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/debug_pprof.png\" alt=\"\"></p>\n<p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p>\n<p>通过代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Profile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">sec, _ := strconv.ParseInt(r.FormValue(<span class=\"string\">\"seconds\"</span>), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sec == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tsec = <span class=\"number\">30</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">········</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(w); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// StartCPUProfile failed, so no writes yet.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Can change header back to text content</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and send error code.</span></span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain; charset=utf-8\"</span>)</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"X-Go-Pprof\"</span>, <span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\t\tw.WriteHeader(http.StatusInternalServerError)</span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">\"Could not enable CPU profiling: %s\\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsleep(w, time.Duration(sec)*time.Second)</span><br><span class=\"line\">\tpprof.StopCPUProfile()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p>\n<p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p>\n<p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p>\n<p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p>\n<h4 id=\"通过命令行来分析\"><a href=\"#通过命令行来分析\" class=\"headerlink\" title=\"通过命令行来分析\"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p>\n<p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p>\n<p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/client_pprof.png\" alt=\"\"></p>\n<p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p>\n<h2 id=\"pprof文件分析\"><a href=\"#pprof文件分析\" class=\"headerlink\" title=\"pprof文件分析\"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p>\n<p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/analyze.png\" alt=\"\"></p>\n<p>这里分析下各个参数的意思</p>\n<h3 id=\"flat和cum\"><a href=\"#flat和cum\" class=\"headerlink\" title=\"flat和cum:\"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p>\n<p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p>\n<p>flat表示的是a()函数自己耗费的时间</p>\n<p>如果a()函数是这样的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b() <span class=\"comment\">// takes 2s</span></span><br><span class=\"line\">do something directly <span class=\"comment\">// takes 3s</span></span><br><span class=\"line\">c() <span class=\"comment\">// takes 2s</span></span><br></pre></td></tr></table></figure>\n<p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum:\"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p>\n<p>具体可以参考：</p>\n<p><a href=\"https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/\" target=\"_blank\" rel=\"noopener\">What is the meaning of “flat” and “cum” in golang pprof output</a></p>\n<h3 id=\"图形分析\"><a href=\"#图形分析\" class=\"headerlink\" title=\"图形分析\"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p>\n<p>安装好之后可以直接使用命令来生成图片</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z guess]# <span class=\"keyword\">go</span> tool pprof  cpu.pprof</span><br><span class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands)</span><br><span class=\"line\">(pprof) svg</span><br><span class=\"line\">Generating report in profile001.svg</span><br><span class=\"line\">(pprof)</span><br></pre></td></tr></table></figure>\n<p>这样就生成了svg图片<code>profile001.svg</code></p>\n<p><img src=\"/2017/08/23/Go性能分析工具/sum&amp;cum&amp;flat.png\" alt=\"\"></p>\n<p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p>\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz</p>\n<p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p>\n<p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p>\n<blockquote>\n<p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/brendangregg/FlameGraph.git</span><br></pre></td></tr></table></figure>\n<p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp flamegraph.pl /usr/local/bin</span><br></pre></td></tr></table></figure>\n<p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flamegraph.pl -h</span><br><span class=\"line\">Option h is ambiguous (hash, height, help)</span><br><span class=\"line\">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</span><br><span class=\"line\"></span><br><span class=\"line\">    --title       # change title text</span><br><span class=\"line\">    --width       # width of image (default 1200)</span><br><span class=\"line\">    --height      # height of each frame (default 16)</span><br><span class=\"line\">    --minwidth    # omit smaller functions (default 0.1 pixels)</span><br><span class=\"line\">    --fonttype    # font type (default &quot;Verdana&quot;)</span><br><span class=\"line\">    --fontsize    # font size (default 12)</span><br><span class=\"line\">    --countname   # count type label (default &quot;samples&quot;)</span><br><span class=\"line\">    --nametype    # name type label (default &quot;Function:&quot;)</span><br><span class=\"line\">    --colors      # set color palette. choices are: hot (default), mem, io,</span><br><span class=\"line\">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</span><br><span class=\"line\">                  # yellow, purple, orange</span><br><span class=\"line\">    --hash        # colors are keyed by function name hash</span><br><span class=\"line\">    --cp          # use consistent palette (palette.map)</span><br><span class=\"line\">    --reverse     # generate stack-reversed flame graph</span><br><span class=\"line\">    --inverted    # icicle graph</span><br><span class=\"line\">    --negate      # switch differential hues (blue&lt;-&gt;red)</span><br><span class=\"line\">    --help        # this message</span><br><span class=\"line\"></span><br><span class=\"line\">    eg,</span><br><span class=\"line\">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</span><br></pre></td></tr></table></figure>\n<p>4.安装go-torch</p>\n<p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -v github.com/uber/go-torch</span><br></pre></td></tr></table></figure>\n<p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go-torch -b cpu.pprof -f cpu.svg</span><br><span class=\"line\">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</span><br><span class=\"line\">INFO[12:38:16] Writing svg to cpu.svg</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li>\n<li><strong>-f：</strong>表示要生成的svg图片名称</li>\n</ul>\n<p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/fire1.png\" alt=\"\"></p>\n<p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p>\n<blockquote>\n<ul>\n<li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li>\n<li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li>\n</ul>\n</blockquote>\n<p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html\" target=\"_blank\" rel=\"noopener\">Go代码调优利器-火焰图</a></p>\n<p><a href=\"https://blog.csdn.net/WaltonWang/article/details/54019891\" target=\"_blank\" rel=\"noopener\">Golang性能调优(go-torch, go tool pprof)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么需要性能分析\"><a href=\"#为什么需要性能分析\" class=\"headerlink\" title=\"为什么需要性能分析\"></a>为什么需要性能分析</h1><p>作为开发，一般在开发过程大多是为了功能的实现和单元测试，当业务量不大的时候，也不会说去过早的分析代码的性能。但是一旦业务量上来，原有开发中代码写的不太好的地方会造成性能瓶颈，这个时候就得需要性能分析工具帮助分析程序在哪块代码上出现了性能瓶颈。才可以有针对性的优化代码。</p>\n<p>很幸运的，go语言官方有提供的性能工具pprof，我们可以很方便的分析程序运行过程中造成瓶颈的地方</p>\n<h1 id=\"pprof\"><a href=\"#pprof\" class=\"headerlink\" title=\"pprof\"></a>pprof</h1><h2 id=\"什么是pprof\"><a href=\"#什么是pprof\" class=\"headerlink\" title=\"什么是pprof\"></a>什么是pprof</h2><p>pprof是Go语言内置的标准方法用来调试Go程序性能。golang官方有提供两种pprof启动的方式，分别是 <a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"noopener\">runtime/pprof</a>，<a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"noopener\">net/http/pprof</a> ，它能提取出来应用程序的CPU和内存数据，此外还有运行的代码行数和内容信息。</p>\n<h2 id=\"pprof文件生成\"><a href=\"#pprof文件生成\" class=\"headerlink\" title=\"pprof文件生成\"></a>pprof文件生成</h2><h3 id=\"runtime-pprof\"><a href=\"#runtime-pprof\" class=\"headerlink\" title=\"runtime/pprof\"></a>runtime/pprof</h3><p>此包是方便不是提供web服务的后端程序来进行分析性能</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf, err := os.Create(fmt.Sprintf(<span class=\"string\">\"cpu-%s.pprof\"</span>, time.Now().Format(<span class=\"string\">\"20060102\"</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"create CPU profile error: \"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(f); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"start CPU profile error: \"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> pprof.StopCPUProfile()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tdoSth()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"comment\">//优雅退出</span></span><br><span class=\"line\">\tsigChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</span><br><span class=\"line\">\texitChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\"signal received\"</span>, &lt;-sigChan)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := server.Stop(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texitChan &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-exitChan:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> s := &lt;-sigChan:</span><br><span class=\"line\">\t\tlog.Panicln(<span class=\"string\">\"signal received, stopping immediately\"</span>, s)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSth</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\trand.Float32()</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">500</span> * time.Millisecond)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时运行程序会生成关于cpu统计的文件cpu-20170823.pprof</p>\n<p>然后通过命令执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ <span class=\"keyword\">go</span> tool pprof .\\cpu<span class=\"number\">-20170823.</span>pprof</span><br><span class=\"line\">Type: cpu</span><br><span class=\"line\">Time: Jul <span class=\"number\">19</span>, <span class=\"number\">2018</span> at <span class=\"number\">5</span>:<span class=\"number\">31</span>pm (CST)</span><br><span class=\"line\">Duration: <span class=\"number\">58.32s</span>, Total samples = <span class=\"number\">0</span></span><br><span class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</span><br><span class=\"line\">(pprof)</span><br></pre></td></tr></table></figure>\n<p>然后就可以在pprof下使用命令了</p>\n<p>可以通过go tool pprof命令查看pprof支持哪些命令。</p>\n<p><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"noopener\">runtime/pprof</a>的缺点是必须将程序关闭或者设置信号量来停止pprof的输出，这样才可以使用生产的pprof文件</p>\n<h3 id=\"net-http-pprof\"><a href=\"#net-http-pprof\" class=\"headerlink\" title=\"net/http/pprof\"></a>net/http/pprof</h3><p>对专门提供web服务的程序可以使用此包，可以方便的测试应用程序的性能</p>\n<p>要使用<code>net/http/pprof</code>包很简单，在main.go文件导入包的时候，通过<code>_ &quot;net/http/pprof&quot;</code>方式导入，其实看pprof.go的文件就能知道，实现的原理。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, Index)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, Cmdline)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, Profile)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, Symbol)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, Trace)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过浏览器分析\"><a href=\"#通过浏览器分析\" class=\"headerlink\" title=\"通过浏览器分析\"></a>通过浏览器分析</h4><p>pprof.go中最开始先申明一个init函数，这里申明了五个<code>HandleFunc</code>对应的可以在浏览器中可以打开着五个页面</p>\n<p><code>/debug/pprof/</code>页面是首页，可以查看go程序的堆栈、goroutine、线程等信息</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/debug_pprof.png\" alt=\"\"></p>\n<p>一般如果要获取cpu的信息，生成pprof文件，则直接访问<code>/debug/pprof/profile</code>，</p>\n<p>通过代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Profile</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">sec, _ := strconv.ParseInt(r.FormValue(<span class=\"string\">\"seconds\"</span>), <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sec == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tsec = <span class=\"number\">30</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">········</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := pprof.StartCPUProfile(w); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// StartCPUProfile failed, so no writes yet.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Can change header back to text content</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and send error code.</span></span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/plain; charset=utf-8\"</span>)</span><br><span class=\"line\">\t\tw.Header().Set(<span class=\"string\">\"X-Go-Pprof\"</span>, <span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\t\tw.WriteHeader(http.StatusInternalServerError)</span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">\"Could not enable CPU profiling: %s\\n\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsleep(w, time.Duration(sec)*time.Second)</span><br><span class=\"line\">\tpprof.StopCPUProfile()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出<code>Profile</code>函数接收一个cpu收集时间，是按秒为单位收集的，如果，不填的话，默认是30秒的收集时间.</p>\n<p>所以想自定义程序收集cpu的时间的话就可以自己传入手机时间的数值</p>\n<p>比如我要手机1分钟的数据，则只需要<code>localhost:8080/debug/pprof/profile?seconds=60</code>.这样的话，程序就会进入60秒的cpu收集时间，等到收集完成后，会返回一个profile的二进制文件，我们可以给重命名为<code>cpu.pprof</code>，然后就可以使用go tool pprof cpu.pprof 来进行性能分析了。</p>\n<p>同理内存分析可以通过访问<code>localhost:8080/debug/pprof/heap</code></p>\n<h4 id=\"通过命令行来分析\"><a href=\"#通过命令行来分析\" class=\"headerlink\" title=\"通过命令行来分析\"></a>通过命令行来分析</h4><p>可以通过命令收集cpu</p>\n<p><code>go tool pprof http://localhost:8080/debug/pprof/profile</code></p>\n<p>同样可以进行数据收集，当然，可以后面设置参数(<code>--seconds 25</code>表示设置25秒)，默认是30秒的收集时间。收集完成后悔进入pprof模式下</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/client_pprof.png\" alt=\"\"></p>\n<p>也可以通过命令收集内存<code>go tool pprof http://localhost:8080/debug/pprof/heap</code></p>\n<h2 id=\"pprof文件分析\"><a href=\"#pprof文件分析\" class=\"headerlink\" title=\"pprof文件分析\"></a>pprof文件分析</h2><p>接下来就是重点，如何分析我们pprof文件：</p>\n<p>在进入pprof状态之后，可以使用top命令来查看，最耗费资源的是哪些函数</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/analyze.png\" alt=\"\"></p>\n<p>这里分析下各个参数的意思</p>\n<h3 id=\"flat和cum\"><a href=\"#flat和cum\" class=\"headerlink\" title=\"flat和cum:\"></a>flat和cum:</h3><p>Flat表示给定函数的持续时间，cum表示当前函数的累加调用。 比如有一个函数a()调用函数b()和函数c(),</p>\n<p>函数b()耗时1秒，函数b()耗时两秒，那么cum就是1+2=3s</p>\n<p>flat表示的是a()函数自己耗费的时间</p>\n<p>如果a()函数是这样的</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b() <span class=\"comment\">// takes 2s</span></span><br><span class=\"line\">do something directly <span class=\"comment\">// takes 3s</span></span><br><span class=\"line\">c() <span class=\"comment\">// takes 2s</span></span><br></pre></td></tr></table></figure>\n<p>那么a函数的cum值是6秒，flat是3秒（假设do something directly里面没有函数调用）</p>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum:\"></a>sum:</h3><p>要理解sum需要看上图，第一个sum是25%和flat的25%是相同的，然后第二个sum是50%,是第一个flat的25%加上第二个flat的25%，以此类推。</p>\n<p>具体可以参考：</p>\n<p><a href=\"https://www.reddit.com/r/golang/comments/7ony5f/what_is_the_meaning_of_flat_and_cum_in_golang/\" target=\"_blank\" rel=\"noopener\">What is the meaning of “flat” and “cum” in golang pprof output</a></p>\n<h3 id=\"图形分析\"><a href=\"#图形分析\" class=\"headerlink\" title=\"图形分析\"></a>图形分析</h3><p>只是通过top命令来查看分析数据的话，太过抽象也不好分析，go tool pprof中也有工具可以把生成的pprof文件转换成图形工具，但是需要事先安装 graphviz 。</p>\n<p>安装好之后可以直接使用命令来生成图片</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZbp14ouog5ocoeakj39q1Z guess]# <span class=\"keyword\">go</span> tool pprof  cpu.pprof</span><br><span class=\"line\">Entering interactive mode (<span class=\"keyword\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands)</span><br><span class=\"line\">(pprof) svg</span><br><span class=\"line\">Generating report in profile001.svg</span><br><span class=\"line\">(pprof)</span><br></pre></td></tr></table></figure>\n<p>这样就生成了svg图片<code>profile001.svg</code></p>\n<p><img src=\"/2017/08/23/Go性能分析工具/sum&amp;cum&amp;flat.png\" alt=\"\"></p>\n<p>由于我代码中并没有写太多的业务逻辑，所以这里可以看到大部分的耗时多事发生在运行时，四个耗时25%的函数是<code>runtime.memmove</code> <code>runtime.memeqbody</code> <code>runtimecgocall</code> <code>runtime.stdcall</code>.接下来，可以根据图形具体分析程序在哪里耗费资源然后进行优化</p>\n<h2 id=\"火焰图\"><a href=\"#火焰图\" class=\"headerlink\" title=\"火焰图\"></a>火焰图</h2><p>上图的结构给我们的是晦涩难懂的感觉，我们需要寻求更直观，更简单的分析工具。而且使用火焰图不需要安装graphviz</p>\n<p>go-torch是<code>Uber</code>公司开源的一款针对Go语言程序的火焰图生成工具，能收集 stack traces,并把它们整理成火焰图，直观地程序给开发人员。</p>\n<p>go-torch是基于使用BrendanGregg创建的火焰图工具生成直观的图像，很方便地分析Go的各个方法所占用的CPU的时间， 火焰图是一个新的方法来可视化CPU的使用情况，本文中我会展示如何使用它辅助我们排查问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1.首先，我们要配置<code>FlameGraph</code>的脚本</p>\n<blockquote>\n<p>FlameGraph 是profile数据的可视化层工具，已被广泛用于Python和Node</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/brendangregg/FlameGraph.git</span><br></pre></td></tr></table></figure>\n<p>2.检出完成后，把<code>flamegraph.pl</code>拷到我们机器环境变量$PATH的路径中去，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp flamegraph.pl /usr/local/bin</span><br></pre></td></tr></table></figure>\n<p>3.在终端输入 <code>flamegraph.pl -h</code> 是否安装FlameGraph成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flamegraph.pl -h</span><br><span class=\"line\">Option h is ambiguous (hash, height, help)</span><br><span class=\"line\">USAGE: /usr/local/bin/flamegraph.pl [options] infile &gt; outfile.svg</span><br><span class=\"line\"></span><br><span class=\"line\">    --title       # change title text</span><br><span class=\"line\">    --width       # width of image (default 1200)</span><br><span class=\"line\">    --height      # height of each frame (default 16)</span><br><span class=\"line\">    --minwidth    # omit smaller functions (default 0.1 pixels)</span><br><span class=\"line\">    --fonttype    # font type (default &quot;Verdana&quot;)</span><br><span class=\"line\">    --fontsize    # font size (default 12)</span><br><span class=\"line\">    --countname   # count type label (default &quot;samples&quot;)</span><br><span class=\"line\">    --nametype    # name type label (default &quot;Function:&quot;)</span><br><span class=\"line\">    --colors      # set color palette. choices are: hot (default), mem, io,</span><br><span class=\"line\">                  # wakeup, chain, java, js, perl, red, green, blue, aqua,</span><br><span class=\"line\">                  # yellow, purple, orange</span><br><span class=\"line\">    --hash        # colors are keyed by function name hash</span><br><span class=\"line\">    --cp          # use consistent palette (palette.map)</span><br><span class=\"line\">    --reverse     # generate stack-reversed flame graph</span><br><span class=\"line\">    --inverted    # icicle graph</span><br><span class=\"line\">    --negate      # switch differential hues (blue&lt;-&gt;red)</span><br><span class=\"line\">    --help        # this message</span><br><span class=\"line\"></span><br><span class=\"line\">    eg,</span><br><span class=\"line\">    /usr/local/bin/flamegraph.pl --title=&quot;Flame Graph: malloc()&quot; trace.txt &gt; graph.svg</span><br></pre></td></tr></table></figure>\n<p>4.安装go-torch</p>\n<p>有了flamegraph的支持，我们接下来要使用go-torch展示profile的输出，而安装go-torch很简单，我们使用下面的命令即可完成安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -v github.com/uber/go-torch</span><br></pre></td></tr></table></figure>\n<p>5.使用go-torch -h命令：可以查看go-torch的帮助文档，这里我们根据生产的cpu.pprof文件，通过使用go-torch 命令来生成火焰图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go-torch -b cpu.pprof -f cpu.svg</span><br><span class=\"line\">INFO[12:38:16] Run pprof command: go tool pprof -raw cpu.pprof</span><br><span class=\"line\">INFO[12:38:16] Writing svg to cpu.svg</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>-b：</strong>表示需要被转换成svg的二进制文件</li>\n<li><strong>-f：</strong>表示要生成的svg图片名称</li>\n</ul>\n<p>此时已经将cpu.pprof生成了cpu.svg的火焰图了，可以通过浏览器查看</p>\n<p><img src=\"/2017/08/23/Go性能分析工具/fire1.png\" alt=\"\"></p>\n<p>这就是go-torch生成的火焰图，看起来是不是舒服多了。</p>\n<blockquote>\n<ul>\n<li>火焰图的y轴表示cpu调用方法的先后，比如：<code>bufio.(*Writer).Flush</code>是由<code>net/http.(*chunkWriter).write</code>和<code>net/http.CheckConnErrorWriter.Writer</code>两个函数组成的。</li>\n<li>x轴表示在每个采样调用时间内，方法所占的时间百分比，越宽代表占据cpu时间越多</li>\n</ul>\n</blockquote>\n<p>有了火焰图，我们就可以更清楚的看到哪个方法调用耗时长了，然后不断的修正代码，重新采样，不断优化。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://lihaoquan.me/2017/1/1/Profiling-and-Optimizing-Go-using-go-torch.html\" target=\"_blank\" rel=\"noopener\">Go代码调优利器-火焰图</a></p>\n<p><a href=\"https://blog.csdn.net/WaltonWang/article/details/54019891\" target=\"_blank\" rel=\"noopener\">Golang性能调优(go-torch, go tool pprof)</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/Consul安装部署/leader_52.png","slug":"leader_52.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Go单元测试/带有错误的convey.png","slug":"带有错误的convey.png","post":"cjknr9x3c0002u5n9w0v8r84z","modified":0,"renderable":0},{"_id":"source/_posts/Go单元测试/更新.png","slug":"更新.png","post":"cjknr9x3c0002u5n9w0v8r84z","modified":0,"renderable":0},{"_id":"source/_posts/codis安装及配置/addgroup.jpg","slug":"addgroup.jpg","post":"cjknr9x3j0009u5n9v962kzvz","modified":0,"renderable":0},{"_id":"source/_posts/codis安装及配置/rebalance_slots.jpg","slug":"rebalance_slots.jpg","post":"cjknr9x3j0009u5n9v962kzvz","modified":0,"renderable":0},{"_id":"source/_posts/微服务初探/客户端服务发现.png","slug":"客户端服务发现.png","post":"cjknr9x3r000ju5n9tcmv8kan","modified":0,"renderable":0},{"_id":"source/_posts/微服务初探/服务端服务发现.png","slug":"服务端服务发现.png","post":"cjknr9x3r000ju5n9tcmv8kan","modified":0,"renderable":0},{"_id":"source/_posts/Go里面的堆栈跟踪/Figure1.png","slug":"Figure1.png","post":"cjknr9x3g0006u5n930kw84r2","modified":0,"renderable":0},{"_id":"source/_posts/Go里面的堆栈跟踪/Figure2.png","slug":"Figure2.png","post":"cjknr9x3g0006u5n930kw84r2","modified":0,"renderable":0},{"_id":"source/_posts/Go里面的堆栈跟踪/Figure3.png","slug":"Figure3.png","post":"cjknr9x3g0006u5n930kw84r2","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/candidate_146.png","slug":"candidate_146.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/consul_dev.png","slug":"consul_dev.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/consul架构图.png","slug":"consul架构图.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/member_dev.png","slug":"member_dev.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/ui_1.png","slug":"ui_1.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/ui_2.png","slug":"ui_2.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/ui_3.png","slug":"ui_3.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Consul安装部署/ui_dev.png","slug":"ui_dev.png","post":"cjknr9x370000u5n9fx4uq6t6","modified":0,"renderable":0},{"_id":"source/_posts/Go性能分析工具/analyze.png","slug":"analyze.png","post":"cjknrbqdz0000ufn9d7vmo1jd","modified":0,"renderable":0},{"_id":"source/_posts/Go性能分析工具/client_pprof.png","slug":"client_pprof.png","post":"cjknrbqdz0000ufn9d7vmo1jd","modified":0,"renderable":0},{"_id":"source/_posts/Go性能分析工具/debug_pprof.png","slug":"debug_pprof.png","post":"cjknrbqdz0000ufn9d7vmo1jd","modified":0,"renderable":0},{"_id":"source/_posts/Go性能分析工具/profile001.svg","slug":"profile001.svg","post":"cjknrbqdz0000ufn9d7vmo1jd","modified":0,"renderable":0},{"_id":"source/_posts/Go性能分析工具/fire1.png","slug":"fire1.png","post":"cjknrbqdz0000ufn9d7vmo1jd","modified":0,"renderable":0},{"_id":"source/_posts/Go性能分析工具/sum&cum&flat.png","slug":"sum&cum&flat.png","post":"cjknrbqdz0000ufn9d7vmo1jd","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjknr9x370000u5n9fx4uq6t6","category_id":"cjknr9x3f0004u5n9iv09teks","_id":"cjknr9x3q000fu5n9y6ylpc9y"},{"post_id":"cjknr9x3n000du5n9ftav6ou7","category_id":"cjknr9x3k000au5n9sn1f4jd9","_id":"cjknr9x3s000lu5n9u7rozjuw"},{"post_id":"cjknr9x3c0002u5n9w0v8r84z","category_id":"cjknr9x3k000au5n9sn1f4jd9","_id":"cjknr9x3t000ou5n9oxo0f54v"},{"post_id":"cjknr9x3g0006u5n930kw84r2","category_id":"cjknr9x3k000au5n9sn1f4jd9","_id":"cjknr9x3u000ru5n9vfhw9iys"},{"post_id":"cjknr9x3i0008u5n9rky4bnfz","category_id":"cjknr9x3k000au5n9sn1f4jd9","_id":"cjknr9x3v000uu5n9z1zffzgy"},{"post_id":"cjknr9x3j0009u5n9v962kzvz","category_id":"cjknr9x3u000qu5n9tmfuejfl","_id":"cjknr9x3v000zu5n9dd8ig2n2"},{"post_id":"cjknr9x3p000eu5n98wp5ryn1","category_id":"cjknr9x3u000qu5n9tmfuejfl","_id":"cjknr9x3w0012u5n9ifzeihgj"},{"post_id":"cjknr9x3r000ju5n9tcmv8kan","category_id":"cjknr9x3v000yu5n9i2409m4y","_id":"cjknr9x3w0014u5n9x120x3nb"},{"post_id":"cjknrbqdz0000ufn9d7vmo1jd","category_id":"cjknr9x3k000au5n9sn1f4jd9","_id":"cjknrbqe60002ufn9ya7delj6"}],"PostTag":[{"post_id":"cjknr9x370000u5n9fx4uq6t6","tag_id":"cjknr9x3g0005u5n91izgo1bu","_id":"cjknr9x3n000cu5n9a4bekzz9"},{"post_id":"cjknr9x3n000du5n9ftav6ou7","tag_id":"cjknr9x3k000bu5n91gmacjrz","_id":"cjknr9x3r000iu5n93v49onz6"},{"post_id":"cjknr9x3c0002u5n9w0v8r84z","tag_id":"cjknr9x3k000bu5n91gmacjrz","_id":"cjknr9x3s000ku5n9frw19h0h"},{"post_id":"cjknr9x3g0006u5n930kw84r2","tag_id":"cjknr9x3k000bu5n91gmacjrz","_id":"cjknr9x3t000pu5n9nas0fzgg"},{"post_id":"cjknr9x3i0008u5n9rky4bnfz","tag_id":"cjknr9x3k000bu5n91gmacjrz","_id":"cjknr9x3u000tu5n9367qvv9y"},{"post_id":"cjknr9x3j0009u5n9v962kzvz","tag_id":"cjknr9x3u000su5n9zqgfe90l","_id":"cjknr9x3v000xu5n9iyr6e7fx"},{"post_id":"cjknr9x3p000eu5n98wp5ryn1","tag_id":"cjknr9x3v000wu5n9l4t4e71v","_id":"cjknr9x3w0011u5n929c9plun"},{"post_id":"cjknr9x3r000ju5n9tcmv8kan","tag_id":"cjknr9x3w0010u5n9ditiygz8","_id":"cjknr9x3w0013u5n96csc7vpa"},{"post_id":"cjknrbqdz0000ufn9d7vmo1jd","tag_id":"cjknr9x3k000bu5n91gmacjrz","_id":"cjknrbqe20001ufn9zu68itqf"}],"Tag":[{"name":"Consul","_id":"cjknr9x3g0005u5n91izgo1bu"},{"name":"golang","_id":"cjknr9x3k000bu5n91gmacjrz"},{"name":"codis","_id":"cjknr9x3u000su5n9zqgfe90l"},{"name":"redis","_id":"cjknr9x3v000wu5n9l4t4e71v"},{"name":"微服务","_id":"cjknr9x3w0010u5n9ditiygz8"}]}}